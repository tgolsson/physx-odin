{
  "enums": [
    {
      "repr": "Int",
      "name": "PxEMPTY",
      "cxx_qt": "PxEMPTY",
      "comment": {
        "summary": {
          "b": [
            "enum for empty constructor tag"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "PxEmpty",
          "value": 0,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxZERO",
      "cxx_qt": "PxZERO",
      "comment": {
        "summary": {
          "b": [
            "enum for zero constructor tag for vectors and matrices"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "PxZero",
          "value": 0,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxIDENTITY",
      "cxx_qt": "PxIDENTITY",
      "comment": {
        "summary": {
          "b": [
            "enum for identity constructor flag for quaternions, transforms, and matrices"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "PxIdentity",
          "value": 0,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxErrorCode",
      "cxx_qt": "PxErrorCode::Enum",
      "comment": {
        "summary": {
          "b": [
            "Error codes"
          ]
        },
        "additional": {
          "b": [
            "These error codes are passed to #PxErrorCallback"
          ]
        }
      },
      "variants": [
        {
          "name": "eNO_ERROR",
          "value": 0,
          "comment": null
        },
        {
          "name": "eDEBUG_INFO",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "An informational message."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDEBUG_WARNING",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "a warning message for the user to help with debugging"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINVALID_PARAMETER",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "method called with invalid parameter(s)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINVALID_OPERATION",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "method was called at a time when an operation is not possible"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eOUT_OF_MEMORY",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "method failed to allocate some memory"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINTERNAL_ERROR",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "The library failed for some reason.",
                "Possibly you have passed invalid values like NaNs, which are not checked for."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eABORT",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "An unrecoverable error, execution should be halted and log output flushed"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePERF_WARNING",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "The SDK has determined that an operation may result in poor performance."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMASK_ALL",
          "value": -1,
          "comment": {
            "summary": {
              "b": [
                "A bit mask for including all errors"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "UInt",
      "name": "PxThreadPriority",
      "cxx_qt": "PxThreadPriority::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eHIGH",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "High priority"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eABOVE_NORMAL",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Above Normal priority"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNORMAL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Normal/default priority"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBELOW_NORMAL",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Below Normal priority"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLOW",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Low priority."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_DWORD",
          "value": 4294967295,
          "comment": null
        }
      ]
    },
    {
      "repr": "UInt",
      "name": "PxDebugColor",
      "cxx_qt": "PxDebugColor::Enum",
      "comment": {
        "summary": {
          "b": [
            "Default color values used for debug rendering."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eARGB_BLACK",
          "value": 4278190080,
          "comment": null
        },
        {
          "name": "eARGB_RED",
          "value": 4294901760,
          "comment": null
        },
        {
          "name": "eARGB_GREEN",
          "value": 4278255360,
          "comment": null
        },
        {
          "name": "eARGB_BLUE",
          "value": 4278190335,
          "comment": null
        },
        {
          "name": "eARGB_YELLOW",
          "value": 4294967040,
          "comment": null
        },
        {
          "name": "eARGB_MAGENTA",
          "value": 4294902015,
          "comment": null
        },
        {
          "name": "eARGB_CYAN",
          "value": 4278255615,
          "comment": null
        },
        {
          "name": "eARGB_WHITE",
          "value": 4294967295,
          "comment": null
        },
        {
          "name": "eARGB_GREY",
          "value": 4286611584,
          "comment": null
        },
        {
          "name": "eARGB_DARKRED",
          "value": 4287102976,
          "comment": null
        },
        {
          "name": "eARGB_DARKGREEN",
          "value": 4278224896,
          "comment": null
        },
        {
          "name": "eARGB_DARKBLUE",
          "value": 4278190216,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConcreteType",
      "cxx_qt": "PxConcreteType::Enum",
      "comment": {
        "summary": {
          "b": [
            "an enumeration of concrete classes inheriting from PxBase"
          ]
        },
        "additional": {
          "b": [
            "Enumeration space is reserved for future PhysX core types, PhysXExtensions,",
            "PhysXVehicle and Custom application types."
          ]
        }
      },
      "variants": [
        {
          "name": "eUNDEFINED",
          "value": 0,
          "comment": null
        },
        {
          "name": "eHEIGHTFIELD",
          "value": 1,
          "comment": null
        },
        {
          "name": "eCONVEX_MESH",
          "value": 2,
          "comment": null
        },
        {
          "name": "eTRIANGLE_MESH_BVH33",
          "value": 3,
          "comment": null
        },
        {
          "name": "eTRIANGLE_MESH_BVH34",
          "value": 4,
          "comment": null
        },
        {
          "name": "eTETRAHEDRON_MESH",
          "value": 5,
          "comment": null
        },
        {
          "name": "eSOFTBODY_MESH",
          "value": 6,
          "comment": null
        },
        {
          "name": "eRIGID_DYNAMIC",
          "value": 7,
          "comment": null
        },
        {
          "name": "eRIGID_STATIC",
          "value": 8,
          "comment": null
        },
        {
          "name": "eSHAPE",
          "value": 9,
          "comment": null
        },
        {
          "name": "eMATERIAL",
          "value": 10,
          "comment": null
        },
        {
          "name": "eSOFTBODY_MATERIAL",
          "value": 11,
          "comment": null
        },
        {
          "name": "eCLOTH_MATERIAL",
          "value": 12,
          "comment": null
        },
        {
          "name": "ePBD_MATERIAL",
          "value": 13,
          "comment": null
        },
        {
          "name": "eFLIP_MATERIAL",
          "value": 14,
          "comment": null
        },
        {
          "name": "eMPM_MATERIAL",
          "value": 15,
          "comment": null
        },
        {
          "name": "eCUSTOM_MATERIAL",
          "value": 16,
          "comment": null
        },
        {
          "name": "eCONSTRAINT",
          "value": 17,
          "comment": null
        },
        {
          "name": "eAGGREGATE",
          "value": 18,
          "comment": null
        },
        {
          "name": "eARTICULATION_REDUCED_COORDINATE",
          "value": 19,
          "comment": null
        },
        {
          "name": "eARTICULATION_LINK",
          "value": 20,
          "comment": null
        },
        {
          "name": "eARTICULATION_JOINT_REDUCED_COORDINATE",
          "value": 21,
          "comment": null
        },
        {
          "name": "eARTICULATION_SENSOR",
          "value": 22,
          "comment": null
        },
        {
          "name": "eARTICULATION_SPATIAL_TENDON",
          "value": 23,
          "comment": null
        },
        {
          "name": "eARTICULATION_FIXED_TENDON",
          "value": 24,
          "comment": null
        },
        {
          "name": "eARTICULATION_ATTACHMENT",
          "value": 25,
          "comment": null
        },
        {
          "name": "eARTICULATION_TENDON_JOINT",
          "value": 26,
          "comment": null
        },
        {
          "name": "ePRUNING_STRUCTURE",
          "value": 27,
          "comment": null
        },
        {
          "name": "eBVH",
          "value": 28,
          "comment": null
        },
        {
          "name": "eSOFT_BODY",
          "value": 29,
          "comment": null
        },
        {
          "name": "eSOFT_BODY_STATE",
          "value": 30,
          "comment": null
        },
        {
          "name": "ePBD_PARTICLESYSTEM",
          "value": 31,
          "comment": null
        },
        {
          "name": "eFLIP_PARTICLESYSTEM",
          "value": 32,
          "comment": null
        },
        {
          "name": "eMPM_PARTICLESYSTEM",
          "value": 33,
          "comment": null
        },
        {
          "name": "eCUSTOM_PARTICLESYSTEM",
          "value": 34,
          "comment": null
        },
        {
          "name": "eFEM_CLOTH",
          "value": 35,
          "comment": null
        },
        {
          "name": "eHAIR_SYSTEM",
          "value": 36,
          "comment": null
        },
        {
          "name": "ePARTICLE_BUFFER",
          "value": 37,
          "comment": null
        },
        {
          "name": "ePARTICLE_DIFFUSE_BUFFER",
          "value": 38,
          "comment": null
        },
        {
          "name": "ePARTICLE_CLOTH_BUFFER",
          "value": 39,
          "comment": null
        },
        {
          "name": "ePARTICLE_RIGID_BUFFER",
          "value": 40,
          "comment": null
        },
        {
          "name": "ePHYSX_CORE_COUNT",
          "value": 41,
          "comment": null
        },
        {
          "name": "eFIRST_PHYSX_EXTENSION",
          "value": 256,
          "comment": null
        },
        {
          "name": "eFIRST_VEHICLE_EXTENSION",
          "value": 512,
          "comment": null
        },
        {
          "name": "eFIRST_USER_EXTENSION",
          "value": 1024,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBaseFlag",
      "cxx_qt": "PxBaseFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags for PxBase."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eOWNS_MEMORY",
          "value": 1,
          "comment": null
        },
        {
          "name": "eIS_RELEASABLE",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMetaDataFlag",
      "cxx_qt": "PxMetaDataFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags used to configure binary meta data entries, typically set through PX_DEF_BIN_METADATA defines."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eCLASS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "declares a class"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVIRTUAL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "declares class to be virtual"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTYPEDEF",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "declares a typedef"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePTR",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "declares a pointer"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHANDLE",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "declares a handle"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eEXTRA_DATA",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "declares extra data exported with PxSerializer::exportExtraData"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eEXTRA_ITEM",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "specifies one element of extra data"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eEXTRA_ITEMS",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "specifies an array of extra data"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eEXTRA_NAME",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "specifies a name of extra data"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUNION",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "declares a union"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePADDING",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "declares explicit padding data"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALIGNMENT",
          "value": 2048,
          "comment": {
            "summary": {
              "b": [
                "declares aligned data"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOUNT_MASK_MSB",
          "value": 4096,
          "comment": {
            "summary": {
              "b": [
                "specifies that the count value's most significant bit needs to be masked out"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOUNT_SKIP_IF_ONE",
          "value": 8192,
          "comment": {
            "summary": {
              "b": [
                "specifies that the count value is treated as zero for a variable value of one - special case for single triangle meshes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTROL_FLIP",
          "value": 16384,
          "comment": {
            "summary": {
              "b": [
                "specifies that the control value is the negate of the variable value"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTROL_MASK",
          "value": 32768,
          "comment": {
            "summary": {
              "b": [
                "specifies that the control value is masked - mask bits are assumed to be within eCONTROL_MASK_RANGE"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTROL_MASK_RANGE",
          "value": 255,
          "comment": {
            "summary": {
              "b": [
                "mask range allowed for eCONTROL_MASK"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_DWORD",
          "value": 2147483647,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxTaskType",
      "cxx_qt": "PxTaskType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies the type of each heavyweight PxTask object"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eCPU",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "PxTask will be run on the CPU"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNOT_PRESENT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Return code when attempting to find a task that does not exist"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOMPLETED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "PxTask execution has been completed"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxGeometryType",
      "cxx_qt": "PxGeometryType::Enum",
      "comment": {
        "summary": {
          "b": [
            "A geometry type."
          ]
        },
        "additional": {
          "b": [
            "Used to distinguish the type of a ::PxGeometry object."
          ]
        }
      },
      "variants": [
        {
          "name": "eSPHERE",
          "value": 0,
          "comment": null
        },
        {
          "name": "ePLANE",
          "value": 1,
          "comment": null
        },
        {
          "name": "eCAPSULE",
          "value": 2,
          "comment": null
        },
        {
          "name": "eBOX",
          "value": 3,
          "comment": null
        },
        {
          "name": "eCONVEXMESH",
          "value": 4,
          "comment": null
        },
        {
          "name": "ePARTICLESYSTEM",
          "value": 5,
          "comment": null
        },
        {
          "name": "eTETRAHEDRONMESH",
          "value": 6,
          "comment": null
        },
        {
          "name": "eTRIANGLEMESH",
          "value": 7,
          "comment": null
        },
        {
          "name": "eHEIGHTFIELD",
          "value": 8,
          "comment": null
        },
        {
          "name": "eHAIRSYSTEM",
          "value": 9,
          "comment": null
        },
        {
          "name": "eCUSTOM",
          "value": 10,
          "comment": null
        },
        {
          "name": "eGEOMETRY_COUNT",
          "value": 11,
          "comment": {
            "summary": {
              "b": [
                "internal use only!"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINVALID",
          "value": -1,
          "comment": {
            "summary": {
              "b": [
                "internal use only!"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxGeometryQueryFlag",
      "cxx_qt": "PxGeometryQueryFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Geometry-level query flags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSIMD_GUARD",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Saves/restores SIMD control word for each query (safer but slower). Omit this if you took care of it yourself in your app."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBVHBuildStrategy",
      "cxx_qt": "PxBVHBuildStrategy::Enum",
      "comment": {
        "summary": {
          "b": [
            "Desired build strategy for bounding-volume hierarchies"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eFAST",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Fast build strategy. Fast build speed, good runtime performance in most cases. Recommended for runtime cooking."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDEFAULT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Default build strategy. Medium build speed, good runtime performance in all cases."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSAH",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "SAH build strategy. Slower builds, slightly improved runtime performance in some cases."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 3,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConvexMeshGeometryFlag",
      "cxx_qt": "PxConvexMeshGeometryFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags controlling the simulated behavior of the convex mesh geometry."
          ]
        },
        "additional": {
          "b": [
            "Used in ::PxConvexMeshGeometryFlags."
          ]
        }
      },
      "variants": [
        {
          "name": "eTIGHT_BOUNDS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Use tighter (but more expensive to compute) bounds around the convex geometry."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshGeometryFlag",
      "cxx_qt": "PxMeshGeometryFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags controlling the simulated behavior of the triangle mesh geometry."
          ]
        },
        "additional": {
          "b": [
            "Used in ::PxMeshGeometryFlags."
          ]
        }
      },
      "variants": [
        {
          "name": "eTIGHT_BOUNDS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Use tighter (but more expensive to compute) bounds around the triangle mesh geometry."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDOUBLE_SIDED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Meshes with this flag set are treated as double-sided.",
                "This flag is currently only used for raycasts and sweeps (it is ignored for overlap queries).",
                "For detailed specifications of this flag for meshes and heightfields please refer to the Geometry Query section of the user guide."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxParticleSolverType",
      "cxx_qt": "PxParticleSolverType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies the solver to use for a particle system."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "ePBD",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The position based dynamics solver that can handle fluid, granular material, cloth, inflatables etc. See #PxPBDParticleSystem."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFLIP",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The FLIP fluid solver. See #PxFLIPParticleSystem."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMPM",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The MPM (material point method) solver that can handle a variety of materials. See #PxMPMParticleSystem."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCUSTOM",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Custom solver. The user needs to specify the interaction of the particle by providing appropriate functions. Can be used e.g. for molecular dynamics simulations. See #PxCustomParticleSystem."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHitFlag",
      "cxx_qt": "PxHitFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Scene query and geometry query behavior flags."
          ]
        },
        "additional": {
          "b": [
            "PxHitFlags are used for 3 different purposes:",
            "",
            "1) To request hit fields to be filled in by scene queries (such as hit position, normal, face index or UVs).",
            "2) Once query is completed, to indicate which fields are valid (note that a query may produce more valid fields than requested).",
            "3) To specify additional options for the narrow phase and mid-phase intersection routines.",
            "",
            "All these flags apply to both scene queries and geometry queries (PxGeometryQuery)."
          ]
        }
      },
      "variants": [
        {
          "name": "ePOSITION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "\"position\" member of #PxQueryHit is valid"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNORMAL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "\"normal\" member of #PxQueryHit is valid"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUV",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "\"u\" and \"v\" barycentric coordinates of #PxQueryHit are valid. Not applicable to sweep queries."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eASSUME_NO_INITIAL_OVERLAP",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Performance hint flag for sweeps when it is known upfront there's no initial overlap.",
                "NOTE: using this flag may cause undefined results if shapes are initially overlapping."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eANY_HIT",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Report any first hit. Used for geometries that contain more than one primitive. For meshes,",
                "if neither eMESH_MULTIPLE nor eANY_HIT is specified, a single closest hit will be reported."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMESH_MULTIPLE",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Report all hits for meshes rather than just the first. Not applicable to sweep queries."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMESH_BOTH_SIDES",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Report hits with back faces of mesh triangles. Also report hits for raycast",
                "originating on mesh surface and facing away from the surface normal. Not applicable to sweep queries.",
                "Please refer to the user guide for heightfield-specific differences."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePRECISE_SWEEP",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Use more accurate but slower narrow phase sweep tests.",
                "May provide better compatibility with PhysX 3.2 sweep behavior."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMTD",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "Report the minimum translation depth, normal and contact point."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFACE_INDEX",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "\"face index\" member of #PxQueryHit is valid"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDEFAULT",
          "value": 1027,
          "comment": null
        },
        {
          "name": "eMODIFIABLE_FLAGS",
          "value": 464,
          "comment": {
            "summary": {
              "b": [
                "Only this subset of flags can be modified by pre-filter. Other modifications will be discarded."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHeightFieldFormat",
      "cxx_qt": "PxHeightFieldFormat::Enum",
      "comment": {
        "summary": {
          "b": [
            "Describes the format of height field samples."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eS16_TM",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Height field height data is 16 bit signed integers, followed by triangle materials."
              ]
            },
            "additional": {
              "b": [
                "Each sample is 32 bits wide arranged as follows:",
                "",
                "1) First there is a 16 bit height value.",
                "2) Next, two one byte material indices, with the high bit of each byte reserved for special use.",
                "(so the material index is only 7 bits).",
                "The high bit of material0 is the tess-flag.",
                "The high bit of material1 is reserved for future use.",
                "",
                "There are zero or more unused bytes before the next sample depending on PxHeightFieldDesc.sampleStride,",
                "where the application may eventually keep its own data.",
                "",
                "This is the only format supported at the moment."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHeightFieldTessFlag",
      "cxx_qt": "PxHeightFieldTessFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Determines the tessellation of height field cells."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "e0TH_VERTEX_SHARED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "This flag determines which way each quad cell is subdivided."
              ]
            },
            "additional": {
              "b": [
                "The flag lowered indicates subdivision like this: (the 0th vertex is referenced by only one triangle)",
                "",
                "+--+--+--+---> column",
                "| /| /| /|",
                "|/ |/ |/ |",
                "+--+--+--+",
                "| /| /| /|",
                "|/ |/ |/ |",
                "+--+--+--+",
                "|",
                "|",
                "V row",
                "",
                "The flag raised indicates subdivision like this: (the 0th vertex is shared by two triangles)",
                "",
                "+--+--+--+---> column",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "+--+--+--+",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "\\",
                "|",
                "+--+--+--+",
                "|",
                "|",
                "V row"
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHeightFieldFlag",
      "cxx_qt": "PxHeightFieldFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enum with flag values to be used in PxHeightFieldDesc.flags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eNO_BOUNDARY_EDGES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Disable collisions with height field with boundary edges."
              ]
            },
            "additional": {
              "b": [
                "Raise this flag if several terrain patches are going to be placed adjacent to each other,",
                "to avoid a bump when sliding across.",
                "",
                "This flag is ignored in contact generation with sphere and capsule shapes."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHeightFieldMaterial",
      "cxx_qt": "PxHeightFieldMaterial::Enum",
      "comment": {
        "summary": {
          "b": [
            "Special material index values for height field samples."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eHOLE",
          "value": 127,
          "comment": {
            "summary": {
              "b": [
                "A material indicating that the triangle should be treated as a hole in the mesh."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshMeshQueryFlag",
      "cxx_qt": "PxMeshMeshQueryFlag::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eDEFAULT",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Report all overlaps"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISCARD_COPLANAR",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Ignore coplanar triangle-triangle overlaps"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshFlag",
      "cxx_qt": "PxMeshFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enum with flag values to be used in PxSimpleTriangleMesh::flags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eFLIPNORMALS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Specifies if the SDK should flip normals."
              ]
            },
            "additional": {
              "b": [
                "The PhysX libraries assume that the face normal of a triangle with vertices [a,b,c] can be computed as:",
                "edge1 = b-a",
                "edge2 = c-a",
                "face_normal = edge1 x edge2.",
                "",
                "Note: This is the same as a counterclockwise winding in a right handed coordinate system or",
                "alternatively a clockwise winding order in a left handed coordinate system.",
                "",
                "If this does not match the winding order for your triangles, raise the below flag."
              ]
            }
          }
        },
        {
          "name": "e16_BIT_INDICES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Denotes the use of 16-bit vertex indices"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshMidPhase",
      "cxx_qt": "PxMeshMidPhase::Enum",
      "comment": {
        "summary": {
          "b": [
            "Mesh midphase structure. This enum is used to select the desired acceleration structure for midphase queries",
            "(i.e. raycasts, overlaps, sweeps vs triangle meshes)."
          ]
        },
        "additional": {
          "b": [
            "The PxMeshMidPhase::eBVH33 structure is the one used in recent PhysX versions (up to PhysX 3.3). It has great performance and is",
            "supported on all platforms. It is deprecated since PhysX 5.x.",
            "",
            "The PxMeshMidPhase::eBVH34 structure is a revisited implementation introduced in PhysX 3.4. It can be significantly faster both",
            "in terms of cooking performance and runtime performance."
          ]
        }
      },
      "variants": [
        {
          "name": "eBVH33",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Default midphase mesh structure, as used up to PhysX 3.3 (deprecated)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBVH34",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "New midphase mesh structure, introduced in PhysX 3.4"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxTriangleMeshFlag",
      "cxx_qt": "PxTriangleMeshFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags for the mesh geometry properties."
          ]
        },
        "additional": {
          "b": [
            "Used in ::PxTriangleMeshFlags."
          ]
        }
      },
      "variants": [
        {
          "name": "e16_BIT_INDICES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The triangle mesh has 16bits vertex indices."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eADJACENCY_INFO",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The triangle mesh has adjacency information build."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePREFER_NO_SDF_PROJ",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Indicates that this mesh would preferably not be the mesh projected for mesh-mesh collision. This can indicate that the mesh is not well tessellated."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxTetrahedronMeshFlag",
      "cxx_qt": "PxTetrahedronMeshFlag::Enum",
      "comment": null,
      "variants": [
        {
          "name": "e16_BIT_INDICES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The tetrahedron mesh has 16bits vertex indices"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxActorFlag",
      "cxx_qt": "PxActorFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags which control the behavior of an actor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eVISUALIZATION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Enable debug renderer for this actor"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_GRAVITY",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Disables scene gravity for this actor"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSEND_SLEEP_NOTIFIES",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Enables the sending of PxSimulationEventCallback::onWake() and PxSimulationEventCallback::onSleep() notify events"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_SIMULATION",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Disables simulation for the actor."
              ]
            },
            "additional": {
              "b": [
                "This is only supported by PxRigidStatic and PxRigidDynamic actors and can be used to reduce the memory footprint when rigid actors are",
                "used for scene queries only.",
                "",
                "Setting this flag will remove all constraints attached to the actor from the scene.",
                "",
                "If this flag is set, the following calls are forbidden:",
                "",
                "PxRigidBody: setLinearVelocity(), setAngularVelocity(), addForce(), addTorque(), clearForce(), clearTorque(), setForceAndTorque()",
                "",
                "PxRigidDynamic: setKinematicTarget(), setWakeCounter(), wakeUp(), putToSleep()",
                "",
                "Sleeping:",
                "Raising this flag will set all velocities and the wake counter to 0, clear all forces, clear the kinematic target, put the actor",
                "to sleep and wake up all touching actors from the previous frame."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxActorType",
      "cxx_qt": "PxActorType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies each type of actor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eRIGID_STATIC",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "A static rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRIGID_DYNAMIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "A dynamic rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eARTICULATION_LINK",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "An articulation link"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxAggregateType",
      "cxx_qt": "PxAggregateType::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eGENERIC",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Aggregate will contain various actors of unspecified types"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSTATIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Aggregate will only contain static actors"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eKINEMATIC",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Aggregate will only contain kinematic actors"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "Px1DConstraintFlag",
      "cxx_qt": "Px1DConstraintFlag::Type",
      "comment": {
        "summary": {
          "b": [
            "Constraint row flags"
          ]
        },
        "additional": {
          "b": [
            "These flags configure the post-processing of constraint rows and the behavior of the solver while solving constraints"
          ]
        }
      },
      "variants": [
        {
          "name": "eSPRING",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "whether the constraint is a spring. Mutually exclusive with eRESTITUTION. If set, eKEEPBIAS is ignored."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION_SPRING",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "whether the constraint is a force or acceleration spring. Only valid if eSPRING is set."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRESTITUTION",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "whether the restitution model should be applied to generate the target velocity. Mutually exclusive with eSPRING. If restitution causes a bounces, eKEEPBIAS is ignored"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eKEEPBIAS",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "whether to keep the error term when solving for velocity. Ignored if restitution generates bounce, or eSPRING is set."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eOUTPUT_FORCE",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "whether to accumulate the force value from this constraint in the force total that is reported for the constraint and tested for breakage"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHAS_DRIVE_LIMIT",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "whether the constraint has a drive force limit (which will be scaled by dt unless PxConstraintFlag::eLIMITS_ARE_FORCES is set)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eANGULAR_CONSTRAINT",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "whether this is an angular or linear constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDRIVE_ROW",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "whether the constraint's geometric error should drive the target velocity"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConstraintSolveHint",
      "cxx_qt": "PxConstraintSolveHint::Enum",
      "comment": {
        "summary": {
          "b": [
            "Constraint type hints which the solver uses to optimize constraint handling"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "no special properties"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION1",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "a group of acceleration drive constraints with the same stiffness and drive parameters"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSLERP_SPRING",
          "value": 258,
          "comment": {
            "summary": {
              "b": [
                "temporary special value to identify SLERP drive rows"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION2",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "a group of acceleration drive constraints with the same stiffness and drive parameters"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION3",
          "value": 768,
          "comment": {
            "summary": {
              "b": [
                "a group of acceleration drive constraints with the same stiffness and drive parameters"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROTATIONAL_EQUALITY",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "rotational equality constraints with no force limit and no velocity target"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROTATIONAL_INEQUALITY",
          "value": 1025,
          "comment": {
            "summary": {
              "b": [
                "rotational inequality constraints with (0, PX_MAX_FLT) force limits"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eEQUALITY",
          "value": 2048,
          "comment": {
            "summary": {
              "b": [
                "equality constraints with no force limit and no velocity target"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINEQUALITY",
          "value": 2049,
          "comment": {
            "summary": {
              "b": [
                "inequality constraints with (0, PX_MAX_FLT) force limits"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConstraintVisualizationFlag",
      "cxx_qt": "PxConstraintVisualizationFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags for determining which components of the constraint should be visualized."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLOCAL_FRAMES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "visualize constraint frames"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLIMITS",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "visualize constraint limits"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPvdUpdateType",
      "cxx_qt": "PxPvdUpdateType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags for determining how PVD should serialize a constraint update"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "CREATE_INSTANCE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "triggers createPvdInstance call, creates an instance of a constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "RELEASE_INSTANCE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "triggers releasePvdInstance call, releases an instance of a constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "UPDATE_ALL_PROPERTIES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "triggers updatePvdProperties call, updates all properties of a constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "UPDATE_SIM_PROPERTIES",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "triggers simUpdate call, updates all simulation properties of a constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "ConstraintType",
      "cxx_qt": "PxSolverConstraintDesc::ConstraintType",
      "comment": {
        "summary": {
          "b": [
            "Constraint descriptor used inside the solver"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eCONTACT_CONSTRAINT",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Defines this pair is a contact constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_CONSTRAINT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Defines this pair is a joint constraint"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "BodyState",
      "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
      "comment": {
        "summary": {
          "b": [
            "Data structure used for preparing constraints before solving them"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDYNAMIC_BODY",
          "value": 1,
          "comment": null
        },
        {
          "name": "eSTATIC_BODY",
          "value": 2,
          "comment": null
        },
        {
          "name": "eKINEMATIC_BODY",
          "value": 4,
          "comment": null
        },
        {
          "name": "eARTICULATION",
          "value": 8,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationAxis",
      "cxx_qt": "PxArticulationAxis::Enum",
      "comment": {
        "summary": {
          "b": [
            "@",
            "{"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eTWIST",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Rotational about eX"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSWING1",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Rotational about eY"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSWING2",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Rotational about eZ"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eX",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Linear in eX"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eY",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Linear in eY"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eZ",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "Linear in eZ"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOUNT",
          "value": 6,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationMotion",
      "cxx_qt": "PxArticulationMotion::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eLOCKED",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Locked axis, i.e. degree of freedom (DOF)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLIMITED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Limited DOF - set limits of joint DOF together with this flag, see PxArticulationJointReducedCoordinate::setLimitParams"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFREE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Free DOF"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationJointType",
      "cxx_qt": "PxArticulationJointType::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eFIX",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "All joint axes, i.e. degrees of freedom (DOFs) locked"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePRISMATIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Single linear DOF, e.g. cart on a rail"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREVOLUTE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Single rotational DOF, e.g. an elbow joint or a rotational motor, position wrapped at 2pi radians"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREVOLUTE_UNWRAPPED",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Single rotational DOF, e.g. an elbow joint or a rotational motor, position not wrapped"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSPHERICAL",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Ball and socket joint with two or three DOFs"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUNDEFINED",
          "value": 5,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationFlag",
      "cxx_qt": "PxArticulationFlag::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eFIX_BASE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Set articulation base to be fixed."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDRIVE_LIMITS_ARE_FORCES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Limits for drive effort are forces and torques rather than impulses, see PxArticulationDrive::maxForce."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_SELF_COLLISION",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Disable collisions between the articulation's links (note that parent/child collisions are disabled internally in either case)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOMPUTE_JOINT_FORCES",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Enable in order to be able to query joint solver (i.e. constraint) forces using PxArticulationCache::jointSolverForces."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationDriveType",
      "cxx_qt": "PxArticulationDriveType::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eFORCE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "The output of the implicit spring drive controller is a force/torque."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The output of the implicit spring drive controller is a joint acceleration (use this to get (spatial)-inertia-invariant behavior of the drive)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTARGET",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Sets the drive gains internally to track a target position almost kinematically (i.e. with very high drive gains)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVELOCITY",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Sets the drive gains internally to track a target velocity almost kinematically (i.e. with very high drive gains)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNONE",
          "value": 4,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationGpuDataType",
      "cxx_qt": "PxArticulationGpuDataType::Enum",
      "comment": {
        "summary": {
          "b": [
            "A description of the types of articulation data that may be directly written to and read from the GPU using the functions",
            "PxScene::copyArticulationData() and PxScene::applyArticulationData(). Types that are read-only may only be used in conjunction with",
            "PxScene::copyArticulationData(). Types that are write-only may only be used in conjunction with PxScene::applyArticulationData().",
            "A subset of data types may be used in conjunction with both PxScene::applyArticulationData() and PxScene::applyArticulationData()."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eJOINT_POSITION",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "The joint positions, read and write, see PxScene::copyArticulationData(), PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_VELOCITY",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The joint velocities, read and write,  see PxScene::copyArticulationData(), PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_ACCELERATION",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The joint accelerations, read only, see PxScene::copyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_FORCE",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "The applied joint forces, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_SOLVER_FORCE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The computed joint constraint solver forces, read only, see PxScene::copyArticulationData()()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_TARGET_VELOCITY",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "The velocity targets for the joint drives, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_TARGET_POSITION",
          "value": 6,
          "comment": {
            "summary": {
              "b": [
                "The position targets for the joint drives, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSENSOR_FORCE",
          "value": 7,
          "comment": {
            "summary": {
              "b": [
                "The spatial sensor forces, read only, see PxScene::copyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROOT_TRANSFORM",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "The root link transform, read and write, see PxScene::copyArticulationData(), PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROOT_VELOCITY",
          "value": 9,
          "comment": {
            "summary": {
              "b": [
                "The root link velocity, read and write, see PxScene::copyArticulationData(), PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_TRANSFORM",
          "value": 10,
          "comment": {
            "summary": {
              "b": [
                "The link transforms including root link, read only, see PxScene::copyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_VELOCITY",
          "value": 11,
          "comment": {
            "summary": {
              "b": [
                "The link velocities including root link, read only, see PxScene::copyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_FORCE",
          "value": 12,
          "comment": {
            "summary": {
              "b": [
                "The forces to apply to links, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_TORQUE",
          "value": 13,
          "comment": {
            "summary": {
              "b": [
                "The torques to apply to links, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFIXED_TENDON",
          "value": 14,
          "comment": {
            "summary": {
              "b": [
                "Fixed tendon data, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFIXED_TENDON_JOINT",
          "value": 15,
          "comment": {
            "summary": {
              "b": [
                "Fixed tendon joint data, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSPATIAL_TENDON",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Spatial tendon data, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSPATIAL_TENDON_ATTACHMENT",
          "value": 17,
          "comment": {
            "summary": {
              "b": [
                "Spatial tendon attachment data, write only, see PxScene::applyArticulationData()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationCacheFlag",
      "cxx_qt": "PxArticulationCacheFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "These flags determine what data is read or written to the internal articulation data via cache."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eVELOCITY",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The joint velocities, see PxArticulationCache::jointVelocity."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The joint accelerations, see PxArticulationCache::jointAcceleration."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePOSITION",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The joint positions, see PxArticulationCache::jointPosition."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "The joint forces, see PxArticulationCache::jointForce."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_VELOCITY",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "The link velocities, see PxArticulationCache::linkVelocity."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLINK_ACCELERATION",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "The link accelerations, see PxArticulationCache::linkAcceleration."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROOT_TRANSFORM",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Root link transform, see PxArticulationCache::rootLinkData."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eROOT_VELOCITIES",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Root link velocities (read/write) and accelerations (read), see PxArticulationCache::rootLinkData."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSENSOR_FORCES",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "The spatial sensor forces, see PxArticulationCache::sensorForces."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_SOLVER_FORCES",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "Solver constraint joint forces, see PxArticulationCache::jointSolverForces."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALL",
          "value": 247,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationSensorFlag",
      "cxx_qt": "PxArticulationSensorFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags to configure the forces reported by articulation link sensors."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eFORWARD_DYNAMICS_FORCES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Raise to receive forces from forward dynamics."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONSTRAINT_SOLVER_FORCES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Raise to receive forces from constraint solver."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eWORLD_FRAME",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Raise to receive forces in the world rotation frame, otherwise they will be reported in the sensor's local frame."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxArticulationKinematicFlag",
      "cxx_qt": "PxArticulationKinematicFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flag that configures articulation-state updates by PxArticulationReducedCoordinate::updateKinematic."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "ePOSITION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Raise after any changes to the articulation root or joint positions using non-cache API calls. Updates links' positions and velocities."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVELOCITY",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Raise after velocity-only changes to the articulation root or joints using non-cache API calls. Updates links' velocities."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxShapeFlag",
      "cxx_qt": "PxShapeFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags which affect the behavior of PxShapes."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSIMULATION_SHAPE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The shape will partake in collision in the physical simulation."
              ]
            },
            "additional": {
              "b": [
                "It is illegal to raise the eSIMULATION_SHAPE and eTRIGGER_SHAPE flags.",
                "In the event that one of these flags is already raised the sdk will reject any",
                "attempt to raise the other.  To raise the eSIMULATION_SHAPE first ensure that",
                "eTRIGGER_SHAPE is already lowered.",
                "",
                "This flag has no effect if simulation is disabled for the corresponding actor (see #PxActorFlag::eDISABLE_SIMULATION)."
              ]
            }
          }
        },
        {
          "name": "eSCENE_QUERY_SHAPE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTRIGGER_SHAPE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The shape is a trigger which can send reports whenever other shapes enter/leave its volume."
              ]
            },
            "additional": {
              "b": [
                "Triangle meshes and heightfields can not be triggers. Shape creation will fail in these cases.",
                "",
                "Shapes marked as triggers do not collide with other objects. If an object should act both",
                "as a trigger shape and a collision shape then create a rigid body with two shapes, one being a",
                "trigger shape and the other a collision shape. It is illegal to raise the eTRIGGER_SHAPE and",
                "eSIMULATION_SHAPE flags on a single PxShape instance.  In the event that one of these flags is already",
                "raised the sdk will reject any attempt to raise the other.  To raise the eTRIGGER_SHAPE flag first",
                "ensure that eSIMULATION_SHAPE flag is already lowered.",
                "",
                "Trigger shapes will no longer send notification events for interactions with other trigger shapes.",
                "",
                "Shapes marked as triggers are allowed to participate in scene queries, provided the eSCENE_QUERY_SHAPE flag is set.",
                "",
                "This flag has no effect if simulation is disabled for the corresponding actor (see #PxActorFlag::eDISABLE_SIMULATION)."
              ]
            }
          }
        },
        {
          "name": "eVISUALIZATION",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Enable debug renderer for this shape"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxForceMode",
      "cxx_qt": "PxForceMode::Enum",
      "comment": {
        "summary": {
          "b": [
            "Parameter to addForce() and addTorque() calls, determines the exact operation that is carried out."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eFORCE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "parameter has unit of mass * length / time^2, i.e., a force"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eIMPULSE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "parameter has unit of mass * length / time, i.e., force * time"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVELOCITY_CHANGE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "parameter has unit of length / time, i.e., the effect is mass independent: a velocity change."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACCELERATION",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "parameter has unit of length/ time^2, i.e., an acceleration. It gets treated just like a force except the mass is not divided out before integration."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxRigidBodyFlag",
      "cxx_qt": "PxRigidBodyFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags describing the behavior of a rigid body."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eKINEMATIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Enable kinematic mode for the body."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Use the kinematic target transform for scene queries."
              ]
            },
            "additional": {
              "b": [
                "If this flag is raised, then scene queries will treat the kinematic target transform as the current pose",
                "of the body (instead of using the actual pose). Without this flag, the kinematic target will only take",
                "effect with respect to scene queries after a simulation step."
              ]
            }
          }
        },
        {
          "name": "eENABLE_CCD",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Enable CCD for the body."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eENABLE_CCD_FRICTION",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Enabled CCD in swept integration for the actor."
              ]
            },
            "additional": {
              "b": [
                "If this flag is raised and CCD is enabled, CCD interactions will simulate friction. By default, friction is disabled in CCD interactions because",
                "CCD friction has been observed to introduce some simulation artifacts. CCD friction was enabled in previous versions of the SDK. Raising this flag will result in behavior",
                "that is a closer match for previous versions of the SDK.",
                "",
                "This flag requires PxRigidBodyFlag::eENABLE_CCD to be raised to have any effect."
              ]
            }
          }
        },
        {
          "name": "eENABLE_SPECULATIVE_CCD",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Register a rigid body to dynamically adjust contact offset based on velocity. This can be used to achieve a CCD effect."
              ]
            },
            "additional": {
              "b": [
                "If both eENABLE_CCD and eENABLE_SPECULATIVE_CCD are set on the same body, then angular motions are handled by speculative",
                "contacts (eENABLE_SPECULATIVE_CCD) while linear motions are handled by sweeps (eENABLE_CCD)."
              ]
            }
          }
        },
        {
          "name": "eENABLE_POSE_INTEGRATION_PREVIEW",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Register a rigid body for reporting pose changes by the simulation at an early stage."
              ]
            },
            "additional": {
              "b": [
                "Sometimes it might be advantageous to get access to the new pose of a rigid body as early as possible and",
                "not wait until the call to fetchResults() returns. Setting this flag will schedule the rigid body to get reported",
                "in #PxSimulationEventCallback::onAdvance(). Please refer to the documentation of that callback to understand",
                "the behavior and limitations of this functionality."
              ]
            }
          }
        },
        {
          "name": "eENABLE_CCD_MAX_CONTACT_IMPULSE",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Permit CCD to limit maxContactImpulse. This is useful for use-cases like a destruction system but can cause visual artefacts so is not enabled by default."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRETAIN_ACCELERATIONS",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Carries over forces/accelerations between frames, rather than clearing them"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_KINE_KINE_NOTIFICATIONS",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Forces kinematic-kinematic pairs notifications for this actor."
              ]
            },
            "additional": {
              "b": [
                "This flag overrides the global scene-level PxPairFilteringMode setting for kinematic actors.",
                "This is equivalent to having PxPairFilteringMode::eKEEP for pairs involving this actor.",
                "",
                "A particular use case is when you have a large amount of kinematic actors, but you are only",
                "interested in interactions between a few of them. In this case it is best to use",
                "PxSceneDesc.kineKineFilteringMode = PxPairFilteringMode::eKILL, and then raise the",
                "eFORCE_KINE_KINE_NOTIFICATIONS flag on the small set of kinematic actors that need",
                "notifications.",
                "",
                "This has no effect if PxRigidBodyFlag::eKINEMATIC is not set.",
                "",
                "Changing this flag at runtime will not have an effect until you remove and re-add the actor to the scene."
              ]
            }
          }
        },
        {
          "name": "eFORCE_STATIC_KINE_NOTIFICATIONS",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "Forces static-kinematic pairs notifications for this actor."
              ]
            },
            "additional": {
              "b": [
                "Similar to eFORCE_KINE_KINE_NOTIFICATIONS, but for static-kinematic interactions.",
                "",
                "This has no effect if PxRigidBodyFlag::eKINEMATIC is not set.",
                "",
                "Changing this flag at runtime will not have an effect until you remove and re-add the actor to the scene."
              ]
            }
          }
        },
        {
          "name": "eENABLE_GYROSCOPIC_FORCES",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "Enables computation of gyroscopic forces on the rigid body."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConstraintFlag",
      "cxx_qt": "PxConstraintFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "constraint flags"
          ]
        },
        "additional": {
          "b": [
            "eBROKEN is a read only flag"
          ]
        }
      },
      "variants": [
        {
          "name": "eBROKEN",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "whether the constraint is broken"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePROJECT_TO_ACTOR0",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "whether actor1 should get projected to actor0 for this constraint (note: projection of a static/kinematic actor to a dynamic actor will be ignored)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePROJECT_TO_ACTOR1",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "whether actor0 should get projected to actor1 for this constraint (note: projection of a static/kinematic actor to a dynamic actor will be ignored)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePROJECTION",
          "value": 6,
          "comment": {
            "summary": {
              "b": [
                "whether the actors should get projected for this constraint (the direction will be chosen by PhysX)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_ENABLED",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "whether contacts should be generated between the objects this constraint constrains"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVISUALIZATION",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "whether this constraint should be visualized, if constraint visualization is turned on"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDRIVE_LIMITS_ARE_FORCES",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "limits for drive strength are forces rather than impulses"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eIMPROVED_SLERP",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "perform preprocessing for improved accuracy on D6 Slerp Drive (this flag will be removed in a future release when preprocessing is no longer required)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_PREPROCESSING",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "suppress constraint preprocessing, intended for use with rowResponseThreshold. May result in worse solver accuracy for ill-conditioned constraints."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eENABLE_EXTENDED_LIMITS",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "enables extended limit ranges for angular limits (e.g., limit values > PxPi or",
                "<",
                "-PxPi)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eGPU_COMPATIBLE",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "the constraint type is supported by gpu dynamics"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALWAYS_UPDATE",
          "value": 2048,
          "comment": {
            "summary": {
              "b": [
                "updates the constraint each frame"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_CONSTRAINT",
          "value": 4096,
          "comment": {
            "summary": {
              "b": [
                "disables the constraint. SolverPrep functions won't be called for this constraint."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxContactPatchFlags",
      "cxx_qt": "PxContactPatch::PxContactPatchFlags",
      "comment": {
        "summary": {
          "b": [
            "Header for a contact patch where all points share same material and normal"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eHAS_FACE_INDICES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream has face indices."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMODIFIABLE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream is modifiable."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_NO_RESPONSE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream is notify-only (no contact response)."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHAS_MODIFIED_MASS_RATIOS",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream has modified mass ratios"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHAS_TARGET_VELOCITY",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream has target velocities set"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHAS_MAX_IMPULSE",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream has max impulses set"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREGENERATE_PATCHES",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Indicates this contact stream needs patches re-generated. This is required if the application modified either the contact normal or the material properties"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOMPRESSED_MODIFIED_CONTACT",
          "value": 128,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "StreamFormat",
      "cxx_qt": "PxContactStreamIterator::StreamFormat",
      "comment": {
        "summary": {
          "b": [
            "A class to iterate over a compressed contact stream. This supports read-only access to the various contact formats."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSIMPLE_STREAM",
          "value": 0,
          "comment": null
        },
        {
          "name": "eMODIFIABLE_STREAM",
          "value": 1,
          "comment": null
        },
        {
          "name": "eCOMPRESSED_MODIFIABLE_STREAM",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxDeletionEventFlag",
      "cxx_qt": "PxDeletionEventFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags specifying deletion event types."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eUSER_RELEASE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The user has called release on an object."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMEMORY_RELEASE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The destructor of an object has been called and the memory has been released."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPairFlag",
      "cxx_qt": "PxPairFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags describing the actions to take for a collision pair."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSOLVE_CONTACT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Process the contacts of this collision pair in the dynamics solver."
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies."
              ]
            }
          }
        },
        {
          "name": "eMODIFY_CONTACTS",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Call contact modification callback for this collision pair"
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies."
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_TOUCH_FOUND",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback or trigger callback when this collision pair starts to be in contact."
              ]
            },
            "additional": {
              "b": [
                "If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE)",
                "then the trigger callback will get called as soon as the other object enters the trigger volume.",
                "If none of the two collision objects is a trigger shape then the contact report callback will get",
                "called when the actors of this collision pair start to be in contact.",
                "",
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_TOUCH_PERSISTS",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback while this collision pair is in contact"
              ]
            },
            "additional": {
              "b": [
                "If none of the two collision objects is a trigger shape then the contact report callback will get",
                "called while the actors of this collision pair are in contact.",
                "",
                "Triggers do not support this event. Persistent trigger contacts need to be tracked separately by observing eNOTIFY_TOUCH_FOUND/eNOTIFY_TOUCH_LOST events.",
                "",
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "No report will get sent if the objects in contact are sleeping.",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised",
                "",
                "If this flag gets enabled while a pair is in touch already, there will be no eNOTIFY_TOUCH_PERSISTS events until the pair loses and regains touch."
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_TOUCH_LOST",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback or trigger callback when this collision pair stops to be in contact"
              ]
            },
            "additional": {
              "b": [
                "If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE)",
                "then the trigger callback will get called as soon as the other object leaves the trigger volume.",
                "If none of the two collision objects is a trigger shape then the contact report callback will get",
                "called when the actors of this collision pair stop to be in contact.",
                "",
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "This event will also get triggered if one of the colliding objects gets deleted.",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_TOUCH_CCD",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback when this collision pair is in contact during CCD passes."
              ]
            },
            "additional": {
              "b": [
                "If CCD with multiple passes is enabled, then a fast moving object might bounce on and off the same",
                "object multiple times. Hence, the same pair might be in contact multiple times during a simulation step.",
                "This flag will make sure that all the detected collision during CCD will get reported. For performance",
                "reasons, the system can not always tell whether the contact pair lost touch in one of the previous CCD",
                "passes and thus can also not always tell whether the contact is new or has persisted. eNOTIFY_TOUCH_CCD",
                "just reports when the two collision objects were detected as being in contact during a CCD pass.",
                "",
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "Trigger shapes are not supported.",
                "",
                "Only takes effect if eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_THRESHOLD_FORCE_FOUND",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback when the contact force between the actors of this collision pair exceeds one of the actor-defined force thresholds."
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_THRESHOLD_FORCE_PERSISTS",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback when the contact force between the actors of this collision pair continues to exceed one of the actor-defined force thresholds."
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the",
                "previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND has been set in the previous frame).",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_THRESHOLD_FORCE_LOST",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Call contact report callback when the contact force between the actors of this collision pair falls below one of the actor-defined force thresholds (includes the case where this collision pair stops being in contact)."
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies.",
                "",
                "If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the",
                "previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND or #eNOTIFY_THRESHOLD_FORCE_PERSISTS has been set in the previous frame).",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eNOTIFY_CONTACT_POINTS",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "Provide contact points in contact reports for this collision pair."
              ]
            },
            "additional": {
              "b": [
                "Only takes effect if the colliding actors are rigid bodies and if used in combination with the flags eNOTIFY_TOUCH_... or eNOTIFY_THRESHOLD_FORCE_...",
                "",
                "Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised"
              ]
            }
          }
        },
        {
          "name": "eDETECT_DISCRETE_CONTACT",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "This flag is used to indicate whether this pair generates discrete collision detection contacts."
              ]
            },
            "additional": {
              "b": [
                "Contacts are only responded to if eSOLVE_CONTACT is enabled."
              ]
            }
          }
        },
        {
          "name": "eDETECT_CCD_CONTACT",
          "value": 2048,
          "comment": {
            "summary": {
              "b": [
                "This flag is used to indicate whether this pair generates CCD contacts."
              ]
            },
            "additional": {
              "b": [
                "The contacts will only be responded to if eSOLVE_CONTACT is enabled on this pair.",
                "",
                "The scene must have PxSceneFlag::eENABLE_CCD enabled to use this feature.",
                "",
                "Non-static bodies of the pair should have PxRigidBodyFlag::eENABLE_CCD specified for this feature to work correctly.",
                "",
                "This flag is not supported with trigger shapes. However, CCD trigger events can be emulated using non-trigger shapes",
                "and requesting eNOTIFY_TOUCH_FOUND and eNOTIFY_TOUCH_LOST and not raising eSOLVE_CONTACT on the pair."
              ]
            }
          }
        },
        {
          "name": "ePRE_SOLVER_VELOCITY",
          "value": 4096,
          "comment": {
            "summary": {
              "b": [
                "Provide pre solver velocities in contact reports for this collision pair."
              ]
            },
            "additional": {
              "b": [
                "If the collision pair has contact reports enabled, the velocities of the rigid bodies before contacts have been solved",
                "will be provided in the contact report callback unless the pair lost touch in which case no data will be provided.",
                "",
                "Usually it is not necessary to request these velocities as they will be available by querying the velocity from the provided",
                "PxRigidActor object directly. However, it might be the case that the velocity of a rigid body gets set while the simulation is running",
                "in which case the PxRigidActor would return this new velocity in the contact report callback and not the velocity the simulation used."
              ]
            }
          }
        },
        {
          "name": "ePOST_SOLVER_VELOCITY",
          "value": 8192,
          "comment": {
            "summary": {
              "b": [
                "Provide post solver velocities in contact reports for this collision pair."
              ]
            },
            "additional": {
              "b": [
                "If the collision pair has contact reports enabled, the velocities of the rigid bodies after contacts have been solved",
                "will be provided in the contact report callback unless the pair lost touch in which case no data will be provided."
              ]
            }
          }
        },
        {
          "name": "eCONTACT_EVENT_POSE",
          "value": 16384,
          "comment": {
            "summary": {
              "b": [
                "Provide rigid body poses in contact reports for this collision pair."
              ]
            },
            "additional": {
              "b": [
                "If the collision pair has contact reports enabled, the rigid body poses at the contact event will be provided",
                "in the contact report callback unless the pair lost touch in which case no data will be provided.",
                "",
                "Usually it is not necessary to request these poses as they will be available by querying the pose from the provided",
                "PxRigidActor object directly. However, it might be the case that the pose of a rigid body gets set while the simulation is running",
                "in which case the PxRigidActor would return this new pose in the contact report callback and not the pose the simulation used.",
                "Another use case is related to CCD with multiple passes enabled, A fast moving object might bounce on and off the same",
                "object multiple times. This flag can be used to request the rigid body poses at the time of impact for each such collision event."
              ]
            }
          }
        },
        {
          "name": "eNEXT_FREE",
          "value": 32768,
          "comment": {
            "summary": {
              "b": [
                "For internal use only."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_DEFAULT",
          "value": 1025,
          "comment": {
            "summary": {
              "b": [
                "Provided default flag to do simple contact processing for this collision pair."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTRIGGER_DEFAULT",
          "value": 1044,
          "comment": {
            "summary": {
              "b": [
                "Provided default flag to get commonly used trigger behavior for this collision pair."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxFilterFlag",
      "cxx_qt": "PxFilterFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags describing the filter actions to take for a collision pair."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eKILL",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Ignore the collision pair as long as the bounding volumes of the pair objects overlap."
              ]
            },
            "additional": {
              "b": [
                "Killed pairs will be ignored by the simulation and won't run through the filter again until one",
                "of the following occurs:",
                "",
                "The bounding volumes of the two objects overlap again (after being separated)",
                "",
                "The user enforces a re-filtering (see #PxScene::resetFiltering())"
              ]
            }
          }
        },
        {
          "name": "eSUPPRESS",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Ignore the collision pair as long as the bounding volumes of the pair objects overlap or until filtering relevant data changes for one of the collision objects."
              ]
            },
            "additional": {
              "b": [
                "Suppressed pairs will be ignored by the simulation and won't make another filter request until one",
                "of the following occurs:",
                "",
                "Same conditions as for killed pairs (see #eKILL)",
                "",
                "The filter data or the filter object attributes change for one of the collision objects"
              ]
            }
          }
        },
        {
          "name": "eCALLBACK",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Invoke the filter callback (#PxSimulationFilterCallback::pairFound()) for this collision pair."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNOTIFY",
          "value": 12,
          "comment": {
            "summary": {
              "b": [
                "Track this collision pair with the filter callback mechanism."
              ]
            },
            "additional": {
              "b": [
                "When the bounding volumes of the collision pair lose contact, the filter callback #PxSimulationFilterCallback::pairLost()",
                "will be invoked. Furthermore, the filter status of the collision pair can be adjusted through #PxSimulationFilterCallback::statusChange()",
                "once per frame (until a pairLost() notification occurs)."
              ]
            }
          }
        },
        {
          "name": "eDEFAULT",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Provided default to get standard behavior:"
              ]
            },
            "additional": {
              "b": [
                "The application configure the pair's collision properties once when bounding volume overlap is found and",
                "doesn't get asked again about that pair until overlap status or filter properties changes, or re-filtering is requested.",
                "",
                "No notification is provided when bounding volume overlap is lost",
                "",
                "The pair will not be killed or suppressed, so collision detection will be processed"
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxFilterObjectType",
      "cxx_qt": "PxFilterObjectType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies each type of filter object."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eRIGID_STATIC",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "A static rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRIGID_DYNAMIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "A dynamic rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eARTICULATION",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "An articulation"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePARTICLESYSTEM",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "A particle system"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSOFTBODY",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "A FEM-based soft body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFEMCLOTH",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "A FEM-based cloth"
              ]
            },
            "additional": {
              "b": [
                "In development"
              ]
            }
          }
        },
        {
          "name": "eHAIRSYSTEM",
          "value": 6,
          "comment": {
            "summary": {
              "b": [
                "A hair system"
              ]
            },
            "additional": {
              "b": [
                "In development"
              ]
            }
          }
        },
        {
          "name": "eMAX_TYPE_COUNT",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "internal use only!"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUNDEFINED",
          "value": 15,
          "comment": {
            "summary": {
              "b": [
                "internal use only!"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxFilterObjectFlag",
      "cxx_qt": "PxFilterObjectFlag::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eKINEMATIC",
          "value": 16,
          "comment": null
        },
        {
          "name": "eTRIGGER",
          "value": 32,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPairFilteringMode",
      "cxx_qt": "PxPairFilteringMode::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eKEEP",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Output pair from BP, potentially send to user callbacks, create regular interaction object."
              ]
            },
            "additional": {
              "b": [
                "Enable contact pair filtering between kinematic/static or kinematic/kinematic rigid bodies.",
                "",
                "By default contacts between these are suppressed (see #PxFilterFlag::eSUPPRESS) and don't get reported to the filter mechanism.",
                "Use this mode if these pairs should go through the filtering pipeline nonetheless.",
                "",
                "This mode is not mutable, and must be set in PxSceneDesc at scene creation."
              ]
            }
          }
        },
        {
          "name": "eSUPPRESS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Output pair from BP, create interaction marker. Can be later switched to regular interaction."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eKILL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Don't output pair from BP. Cannot be later switched to regular interaction, needs \"resetFiltering\" call."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxDataAccessFlag",
      "cxx_qt": "PxDataAccessFlag::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eREADABLE",
          "value": 1,
          "comment": null
        },
        {
          "name": "eWRITABLE",
          "value": 2,
          "comment": null
        },
        {
          "name": "eDEVICE",
          "value": 4,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMaterialFlag",
      "cxx_qt": "PxMaterialFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags which control the behavior of a material."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDISABLE_FRICTION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "If this flag is set, friction computations are always skipped between shapes with this material and any other shape."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_STRONG_FRICTION",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Whether to use strong friction.",
                "The difference between \"normal\" and \"strong\" friction is that the strong friction feature",
                "remembers the \"friction error\" between simulation steps. The friction is a force trying to",
                "hold objects in place (or slow them down) and this is handled in the solver. But since the",
                "solver is only an approximation, the result of the friction calculation can include a small",
                "\"error\" - e.g. a box resting on a slope should not move at all if the static friction is in",
                "action, but could slowly glide down the slope because of a small friction error in each",
                "simulation step. The strong friction counter-acts this by remembering the small error and",
                "taking it to account during the next simulation step."
              ]
            },
            "additional": {
              "b": [
                "However, in some cases the strong friction could cause problems, and this is why it is",
                "possible to disable the strong friction feature by setting this flag. One example is",
                "raycast vehicles that are sliding fast across the surface, but still need a precise",
                "steering behavior. It may be a good idea to reenable the strong friction when objects",
                "are coming to a rest, to prevent them from slowly creeping down inclines.",
                "",
                "Note: This flag only has an effect if the PxMaterialFlag::eDISABLE_FRICTION bit is 0."
              ]
            }
          }
        },
        {
          "name": "eIMPROVED_PATCH_FRICTION",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Whether to use the patch friction model.",
                "This flag only has an effect if PxFrictionType::ePATCH friction model is used."
              ]
            },
            "additional": {
              "b": [
                "When using the patch friction model, up to 2 friction anchors are generated per patch. As the number of friction anchors",
                "can be smaller than the number of contacts, the normal force is accumulated over all contacts and used to compute friction",
                "for all anchors. Where there are more than 2 anchors, this can produce frictional behavior that is too strong (approximately 2x as strong",
                "as analytical models suggest).",
                "",
                "This flag causes the normal force to be distributed between the friction anchors such that the total amount of friction applied does not",
                "exceed the analytical results."
              ]
            }
          }
        },
        {
          "name": "eCOMPLIANT_CONTACT",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "This flag has the effect of enabling an implicit spring model for the normal force computation."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxCombineMode",
      "cxx_qt": "PxCombineMode::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enumeration that determines the way in which two material properties will be combined to yield a friction or restitution coefficient for a collision."
          ]
        },
        "additional": {
          "b": [
            "When two actors come in contact with each other, they each have materials with various coefficients, but we only need a single set of coefficients for the pair.",
            "",
            "Physics doesn't have any inherent combinations because the coefficients are determined empirically on a case by case",
            "basis. However, simulating this with a pairwise lookup table is often impractical.",
            "",
            "For this reason the following combine behaviors are available:",
            "",
            "eAVERAGE",
            "eMIN",
            "eMULTIPLY",
            "eMAX",
            "",
            "The effective combine mode for the pair is maximum(material0.combineMode, material1.combineMode)."
          ]
        }
      },
      "variants": [
        {
          "name": "eAVERAGE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Average: (a + b)/2"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMIN",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Minimum: minimum(a,b)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMULTIPLY",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Multiply: a*b"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMAX",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Maximum: maximum(a,b)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eN_VALUES",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "This is not a valid combine mode, it is a sentinel to denote the number of possible values. We assert that the variable's value is smaller than this."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePAD_32",
          "value": 2147483647,
          "comment": {
            "summary": {
              "b": [
                "This is not a valid combine mode, it is to assure that the size of the enum type is big enough."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxParticleBufferFlag",
      "cxx_qt": "PxParticleBufferFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies dirty particle buffers that need to be updated in the particle system."
          ]
        },
        "additional": {
          "b": [
            "This flag can be used mark the device user buffers that are dirty and need to be written to the particle system."
          ]
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "No data specified"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_POSITION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Specifies the position (first 3 floats) and inverse mass (last float) data (array of PxVec4 * number of particles)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_VELOCITY",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Specifies the velocity (first 3 floats) data (array of PxVec4 * number of particles)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_PHASE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Specifies the per-particle phase flag data (array of PxU32 * number of particles)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_RESTPOSITION",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Specifies the rest position (first 3 floats) data for cloth buffers"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_CLOTH",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Specifies the cloth buffer (see PxParticleClothBuffer)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_RIGID",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Specifies the rigid buffer (see PxParticleRigidBuffer)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_DIFFUSE_PARAM",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Specifies the diffuse particle parameter buffer (see PxDiffuseParticleParams)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eUPDATE_ATTACHMENTS",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Specifies the attachments."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALL",
          "value": 495,
          "comment": null
        }
      ]
    },
    {
      "repr": "UInt",
      "name": "PxParticlePhaseFlag",
      "cxx_qt": "PxParticlePhaseFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies per-particle behavior for a PxParticleSystem."
          ]
        },
        "additional": {
          "b": [
            "See #PxParticleSystem::createPhase()."
          ]
        }
      },
      "variants": [
        {
          "name": "eParticlePhaseGroupMask",
          "value": 1048575,
          "comment": {
            "summary": {
              "b": [
                "Bits [ 0, 19] represent the particle group for controlling collisions"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eParticlePhaseFlagsMask",
          "value": 4293918720,
          "comment": {
            "summary": {
              "b": [
                "Bits [20, 23] hold flags about how the particle behave"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eParticlePhaseSelfCollide",
          "value": 1048576,
          "comment": {
            "summary": {
              "b": [
                "If set this particle will interact with particles of the same group"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eParticlePhaseSelfCollideFilter",
          "value": 2097152,
          "comment": {
            "summary": {
              "b": [
                "If set this particle will ignore collisions with particles closer than the radius in the rest pose, this flag should not be specified unless valid rest positions have been specified using setRestParticles()"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eParticlePhaseFluid",
          "value": 4194304,
          "comment": {
            "summary": {
              "b": [
                "If set this particle will generate fluid density constraints for its overlapping neighbors"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBufferType",
      "cxx_qt": "PxBufferType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Specifies memory space for a PxBuffer instance."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eHOST",
          "value": 0,
          "comment": null
        },
        {
          "name": "eDEVICE",
          "value": 1,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxQueryFlag",
      "cxx_qt": "PxQueryFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Filtering flags for scene queries."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSTATIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Traverse static shapes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDYNAMIC",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Traverse dynamic shapes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePREFILTER",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Run the pre-intersection-test filter (see #PxQueryFilterCallback::preFilter())"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePOSTFILTER",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Run the post-intersection-test filter (see #PxQueryFilterCallback::postFilter())"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eANY_HIT",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Abort traversal as soon as any hit is found and return it via callback.block.",
                "Helps query performance. Both eTOUCH and eBLOCK hitTypes are considered hits with this flag."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNO_BLOCK",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "All hits are reported as touching. Overrides eBLOCK returned from user filters with eTOUCH.",
                "This is also an optimization hint that may improve query performance."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_HARDCODED_FILTER",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Same as eBATCH_QUERY_LEGACY_BEHAVIOUR, more explicit name making it clearer that this can also be used",
                "with regular/non-batched queries if needed."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRESERVED",
          "value": 32768,
          "comment": {
            "summary": {
              "b": [
                "Reserved for internal use"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxQueryHitType",
      "cxx_qt": "PxQueryHitType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Classification of scene query hits (intersections)."
          ]
        },
        "additional": {
          "b": [
            "- eNONE: Returning this hit type means that the hit should not be reported.",
            "- eBLOCK: For all raycast, sweep and overlap queries the nearest eBLOCK type hit will always be returned in PxHitCallback::block member.",
            "- eTOUCH: Whenever a raycast, sweep or overlap query was called with non-zero PxHitCallback::nbTouches and PxHitCallback::touches",
            "parameters, eTOUCH type hits that are closer or same distance (touchDistance",
            "<",
            "= blockDistance condition)",
            "as the globally nearest eBLOCK type hit, will be reported.",
            "- For example, to record all hits from a raycast query, always return eTOUCH.",
            "",
            "All hits in overlap() queries are treated as if the intersection distance were zero.",
            "This means the hits are unsorted and all eTOUCH hits are recorded by the callback even if an eBLOCK overlap hit was encountered.",
            "Even though all overlap() blocking hits have zero length, only one (arbitrary) eBLOCK overlap hit is recorded in PxHitCallback::block.",
            "All overlap() eTOUCH type hits are reported (zero touchDistance",
            "<",
            "= zero blockDistance condition).",
            "",
            "For raycast/sweep/overlap calls with zero touch buffer or PxHitCallback::nbTouches member,",
            "only the closest hit of type eBLOCK is returned. All eTOUCH hits are discarded."
          ]
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "the query should ignore this shape"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTOUCH",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "a hit on the shape touches the intersection geometry of the query but does not block it"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBLOCK",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "a hit on the shape blocks the query (does not block overlap queries)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxRigidDynamicLockFlag",
      "cxx_qt": "PxRigidDynamicLockFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags providing a mechanism to lock motion along/around a specific axis."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLOCK_LINEAR_X",
          "value": 1,
          "comment": null
        },
        {
          "name": "eLOCK_LINEAR_Y",
          "value": 2,
          "comment": null
        },
        {
          "name": "eLOCK_LINEAR_Z",
          "value": 4,
          "comment": null
        },
        {
          "name": "eLOCK_ANGULAR_X",
          "value": 8,
          "comment": null
        },
        {
          "name": "eLOCK_ANGULAR_Y",
          "value": 16,
          "comment": null
        },
        {
          "name": "eLOCK_ANGULAR_Z",
          "value": 32,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPruningStructureType",
      "cxx_qt": "PxPruningStructureType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Pruning structure used to accelerate scene queries."
          ]
        },
        "additional": {
          "b": [
            "eNONE uses a simple data structure that consumes less memory than the alternatives,",
            "but generally has slower query performance.",
            "",
            "eDYNAMIC_AABB_TREE usually provides the fastest queries. However there is a",
            "constant per-frame management cost associated with this structure. How much work should",
            "be done per frame can be tuned via the #PxSceneQueryDesc::dynamicTreeRebuildRateHint",
            "parameter.",
            "",
            "eSTATIC_AABB_TREE is typically used for static objects. It is the same as the",
            "dynamic AABB tree, without the per-frame overhead. This can be a good choice for static",
            "objects, if no static objects are added, moved or removed after the scene has been",
            "created. If there is no such guarantee (e.g. when streaming parts of the world in and out),",
            "then the dynamic version is a better choice even for static objects."
          ]
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Using a simple data structure"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDYNAMIC_AABB_TREE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Using a dynamic AABB tree"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSTATIC_AABB_TREE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Using a static AABB tree"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 3,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxDynamicTreeSecondaryPruner",
      "cxx_qt": "PxDynamicTreeSecondaryPruner::Enum",
      "comment": {
        "summary": {
          "b": [
            "Secondary pruning structure used for newly added objects in dynamic trees."
          ]
        },
        "additional": {
          "b": [
            "Dynamic trees (PxPruningStructureType::eDYNAMIC_AABB_TREE) are slowly rebuilt",
            "over several frames. A secondary pruning structure holds and manages objects",
            "added to the scene while this rebuild is in progress.",
            "",
            "eNONE ignores newly added objects. This means that for a number of frames (roughly",
            "defined by PxSceneQueryDesc::dynamicTreeRebuildRateHint) newly added objects will",
            "be ignored by scene queries. This can be acceptable when streaming large worlds, e.g.",
            "when the objects added at the boundaries of the game world don't immediately need to be",
            "visible from scene queries (it would be equivalent to streaming that data in a few frames",
            "later). The advantage of this approach is that there is no CPU cost associated with",
            "inserting the new objects in the scene query data structures, and no extra runtime cost",
            "when performing queries.",
            "",
            "eBUCKET uses a structure similar to PxPruningStructureType::eNONE. Insertion is fast but",
            "query cost can be high.",
            "",
            "eINCREMENTAL uses an incremental AABB-tree, with no direct PxPruningStructureType equivalent.",
            "Query time is fast but insertion cost can be high.",
            "",
            "eBVH uses a PxBVH structure. This usually offers the best overall performance."
          ]
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "no secondary pruner, new objects aren't visible to SQ for a few frames"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBUCKET",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "bucket-based secondary pruner, faster updates, slower query time"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eINCREMENTAL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "incremental-BVH secondary pruner, faster query time, slower updates"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBVH",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "PxBVH-based secondary pruner, good overall performance"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 4,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSceneQueryUpdateMode",
      "cxx_qt": "PxSceneQueryUpdateMode::Enum",
      "comment": {
        "summary": {
          "b": [
            "Scene query update mode"
          ]
        },
        "additional": {
          "b": [
            "This enum controls what work is done when the scene query system is updated. The updates traditionally happen when PxScene::fetchResults",
            "is called. This function then calls PxSceneQuerySystem::finalizeUpdates, where the update mode is used.",
            "",
            "fetchResults/finalizeUpdates will sync changed bounds during simulation and update the scene query bounds in pruners, this work is mandatory.",
            "",
            "eBUILD_ENABLED_COMMIT_ENABLED does allow to execute the new AABB tree build step during fetchResults/finalizeUpdates, additionally",
            "the pruner commit is called where any changes are applied. During commit PhysX refits the dynamic scene query tree and if a new tree",
            "was built and the build finished the tree is swapped with current AABB tree.",
            "",
            "eBUILD_ENABLED_COMMIT_DISABLED does allow to execute the new AABB tree build step during fetchResults/finalizeUpdates. Pruner commit",
            "is not called, this means that refit will then occur during the first scene query following fetchResults/finalizeUpdates, or may be forced",
            "by the method PxScene::flushQueryUpdates() / PxSceneQuerySystemBase::flushUpdates().",
            "",
            "eBUILD_DISABLED_COMMIT_DISABLED no further scene query work is executed. The scene queries update needs to be called manually, see",
            "PxScene::sceneQueriesUpdate (see that function's doc for the equivalent PxSceneQuerySystem sequence). It is recommended to call",
            "PxScene::sceneQueriesUpdate right after fetchResults/finalizeUpdates as the pruning structures are not updated."
          ]
        }
      },
      "variants": [
        {
          "name": "eBUILD_ENABLED_COMMIT_ENABLED",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Both scene query build and commit are executed."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBUILD_ENABLED_COMMIT_DISABLED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Scene query build only is executed."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBUILD_DISABLED_COMMIT_DISABLED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "No work is done, no update of scene queries"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "UInt",
      "name": "PxScenePrunerIndex",
      "cxx_qt": "PxScenePrunerIndex",
      "comment": {
        "summary": {
          "b": [
            "Built-in enum for default PxScene pruners"
          ]
        },
        "additional": {
          "b": [
            "This is passed as a pruner index to various functions in the following APIs."
          ]
        }
      },
      "variants": [
        {
          "name": "PX_SCENE_PRUNER_STATIC",
          "value": 0,
          "comment": null
        },
        {
          "name": "PX_SCENE_PRUNER_DYNAMIC",
          "value": 1,
          "comment": null
        },
        {
          "name": "PX_SCENE_COMPOUND_PRUNER",
          "value": 4294967295,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBroadPhaseType",
      "cxx_qt": "PxBroadPhaseType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Broad phase algorithm used in the simulation"
          ]
        },
        "additional": {
          "b": [
            "eSAP is a good generic choice with great performance when many objects are sleeping. Performance",
            "can degrade significantly though, when all objects are moving, or when large numbers of objects",
            "are added to or removed from the broad phase. This algorithm does not need world bounds to be",
            "defined in order to work.",
            "",
            "eMBP is an alternative broad phase algorithm that does not suffer from the same performance",
            "issues as eSAP when all objects are moving or when inserting large numbers of objects. However",
            "its generic performance when many objects are sleeping might be inferior to eSAP, and it requires",
            "users to define world bounds in order to work.",
            "",
            "eABP is a revisited implementation of MBP, which automatically manages broad-phase regions.",
            "It offers the convenience of eSAP (no need to define world bounds or regions) and the performance",
            "of eMBP when a lot of objects are moving. While eSAP can remain faster when most objects are",
            "sleeping and eMBP can remain faster when it uses a large number of properly-defined regions,",
            "eABP often gives the best performance on average and the best memory usage.",
            "",
            "ePABP is a parallel implementation of ABP. It can often be the fastest (CPU) broadphase, but it",
            "can use more memory than ABP.",
            "",
            "eGPU is a GPU implementation of the incremental sweep and prune approach. Additionally, it uses a ABP-style",
            "initial pair generation approach to avoid large spikes when inserting shapes. It not only has the advantage",
            "of traditional SAP approch which is good for when many objects are sleeping, but due to being fully parallel,",
            "it also is great when lots of shapes are moving or for runtime pair insertion and removal. It can become a",
            "performance bottleneck if there are a very large number of shapes roughly projecting to the same values",
            "on a given axis. If the scene has a very large number of shapes in an actor, e.g. a humanoid, it is recommended",
            "to use an aggregate to represent multi-shape or multi-body actors to minimize stress placed on the broad phase."
          ]
        }
      },
      "variants": [
        {
          "name": "eSAP",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "3-axes sweep-and-prune"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMBP",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Multi box pruning"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eABP",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Automatic box pruning"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePABP",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Parallel automatic box pruning"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eGPU",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "GPU broad phase"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 5,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxFrictionType",
      "cxx_qt": "PxFrictionType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enum for selecting the friction algorithm used for simulation."
          ]
        },
        "additional": {
          "b": [
            "#PxFrictionType::ePATCH selects the patch friction model which typically leads to the most stable results at low solver iteration counts and is also quite inexpensive, as it uses only",
            "up to four scalar solver constraints per pair of touching objects.  The patch friction model is the same basic strong friction algorithm as PhysX 3.2 and before.",
            "",
            "#PxFrictionType::eONE_DIRECTIONAL is a simplification of the Coulomb friction model, in which the friction for a given point of contact is applied in the alternating tangent directions of",
            "the contact's normal.  This simplification allows us to reduce the number of iterations required for convergence but is not as accurate as the two directional model.",
            "",
            "#PxFrictionType::eTWO_DIRECTIONAL is identical to the one directional model, but it applies friction in both tangent directions simultaneously.  This hurts convergence a bit so it",
            "requires more solver iterations, but is more accurate.  Like the one directional model, it is applied at every contact point, which makes it potentially more expensive",
            "than patch friction for scenarios with many contact points.",
            "",
            "#PxFrictionType::eFRICTION_COUNT is the total numer of friction models supported by the SDK."
          ]
        }
      },
      "variants": [
        {
          "name": "ePATCH",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Select default patch-friction model."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eONE_DIRECTIONAL",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Select one directional per-contact friction model."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTWO_DIRECTIONAL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Select two directional per-contact friction model."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFRICTION_COUNT",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "The total number of friction models supported by the SDK."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSolverType",
      "cxx_qt": "PxSolverType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enum for selecting the type of solver used for the simulation."
          ]
        },
        "additional": {
          "b": [
            "#PxSolverType::ePGS selects the iterative sequential impulse solver. This is the same kind of solver used in PhysX 3.4 and earlier releases.",
            "",
            "#PxSolverType::eTGS selects a non linear iterative solver. This kind of solver can lead to improved convergence and handle large mass ratios, long chains and jointed systems better. It is slightly more expensive than the default solver and can introduce more energy to correct joint and contact errors."
          ]
        }
      },
      "variants": [
        {
          "name": "ePGS",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Projected Gauss-Seidel iterative solver"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTGS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Default Temporal Gauss-Seidel solver"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSceneFlag",
      "cxx_qt": "PxSceneFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "flags for configuring properties of the scene"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eENABLE_ACTIVE_ACTORS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Enable Active Actors Notification."
              ]
            },
            "additional": {
              "b": [
                "This flag enables the Active Actor Notification feature for a scene.  This",
                "feature defaults to disabled.  When disabled, the function",
                "PxScene::getActiveActors() will always return a NULL list.",
                "",
                "There may be a performance penalty for enabling the Active Actor Notification, hence this flag should",
                "only be enabled if the application intends to use the feature.",
                "",
                "Default:",
                "False"
              ]
            }
          }
        },
        {
          "name": "eENABLE_CCD",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Enables a second broad phase check after integration that makes it possible to prevent objects from tunneling through eachother."
              ]
            },
            "additional": {
              "b": [
                "PxPairFlag::eDETECT_CCD_CONTACT requires this flag to be specified.",
                "",
                "For this feature to be effective for bodies that can move at a significant velocity, the user should raise the flag PxRigidBodyFlag::eENABLE_CCD for them.",
                "",
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "False"
              ]
            }
          }
        },
        {
          "name": "eDISABLE_CCD_RESWEEP",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Enables a simplified swept integration strategy, which sacrifices some accuracy for improved performance."
              ]
            },
            "additional": {
              "b": [
                "This simplified swept integration approach makes certain assumptions about the motion of objects that are not made when using a full swept integration.",
                "These assumptions usually hold but there are cases where they could result in incorrect behavior between a set of fast-moving rigid bodies. A key issue is that",
                "fast-moving dynamic objects may tunnel through each-other after a rebound. This will not happen if this mode is disabled. However, this approach will be potentially",
                "faster than a full swept integration because it will perform significantly fewer sweeps in non-trivial scenes involving many fast-moving objects. This approach",
                "should successfully resist objects passing through the static environment.",
                "",
                "PxPairFlag::eDETECT_CCD_CONTACT requires this flag to be specified.",
                "",
                "This scene flag requires eENABLE_CCD to be enabled as well. If it is not, this scene flag will do nothing.",
                "",
                "For this feature to be effective for bodies that can move at a significant velocity, the user should raise the flag PxRigidBodyFlag::eENABLE_CCD for them.",
                "",
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "False"
              ]
            }
          }
        },
        {
          "name": "eENABLE_PCM",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Enable GJK-based distance collision detection system."
              ]
            },
            "additional": {
              "b": [
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "true"
              ]
            }
          }
        },
        {
          "name": "eDISABLE_CONTACT_REPORT_BUFFER_RESIZE",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Disable contact report buffer resize. Once the contact buffer is full, the rest of the contact reports will",
                "not be buffered and sent."
              ]
            },
            "additional": {
              "b": [
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "false"
              ]
            }
          }
        },
        {
          "name": "eDISABLE_CONTACT_CACHE",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Disable contact cache."
              ]
            },
            "additional": {
              "b": [
                "Contact caches are used internally to provide faster contact generation. You can disable all contact caches",
                "if memory usage for this feature becomes too high.",
                "",
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "false"
              ]
            }
          }
        },
        {
          "name": "eREQUIRE_RW_LOCK",
          "value": 512,
          "comment": {
            "summary": {
              "b": [
                "Require scene-level locking"
              ]
            },
            "additional": {
              "b": [
                "When set to true this requires that threads accessing the PxScene use the",
                "multi-threaded lock methods.",
                "",
                "This flag is not mutable, and must be set in PxSceneDesc at scene creation.",
                "",
                "Default:",
                "false"
              ]
            }
          }
        },
        {
          "name": "eENABLE_STABILIZATION",
          "value": 1024,
          "comment": {
            "summary": {
              "b": [
                "Enables additional stabilization pass in solver"
              ]
            },
            "additional": {
              "b": [
                "When set to true, this enables additional stabilization processing to improve that stability of complex interactions between large numbers of bodies.",
                "",
                "Note that this flag is not mutable and must be set in PxSceneDesc at scene creation. Also, this is an experimental feature which does result in some loss of momentum."
              ]
            }
          }
        },
        {
          "name": "eENABLE_AVERAGE_POINT",
          "value": 2048,
          "comment": {
            "summary": {
              "b": [
                "Enables average points in contact manifolds"
              ]
            },
            "additional": {
              "b": [
                "When set to true, this enables additional contacts to be generated per manifold to represent the average point in a manifold. This can stabilize stacking when only a small",
                "number of solver iterations is used.",
                "",
                "Note that this flag is not mutable and must be set in PxSceneDesc at scene creation."
              ]
            }
          }
        },
        {
          "name": "eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS",
          "value": 4096,
          "comment": {
            "summary": {
              "b": [
                "Do not report kinematics in list of active actors."
              ]
            },
            "additional": {
              "b": [
                "Since the target pose for kinematics is set by the user, an application can track the activity state directly and use",
                "this flag to avoid that kinematics get added to the list of active actors.",
                "",
                "This flag has only an effect in combination with eENABLE_ACTIVE_ACTORS.",
                "",
                "Default:",
                "false"
              ]
            }
          }
        },
        {
          "name": "eENABLE_GPU_DYNAMICS",
          "value": 8192,
          "comment": {
            "summary": {
              "b": [
                "Do not report kinematics in list of active actors."
              ]
            },
            "additional": {
              "b": [
                "Since the target pose for kinematics is set by the user, an application can track the activity state directly and use",
                "this flag to avoid that kinematics get added to the list of active actors.",
                "",
                "This flag has only an effect in combination with eENABLE_ACTIVE_ACTORS.",
                "",
                "Default:",
                "false"
              ]
            }
          }
        },
        {
          "name": "eENABLE_ENHANCED_DETERMINISM",
          "value": 16384,
          "comment": {
            "summary": {
              "b": [
                "Provides improved determinism at the expense of performance."
              ]
            },
            "additional": {
              "b": [
                "By default, PhysX provides limited determinism guarantees. Specifically, PhysX guarantees that the exact scene (same actors created in the same order) and simulated using the same",
                "time-stepping scheme should provide the exact same behaviour.",
                "",
                "However, if additional actors are added to the simulation, this can affect the behaviour of the existing actors in the simulation, even if the set of new actors do not interact with",
                "the existing actors.",
                "",
                "This flag provides an additional level of determinism that guarantees that the simulation will not change if additional actors are added to the simulation, provided those actors do not interfere",
                "with the existing actors in the scene. Determinism is only guaranteed if the actors are inserted in a consistent order each run in a newly-created scene and simulated using a consistent time-stepping",
                "scheme.",
                "",
                "Note that this flag is not mutable and must be set at scene creation.",
                "",
                "Note that enabling this flag can have a negative impact on performance.",
                "",
                "Note that this feature is not currently supported on GPU.",
                "",
                "Default",
                "false"
              ]
            }
          }
        },
        {
          "name": "eENABLE_FRICTION_EVERY_ITERATION",
          "value": 32768,
          "comment": {
            "summary": {
              "b": [
                "Controls processing friction in all solver iterations"
              ]
            },
            "additional": {
              "b": [
                "By default, PhysX processes friction only in the final 3 position iterations, and all velocity",
                "iterations. This flag enables friction processing in all position and velocity iterations.",
                "",
                "The default behaviour provides a good trade-off between performance and stability and is aimed",
                "primarily at game development.",
                "",
                "When simulating more complex frictional behaviour, such as grasping of complex geometries with",
                "a robotic manipulator, better results can be achieved by enabling friction in all solver iterations.",
                "",
                "This flag only has effect with the default solver. The TGS solver always performs friction per-iteration."
              ]
            }
          }
        },
        {
          "name": "eSUPPRESS_READBACK",
          "value": 65536,
          "comment": {
            "summary": {
              "b": [
                "Controls processing friction in all solver iterations"
              ]
            },
            "additional": {
              "b": [
                "By default, PhysX processes friction only in the final 3 position iterations, and all velocity",
                "iterations. This flag enables friction processing in all position and velocity iterations.",
                "",
                "The default behaviour provides a good trade-off between performance and stability and is aimed",
                "primarily at game development.",
                "",
                "When simulating more complex frictional behaviour, such as grasping of complex geometries with",
                "a robotic manipulator, better results can be achieved by enabling friction in all solver iterations.",
                "",
                "This flag only has effect with the default solver. The TGS solver always performs friction per-iteration."
              ]
            }
          }
        },
        {
          "name": "eFORCE_READBACK",
          "value": 131072,
          "comment": {
            "summary": {
              "b": [
                "Controls processing friction in all solver iterations"
              ]
            },
            "additional": {
              "b": [
                "By default, PhysX processes friction only in the final 3 position iterations, and all velocity",
                "iterations. This flag enables friction processing in all position and velocity iterations.",
                "",
                "The default behaviour provides a good trade-off between performance and stability and is aimed",
                "primarily at game development.",
                "",
                "When simulating more complex frictional behaviour, such as grasping of complex geometries with",
                "a robotic manipulator, better results can be achieved by enabling friction in all solver iterations.",
                "",
                "This flag only has effect with the default solver. The TGS solver always performs friction per-iteration."
              ]
            }
          }
        },
        {
          "name": "eMUTABLE_FLAGS",
          "value": 69633,
          "comment": {
            "summary": {
              "b": [
                "Controls processing friction in all solver iterations"
              ]
            },
            "additional": {
              "b": [
                "By default, PhysX processes friction only in the final 3 position iterations, and all velocity",
                "iterations. This flag enables friction processing in all position and velocity iterations.",
                "",
                "The default behaviour provides a good trade-off between performance and stability and is aimed",
                "primarily at game development.",
                "",
                "When simulating more complex frictional behaviour, such as grasping of complex geometries with",
                "a robotic manipulator, better results can be achieved by enabling friction in all solver iterations.",
                "",
                "This flag only has effect with the default solver. The TGS solver always performs friction per-iteration."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxVisualizationParameter",
      "cxx_qt": "PxVisualizationParameter::Enum",
      "comment": {
        "summary": {
          "b": [
            "Debug visualization parameters."
          ]
        },
        "additional": {
          "b": [
            "#PxVisualizationParameter::eSCALE is the master switch for enabling visualization, please read the corresponding documentation",
            "for further details."
          ]
        }
      },
      "variants": [
        {
          "name": "eSCALE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "This overall visualization scale gets multiplied with the individual scales. Setting to zero ignores all visualizations. Default is 0."
              ]
            },
            "additional": {
              "b": [
                "The below settings permit the debug visualization of various simulation properties.",
                "The setting is either zero, in which case the property is not drawn. Otherwise it is a scaling factor",
                "that determines the size of the visualization widgets.",
                "",
                "Only objects for which visualization is turned on using setFlag(eVISUALIZATION) are visualized (see #PxActorFlag::eVISUALIZATION, #PxShapeFlag::eVISUALIZATION, ...).",
                "Contacts are visualized if they involve a body which is being visualized.",
                "Default is 0.",
                "",
                "Notes:",
                "- to see any visualization, you have to set PxVisualizationParameter::eSCALE to nonzero first.",
                "- the scale factor has been introduced because it's difficult (if not impossible) to come up with a",
                "good scale for 3D vectors. Normals are normalized and their length is always 1. But it doesn't mean",
                "we should render a line of length 1. Depending on your objects/scene, this might be completely invisible",
                "or extremely huge. That's why the scale factor is here, to let you tune the length until it's ok in",
                "your scene.",
                "- however, things like collision shapes aren't ambiguous. They are clearly defined for example by the",
                "triangles",
                "&",
                "polygons themselves, and there's no point in scaling that. So the visualization widgets",
                "are only scaled when it makes sense.",
                "",
                "Range:",
                "[0, PX_MAX_F32)",
                "Default:",
                "0"
              ]
            }
          }
        },
        {
          "name": "eWORLD_AXES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Visualize the world axes."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBODY_AXES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Visualize a bodies axes."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBODY_MASS_AXES",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Visualize a body's mass axes."
              ]
            },
            "additional": {
              "b": [
                "This visualization is also useful for visualizing the sleep state of bodies. Sleeping bodies are drawn in",
                "black, while awake bodies are drawn in white. If the body is sleeping and part of a sleeping group, it is",
                "drawn in red."
              ]
            }
          }
        },
        {
          "name": "eBODY_LIN_VELOCITY",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Visualize the bodies linear velocity."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eBODY_ANG_VELOCITY",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "Visualize the bodies angular velocity."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_POINT",
          "value": 6,
          "comment": {
            "summary": {
              "b": [
                "Visualize contact points. Will enable contact information."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_NORMAL",
          "value": 7,
          "comment": {
            "summary": {
              "b": [
                "Visualize contact normals. Will enable contact information."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_ERROR",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Visualize contact errors. Will enable contact information."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_FORCE",
          "value": 9,
          "comment": {
            "summary": {
              "b": [
                "Visualize Contact forces. Will enable contact information."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACTOR_AXES",
          "value": 10,
          "comment": {
            "summary": {
              "b": [
                "Visualize actor axes."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_AABBS",
          "value": 11,
          "comment": {
            "summary": {
              "b": [
                "Visualize bounds (AABBs in world space)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_SHAPES",
          "value": 12,
          "comment": {
            "summary": {
              "b": [
                "Shape visualization"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_AXES",
          "value": 13,
          "comment": {
            "summary": {
              "b": [
                "Shape axis visualization"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_COMPOUNDS",
          "value": 14,
          "comment": {
            "summary": {
              "b": [
                "Compound visualization (compound AABBs in world space)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_FNORMALS",
          "value": 15,
          "comment": {
            "summary": {
              "b": [
                "Mesh",
                "&",
                "convex face normals"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_EDGES",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Active edges for meshes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_STATIC",
          "value": 17,
          "comment": {
            "summary": {
              "b": [
                "Static pruning structures"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_DYNAMIC",
          "value": 18,
          "comment": {
            "summary": {
              "b": [
                "Dynamic pruning structures"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_LOCAL_FRAMES",
          "value": 19,
          "comment": {
            "summary": {
              "b": [
                "Joint local axes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eJOINT_LIMITS",
          "value": 20,
          "comment": {
            "summary": {
              "b": [
                "Joint limits"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCULL_BOX",
          "value": 21,
          "comment": {
            "summary": {
              "b": [
                "Visualize culling box"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eMBP_REGIONS",
          "value": 22,
          "comment": {
            "summary": {
              "b": [
                "MBP regions"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIMULATION_MESH",
          "value": 23,
          "comment": {
            "summary": {
              "b": [
                "Renders the simulation mesh instead of the collision mesh (only available for tetmeshes)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSDF",
          "value": 24,
          "comment": {
            "summary": {
              "b": [
                "Renders the SDF of a mesh instead of the collision mesh (only available for triangle meshes with SDFs)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNUM_VALUES",
          "value": 25,
          "comment": {
            "summary": {
              "b": [
                "This is not a parameter, it just records the current number of parameters (as maximum(PxVisualizationParameter)+1) for use in loops."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_DWORD",
          "value": 2147483647,
          "comment": {
            "summary": {
              "b": [
                "This is not a parameter, it just records the current number of parameters (as maximum(PxVisualizationParameter)+1) for use in loops."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "RbPairStatsType",
      "cxx_qt": "PxSimulationStatistics::RbPairStatsType",
      "comment": {
        "summary": {
          "b": [
            "Different types of rigid body collision pair statistics."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDISCRETE_CONTACT_PAIRS",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Shape pairs processed as discrete contact pairs for the current simulation step."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCCD_PAIRS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Shape pairs processed as swept integration pairs for the current simulation step."
              ]
            },
            "additional": {
              "b": [
                "Counts the pairs for which special CCD (continuous collision detection) work was actually done and NOT the number of pairs which were configured for CCD.",
                "Furthermore, there can be multiple CCD passes and all processed pairs of all passes are summed up, hence the number can be larger than the amount of pairs which have been configured for CCD."
              ]
            }
          }
        },
        {
          "name": "eMODIFIED_CONTACT_PAIRS",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Shape pairs processed with user contact modification enabled for the current simulation step."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTRIGGER_PAIRS",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Trigger shape pairs processed for the current simulation step."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSoftBodyDataFlag",
      "cxx_qt": "PxSoftBodyDataFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "These flags determine what data is read or written to the gpu softbody."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eTET_INDICES",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh tetrahedron indices (quadruples of int32)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTET_STRESS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh cauchy stress tensors (float 3x3 matrices)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTET_STRESSCOEFF",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh tetrahedron von Mises stress (float scalar)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTET_REST_POSES",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh tetrahedron rest poses (float 3x3 matrices)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTET_ROTATIONS",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh tetrahedron orientations (quaternions, quadruples of float)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTET_POSITION_INV_MASS",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "The collision mesh vertex positions and their inverted mass in the 4th component (quadruples of float)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_TET_INDICES",
          "value": 6,
          "comment": {
            "summary": {
              "b": [
                "The simulation mesh tetrahedron indices (quadruples of int32)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_VELOCITY_INV_MASS",
          "value": 7,
          "comment": {
            "summary": {
              "b": [
                "The simulation mesh vertex velocities and their inverted mass in the 4th component (quadruples of float)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_POSITION_INV_MASS",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "The simulation mesh vertex positions and their inverted mass in the 4th component (quadruples of float)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_KINEMATIC_TARGET",
          "value": 9,
          "comment": {
            "summary": {
              "b": [
                "The simulation mesh kinematic target positions"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHairSystemData",
      "cxx_qt": "PxHairSystemData::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies input and output buffers for PxHairSystem"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "No data specified"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePOSITION_INVMASS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Specifies the position (first 3 floats) and inverse mass (last float) data (array of PxVec4 * max number of vertices)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eVELOCITY",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Specifies the velocity (first 3 floats) data (array of PxVec4 * max number of vertices)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALL",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Specifies everything"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxHairSystemFlag",
      "cxx_qt": "PxHairSystemFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Binary settings for hair system simulation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDISABLE_SELF_COLLISION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Determines if self-collision between hair vertices is ignored"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_EXTERNAL_COLLISION",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Determines if collision between hair and external bodies is ignored"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_TWOSIDED_ATTACHMENT",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Determines if attachment constraint is also felt by body to which the hair is attached"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxActorCacheFlag",
      "cxx_qt": "PxActorCacheFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies each type of information for retrieving from actor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eACTOR_DATA",
          "value": 1,
          "comment": null
        },
        {
          "name": "eFORCE",
          "value": 4,
          "comment": null
        },
        {
          "name": "eTORQUE",
          "value": 8,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPvdSceneFlag",
      "cxx_qt": "PxPvdSceneFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "PVD scene Flags. They are disabled by default, and only works if PxPvdInstrumentationFlag::eDEBUG is set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eTRANSMIT_CONTACTS",
          "value": 1,
          "comment": null
        },
        {
          "name": "eTRANSMIT_SCENEQUERIES",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Transmits contact stream to PVD."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTRANSMIT_CONSTRAINTS",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Transmits scene query stream to PVD."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxActorTypeFlag",
      "cxx_qt": "PxActorTypeFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies each type of actor for retrieving actors from a scene."
          ]
        },
        "additional": {
          "b": [
            "#PxArticulationLink objects are not supported. Use the #PxArticulationReducedCoordinate object to retrieve all its links."
          ]
        }
      },
      "variants": [
        {
          "name": "eRIGID_STATIC",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "A static rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eRIGID_DYNAMIC",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "A dynamic rigid body"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxContactPairExtraDataType",
      "cxx_qt": "PxContactPairExtraDataType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Extra data item types for contact pairs."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "ePRE_SOLVER_VELOCITY",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "see #PxContactPairVelocity"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePOST_SOLVER_VELOCITY",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "see #PxContactPairVelocity"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_EVENT_POSE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "see #PxContactPairPose"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONTACT_PAIR_INDEX",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "see #PxContactPairIndex"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxContactPairHeaderFlag",
      "cxx_qt": "PxContactPairHeaderFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags providing information on contact report pairs."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eREMOVED_ACTOR_0",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The actor with index 0 has been removed from the scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREMOVED_ACTOR_1",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The actor with index 1 has been removed from the scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxContactPairFlag",
      "cxx_qt": "PxContactPairFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags providing information on contact report pairs."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eREMOVED_SHAPE_0",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The shape with index 0 has been removed from the actor/scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREMOVED_SHAPE_1",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The shape with index 1 has been removed from the actor/scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eACTOR_PAIR_HAS_FIRST_TOUCH",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "First actor pair contact."
              ]
            },
            "additional": {
              "b": [
                "The provided shape pair marks the first contact between the two actors, no other shape pair has been touching prior to the current simulation frame.",
                "",
                ": This info is only available if #PxPairFlag::eNOTIFY_TOUCH_FOUND has been declared for the pair."
              ]
            }
          }
        },
        {
          "name": "eACTOR_PAIR_LOST_TOUCH",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "All contact between the actor pair was lost."
              ]
            },
            "additional": {
              "b": [
                "All contact between the two actors has been lost, no shape pairs remain touching after the current simulation frame."
              ]
            }
          }
        },
        {
          "name": "eINTERNAL_HAS_IMPULSES",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Internal flag, used by #PxContactPair.extractContacts()"
              ]
            },
            "additional": {
              "b": [
                "The applied contact impulses are provided for every contact point.",
                "This is the case if #PxPairFlag::eSOLVE_CONTACT has been set for the pair."
              ]
            }
          }
        },
        {
          "name": "eINTERNAL_CONTACTS_ARE_FLIPPED",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Internal flag, used by #PxContactPair.extractContacts()"
              ]
            },
            "additional": {
              "b": [
                "The provided contact point information is flipped with regards to the shapes of the contact pair. This mainly concerns the order of the internal triangle indices."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxTriggerPairFlag",
      "cxx_qt": "PxTriggerPairFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collection of flags providing information on trigger report pairs."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eREMOVED_SHAPE_TRIGGER",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The trigger shape has been removed from the actor/scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eREMOVED_SHAPE_OTHER",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The shape causing the trigger event has been removed from the actor/scene."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNEXT_FREE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "For internal use only."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSoftBodyData",
      "cxx_qt": "PxSoftBodyData::Enum",
      "comment": {
        "summary": {
          "b": [
            "Identifies input and output buffers for PxSoftBody."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eNONE",
          "value": 0,
          "comment": null
        },
        {
          "name": "ePOSITION_INVMASS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Flag to request access to the collision mesh's positions; read only"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_POSITION_INVMASS",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Flag to request access to the simulation mesh's positions and inverse masses"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_VELOCITY",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Flag to request access to the simulation mesh's velocities and inverse masses"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSIM_KINEMATIC_TARGET",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Flag to request access to the simulation mesh's kinematic target position"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eALL",
          "value": 29,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSoftBodyFlag",
      "cxx_qt": "PxSoftBodyFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags to enable or disable special modes of a SoftBody"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDISABLE_SELF_COLLISION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Determines if self collision will be detected and resolved"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOMPUTE_STRESS_TENSOR",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Enables computation of a Cauchy stress tensor for every tetrahedron in the simulation mesh. The tensors can be accessed through the softbody direct API"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eENABLE_CCD",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Enables support for continuous collision detection"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISPLAY_SIM_MESH",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Enable debug rendering to display the simulation mesh"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eKINEMATIC",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Enables support for kinematic motion of the collision and simulation mesh."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePARTIALLY_KINEMATIC",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Enables partially kinematic motion of the collisios and simulation mesh."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxControllerShapeType",
      "cxx_qt": "PxControllerShapeType::Enum",
      "comment": {
        "summary": {
          "b": [
            "The type of controller, eg box, sphere or capsule."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eBOX",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "A box controller."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCAPSULE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "A capsule controller"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_DWORD",
          "value": 2147483647,
          "comment": {
            "summary": {
              "b": [
                "A capsule controller"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxControllerNonWalkableMode",
      "cxx_qt": "PxControllerNonWalkableMode::Enum",
      "comment": {
        "summary": {
          "b": [
            "specifies how a CCT interacts with non-walkable parts."
          ]
        },
        "additional": {
          "b": [
            "This is only used when slopeLimit is non zero. It is currently enabled for static actors only, and not supported for spheres or capsules."
          ]
        }
      },
      "variants": [
        {
          "name": "ePREVENT_CLIMBING",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Stops character from climbing up non-walkable slopes, but doesn't move it otherwise"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePREVENT_CLIMBING_AND_FORCE_SLIDING",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxControllerCollisionFlag",
      "cxx_qt": "PxControllerCollisionFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "specifies which sides a character is colliding with."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eCOLLISION_SIDES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Character is colliding to the sides."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_UP",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Character has collision above."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOLLISION_DOWN",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Character has collision below."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxCapsuleClimbingMode",
      "cxx_qt": "PxCapsuleClimbingMode::Enum",
      "comment": null,
      "variants": [
        {
          "name": "eEASY",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Standard mode, let the capsule climb over surfaces according to impact normal"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCONSTRAINED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Constrained mode, try to limit climbing according to the step offset"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxControllerBehaviorFlag",
      "cxx_qt": "PxControllerBehaviorFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "specifies controller behavior"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eCCT_CAN_RIDE_ON_OBJECT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Controller can ride on touched object (i.e. when this touched object is moving horizontally)."
              ]
            },
            "additional": {
              "b": [
                "The CCT vs. CCT case is not supported."
              ]
            }
          }
        },
        {
          "name": "eCCT_SLIDE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Controller should slide on touched object"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCCT_USER_DEFINED_RIDE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Disable all code dealing with controllers riding on objects, let users define it outside of the SDK."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "UInt",
      "name": "PxControllerDebugRenderFlag",
      "cxx_qt": "PxControllerDebugRenderFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "specifies debug-rendering flags"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eTEMPORAL_BV",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Temporal bounding volume around controllers"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCACHED_BV",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Cached bounding volume around controllers"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eOBSTACLES",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "User-defined obstacles"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eNONE",
          "value": 0,
          "comment": null
        },
        {
          "name": "eALL",
          "value": 4294967295,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSdfBitsPerSubgridPixel",
      "cxx_qt": "PxSdfBitsPerSubgridPixel::Enum",
      "comment": {
        "summary": {
          "b": [
            "Defines the number of bits per subgrid pixel"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "e8_BIT_PER_PIXEL",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "8 bit per subgrid pixel (values will be stored as normalized integers)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "e16_BIT_PER_PIXEL",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "16 bit per subgrid pixel (values will be stored as normalized integers)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "e32_BIT_PER_PIXEL",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "32 bit per subgrid pixel (values will be stored as floats in world scale units)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConvexFlag",
      "cxx_qt": "PxConvexFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags which describe the format and behavior of a convex mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "e16_BIT_INDICES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Denotes the use of 16-bit vertex indices in PxConvexMeshDesc::triangles or PxConvexMeshDesc::polygons.",
                "(otherwise, 32-bit indices are assumed)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOMPUTE_CONVEX",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Automatically recomputes the hull from the vertices. If this flag is not set, you must provide the entire geometry manually."
              ]
            },
            "additional": {
              "b": [
                "There are two different algorithms for hull computation, please see PxConvexMeshCookingType."
              ]
            }
          }
        },
        {
          "name": "eCHECK_ZERO_AREA_TRIANGLES",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Checks and removes almost zero-area triangles during convex hull computation.",
                "The rejected area size is specified in PxCookingParams::areaTestEpsilon"
              ]
            },
            "additional": {
              "b": [
                "This flag is only used in combination with eCOMPUTE_CONVEX."
              ]
            }
          }
        },
        {
          "name": "eQUANTIZE_INPUT",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "Quantizes the input vertices using the k-means clustering"
              ]
            },
            "additional": {
              "b": [
                "The input vertices are quantized to PxConvexMeshDesc::quantizedCount",
                "see http://en.wikipedia.org/wiki/K-means_clustering"
              ]
            }
          }
        },
        {
          "name": "eDISABLE_MESH_VALIDATION",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "Disables the convex mesh validation to speed-up hull creation. Please use separate validation",
                "function in checked/debug builds. Creating a convex mesh with invalid input data without prior validation",
                "may result in undefined behavior."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePLANE_SHIFTING",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "Enables plane shifting vertex limit algorithm."
              ]
            },
            "additional": {
              "b": [
                "Plane shifting is an alternative algorithm for the case when the computed hull has more vertices",
                "than the specified vertex limit.",
                "",
                "The default algorithm computes the full hull, and an OBB around the input vertices. This OBB is then sliced",
                "with the hull planes until the vertex limit is reached.The default algorithm requires the vertex limit",
                "to be set to at least 8, and typically produces results that are much better quality than are produced",
                "by plane shifting.",
                "",
                "When plane shifting is enabled, the hull computation stops when vertex limit is reached. The hull planes",
                "are then shifted to contain all input vertices, and the new plane intersection points are then used to",
                "generate the final hull with the given vertex limit.Plane shifting may produce sharp edges to vertices",
                "very far away from the input cloud, and does not guarantee that all input vertices are inside the resulting",
                "hull.However, it can be used with a vertex limit as low as 4."
              ]
            }
          }
        },
        {
          "name": "eFAST_INERTIA_COMPUTATION",
          "value": 64,
          "comment": {
            "summary": {
              "b": [
                "Inertia tensor computation is faster using SIMD code, but the precision is lower, which may result",
                "in incorrect inertia for very thin hulls."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eGPU_COMPATIBLE",
          "value": 128,
          "comment": {
            "summary": {
              "b": [
                "Convex hulls are created with respect to GPU simulation limitations. Vertex limit and polygon limit",
                "is set to 64 and vertex limit per face is internally set to 32."
              ]
            },
            "additional": {
              "b": [
                "Can be used only with eCOMPUTE_CONVEX flag."
              ]
            }
          }
        },
        {
          "name": "eSHIFT_VERTICES",
          "value": 256,
          "comment": {
            "summary": {
              "b": [
                "Convex hull input vertices are shifted to be around origin to provide better computation stability.",
                "It is recommended to provide input vertices around the origin, otherwise use this flag to improve",
                "numerical stability."
              ]
            },
            "additional": {
              "b": [
                "Is used only with eCOMPUTE_CONVEX flag."
              ]
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshFormat",
      "cxx_qt": "PxTetrahedronMeshDesc::PxMeshFormat",
      "comment": {
        "summary": {
          "b": [
            "Defines the tetrahedron structure of a mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eTET_MESH",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Normal tetmesh with arbitrary tetrahedra"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eHEX_MESH",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "6 tetrahedra in a row will form a hexahedron"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBVH34BuildStrategy",
      "cxx_qt": "PxBVH34BuildStrategy::Enum",
      "comment": {
        "summary": {
          "b": [
            "Desired build strategy for PxMeshMidPhase::eBVH34"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eFAST",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Fast build strategy. Fast build speed, good runtime performance in most cases. Recommended for runtime mesh cooking."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDEFAULT",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Default build strategy. Medium build speed, good runtime performance in all cases."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSAH",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "SAH build strategy. Slower builds, slightly improved runtime performance in some cases."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLAST",
          "value": 3,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConvexMeshCookingResult",
      "cxx_qt": "PxConvexMeshCookingResult::Enum",
      "comment": {
        "summary": {
          "b": [
            "Result from convex cooking."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSUCCESS",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Convex mesh cooking succeeded."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eZERO_AREA_TEST_FAILED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Convex mesh cooking failed, algorithm couldn't find 4 initial vertices without a small triangle."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "ePOLYGONS_LIMIT_REACHED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Convex mesh cooking succeeded, but the algorithm has reached the 255 polygons limit.",
                "The produced hull does not contain all input vertices. Try to simplify the input vertices",
                "or try to use the eINFLATE_CONVEX or the eQUANTIZE_INPUT flags."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFAILURE",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "Something unrecoverable happened. Check the error stream to find out what."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConvexMeshCookingType",
      "cxx_qt": "PxConvexMeshCookingType::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enumeration for convex mesh cooking algorithms."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eQUICKHULL",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "The Quickhull algorithm constructs the hull from the given input points. The resulting hull",
                "will only contain a subset of the input points."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxTriangleMeshCookingResult",
      "cxx_qt": "PxTriangleMeshCookingResult::Enum",
      "comment": {
        "summary": {
          "b": [
            "Result from triangle mesh cooking"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSUCCESS",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "Everything is A-OK."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLARGE_TRIANGLE",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "a triangle is too large for well-conditioned results. Tessellate the mesh for better behavior, see the user guide section on cooking for more details."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFAILURE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Something unrecoverable happened. Check the error stream to find out what."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxMeshPreprocessingFlag",
      "cxx_qt": "PxMeshPreprocessingFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Enum for the set of mesh pre-processing parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eWELD_VERTICES",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "When set, mesh welding is performed. See PxCookingParams::meshWeldTolerance. Clean mesh must be enabled."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDISABLE_CLEAN_MESH",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "When set, mesh cleaning is disabled. This makes cooking faster."
              ]
            },
            "additional": {
              "b": [
                "When clean mesh is not performed, mesh welding is also not performed.",
                "",
                "It is recommended to use only meshes that passed during validateTriangleMesh."
              ]
            }
          }
        },
        {
          "name": "eDISABLE_ACTIVE_EDGES_PRECOMPUTE",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "When set, active edges are set for each triangle edge. This makes cooking faster but slow up contact generation."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFORCE_32BIT_INDICES",
          "value": 8,
          "comment": {
            "summary": {
              "b": [
                "When set, 32-bit indices will always be created regardless of triangle count."
              ]
            },
            "additional": {
              "b": [
                "By default mesh will be created with 16-bit indices for triangle count",
                "<",
                "= 0xFFFF and 32-bit otherwise."
              ]
            }
          }
        },
        {
          "name": "eENABLE_VERT_MAPPING",
          "value": 16,
          "comment": {
            "summary": {
              "b": [
                "When set, a list of triangles will be created for each associated vertex in the mesh"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eENABLE_INERTIA",
          "value": 32,
          "comment": {
            "summary": {
              "b": [
                "When set, inertia tensor is calculated for the mesh"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxConstraintExtIDs",
      "cxx_qt": "PxConstraintExtIDs::Enum",
      "comment": {
        "summary": {
          "b": [
            "Unique identifiers for extensions classes which implement a constraint based on PxConstraint."
          ]
        },
        "additional": {
          "b": [
            "Users which want to create their own custom constraint types should choose an ID larger or equal to eNEXT_FREE_ID",
            "and not eINVALID_ID."
          ]
        }
      },
      "variants": [
        {
          "name": "eJOINT",
          "value": 0,
          "comment": null
        },
        {
          "name": "eVEHICLE_SUSP_LIMIT_DEPRECATED",
          "value": 1,
          "comment": null
        },
        {
          "name": "eVEHICLE_STICKY_TYRE_DEPRECATED",
          "value": 2,
          "comment": null
        },
        {
          "name": "eVEHICLE_JOINT",
          "value": 3,
          "comment": null
        },
        {
          "name": "eNEXT_FREE_ID",
          "value": 4,
          "comment": null
        },
        {
          "name": "eINVALID_ID",
          "value": 2147483647,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxJointConcreteType",
      "cxx_qt": "PxJointConcreteType::Enum",
      "comment": {
        "summary": {
          "b": [
            "an enumeration of PhysX' built-in joint types"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eSPHERICAL",
          "value": 256,
          "comment": null
        },
        {
          "name": "eREVOLUTE",
          "value": 257,
          "comment": null
        },
        {
          "name": "ePRISMATIC",
          "value": 258,
          "comment": null
        },
        {
          "name": "eFIXED",
          "value": 259,
          "comment": null
        },
        {
          "name": "eDISTANCE",
          "value": 260,
          "comment": null
        },
        {
          "name": "eD6",
          "value": 261,
          "comment": null
        },
        {
          "name": "eCONTACT",
          "value": 262,
          "comment": null
        },
        {
          "name": "eGEAR",
          "value": 263,
          "comment": null
        },
        {
          "name": "eRACK_AND_PINION",
          "value": 264,
          "comment": null
        },
        {
          "name": "eLast",
          "value": 265,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxJointActorIndex",
      "cxx_qt": "PxJointActorIndex::Enum",
      "comment": {
        "summary": {
          "b": [
            "an enumeration for specifying one or other of the actors referenced by a joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eACTOR0",
          "value": 0,
          "comment": null
        },
        {
          "name": "eACTOR1",
          "value": 1,
          "comment": null
        },
        {
          "name": "COUNT",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxDistanceJointFlag",
      "cxx_qt": "PxDistanceJointFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "flags for configuring the drive of a PxDistanceJoint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eMAX_DISTANCE_ENABLED",
          "value": 2,
          "comment": null
        },
        {
          "name": "eMIN_DISTANCE_ENABLED",
          "value": 4,
          "comment": null
        },
        {
          "name": "eSPRING_ENABLED",
          "value": 8,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPrismaticJointFlag",
      "cxx_qt": "PxPrismaticJointFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags specific to the prismatic joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLIMIT_ENABLED",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxRevoluteJointFlag",
      "cxx_qt": "PxRevoluteJointFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags specific to the Revolute Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLIMIT_ENABLED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "enable the limit"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDRIVE_ENABLED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "enable the drive"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eDRIVE_FREESPIN",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "if the existing velocity is beyond the drive velocity, do not add force"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxSphericalJointFlag",
      "cxx_qt": "PxSphericalJointFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "Flags specific to the spherical joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLIMIT_ENABLED",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "the cone limit for the spherical joint is enabled"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxD6Axis",
      "cxx_qt": "PxD6Axis::Enum",
      "comment": {
        "summary": {
          "b": [
            "Used to specify one of the degrees of freedom of  a D6 joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eX",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "motion along the X axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eY",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "motion along the Y axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eZ",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "motion along the Z axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTWIST",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "motion around the X axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSWING1",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "motion around the Y axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSWING2",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "motion around the Z axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOUNT",
          "value": 6,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxD6Motion",
      "cxx_qt": "PxD6Motion::Enum",
      "comment": {
        "summary": {
          "b": [
            "Used to specify the range of motions allowed for a degree of freedom in a D6 joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eLOCKED",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "The DOF is locked, it does not allow relative motion."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eLIMITED",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The DOF is limited, it only allows motion within a specific range."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eFREE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The DOF is free and has its full range of motion."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxD6Drive",
      "cxx_qt": "PxD6Drive::Enum",
      "comment": {
        "summary": {
          "b": [
            "Used to specify which axes of a D6 joint are driven."
          ]
        },
        "additional": {
          "b": [
            "Each drive is an implicit force-limited damped spring:",
            "",
            "force = spring * (target position - position) + damping * (targetVelocity - velocity)",
            "",
            "Alternatively, the spring may be configured to generate a specified acceleration instead of a force.",
            "",
            "A linear axis is affected by drive only if the corresponding drive flag is set. There are two possible models",
            "for angular drive: swing/twist, which may be used to drive one or more angular degrees of freedom, or slerp,",
            "which may only be used to drive all three angular degrees simultaneously."
          ]
        }
      },
      "variants": [
        {
          "name": "eX",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "drive along the X-axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eY",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "drive along the Y-axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eZ",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "drive along the Z-axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSWING",
          "value": 3,
          "comment": {
            "summary": {
              "b": [
                "drive of displacement from the X-axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eTWIST",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "drive of the displacement around the X-axis"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSLERP",
          "value": 5,
          "comment": {
            "summary": {
              "b": [
                "drive of all three angular degrees along a SLERP-path"
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eCOUNT",
          "value": 6,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxD6JointDriveFlag",
      "cxx_qt": "PxD6JointDriveFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "flags for configuring the drive model of a PxD6Joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eACCELERATION",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "drive spring is for the acceleration at the joint (rather than the force)"
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxFilterOp",
      "cxx_qt": "PxFilterOp::Enum",
      "comment": {
        "summary": {
          "b": [
            "Collision filtering operations."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "PX_FILTEROP_AND",
          "value": 0,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_OR",
          "value": 1,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_XOR",
          "value": 2,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_NAND",
          "value": 3,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_NOR",
          "value": 4,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_NXOR",
          "value": 5,
          "comment": null
        },
        {
          "name": "PX_FILTEROP_SWAP_AND",
          "value": 6,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxDefaultCpuDispatcherWaitForWorkMode",
      "cxx_qt": "PxDefaultCpuDispatcherWaitForWorkMode::Enum",
      "comment": {
        "summary": {
          "b": [
            "If a thread ends up waiting for work it will find itself in a spin-wait loop until work becomes available.",
            "Three strategies are available to limit wasted cycles.",
            "The strategies are as follows:",
            "a) wait until a work task signals the end of the spin-wait period.",
            "b) yield the thread by providing a hint to reschedule thread execution, thereby allowing other threads to run.",
            "c) yield the processor by informing it that it is waiting for work and requesting it to more efficiently use compute resources."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eWAIT_FOR_WORK",
          "value": 0,
          "comment": null
        },
        {
          "name": "eYIELD_THREAD",
          "value": 1,
          "comment": null
        },
        {
          "name": "eYIELD_PROCESSOR",
          "value": 2,
          "comment": null
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxBatchQueryStatus",
      "cxx_qt": "PxBatchQueryStatus::Enum",
      "comment": null,
      "variants": [
        {
          "name": "ePENDING",
          "value": 0,
          "comment": {
            "summary": {
              "b": [
                "This is the initial state before a query starts."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eSUCCESS",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "The query is finished; results have been written into the result and hit buffers."
              ]
            },
            "additional": {
              "b": []
            }
          }
        },
        {
          "name": "eOVERFLOW",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "The query results were incomplete due to touch hit buffer overflow. Blocking hit is still correct."
              ]
            },
            "additional": {
              "b": []
            }
          }
        }
      ]
    },
    {
      "repr": "Int",
      "name": "PxPvdInstrumentationFlag",
      "cxx_qt": "PxPvdInstrumentationFlag::Enum",
      "comment": {
        "summary": {
          "b": [
            "types of instrumentation that PVD can do."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "variants": [
        {
          "name": "eDEBUG",
          "value": 1,
          "comment": {
            "summary": {
              "b": [
                "Send debugging information to PVD."
              ]
            },
            "additional": {
              "b": [
                "This information is the actual object data of the rigid statics, shapes,",
                "articulations, etc.  Sending this information has a noticeable impact on",
                "performance and thus this flag should not be set if you want an accurate",
                "performance profile."
              ]
            }
          }
        },
        {
          "name": "ePROFILE",
          "value": 2,
          "comment": {
            "summary": {
              "b": [
                "Send profile information to PVD."
              ]
            },
            "additional": {
              "b": [
                "This information populates PVD's profile view.  It has (at this time) negligible",
                "cost compared to Debug information and makes PVD *much* more useful so it is quite",
                "highly recommended.",
                "",
                "This flag works together with a PxCreatePhysics parameter.",
                "Using it allows the SDK to send profile events to PVD."
              ]
            }
          }
        },
        {
          "name": "eMEMORY",
          "value": 4,
          "comment": {
            "summary": {
              "b": [
                "Send memory information to PVD."
              ]
            },
            "additional": {
              "b": [
                "The PVD sdk side hooks into the Foundation memory controller and listens to",
                "allocation/deallocation events.  This has a noticable hit on the first frame,",
                "however, this data is somewhat compressed and the PhysX SDK doesn't allocate much",
                "once it hits a steady state.  This information also has a fairly negligible",
                "impact and thus is also highly recommended.",
                "",
                "This flag works together with a PxCreatePhysics parameter,",
                "trackOutstandingAllocations.  Using both of them together allows users to have",
                "an accurate view of the overall memory usage of the simulation at the cost of",
                "a hashtable lookup per allocation/deallocation.  Again, PhysX makes a best effort",
                "attempt not to allocate or deallocate during simulation so this hashtable lookup",
                "tends to have no effect past the first frame.",
                "",
                "Sending memory information without tracking outstanding allocations means that",
                "PVD will accurate information about the state of the memory system before the",
                "actual connection happened."
              ]
            }
          }
        },
        {
          "name": "eALL",
          "value": 7,
          "comment": {
            "summary": {
              "b": [
                "Send memory information to PVD."
              ]
            },
            "additional": {
              "b": [
                "The PVD sdk side hooks into the Foundation memory controller and listens to",
                "allocation/deallocation events.  This has a noticable hit on the first frame,",
                "however, this data is somewhat compressed and the PhysX SDK doesn't allocate much",
                "once it hits a steady state.  This information also has a fairly negligible",
                "impact and thus is also highly recommended.",
                "",
                "This flag works together with a PxCreatePhysics parameter,",
                "trackOutstandingAllocations.  Using both of them together allows users to have",
                "an accurate view of the overall memory usage of the simulation at the cost of",
                "a hashtable lookup per allocation/deallocation.  Again, PhysX makes a best effort",
                "attempt not to allocate or deallocate during simulation so this hashtable lookup",
                "tends to have no effect past the first frame.",
                "",
                "Sending memory information without tracking outstanding allocations means that",
                "PVD will accurate information about the state of the memory system before the",
                "actual connection happened."
              ]
            }
          }
        }
      ]
    }
  ],
  "enum_map": {
    "PxConvexMeshCookingType::Enum": [
      "Int",
      "PxConvexMeshCookingType"
    ],
    "PxGeometryQueryFlag::Enum": [
      "Int",
      "PxGeometryQueryFlag"
    ],
    "PxPairFlag::Enum": [
      "Int",
      "PxPairFlag"
    ],
    "PxBVHBuildStrategy::Enum": [
      "Int",
      "PxBVHBuildStrategy"
    ],
    "PxArticulationJointType::Enum": [
      "Int",
      "PxArticulationJointType"
    ],
    "PxPairFilteringMode::Enum": [
      "Int",
      "PxPairFilteringMode"
    ],
    "PxHeightFieldTessFlag::Enum": [
      "Int",
      "PxHeightFieldTessFlag"
    ],
    "PxTriangleMeshCookingResult::Enum": [
      "Int",
      "PxTriangleMeshCookingResult"
    ],
    "PxErrorCode::Enum": [
      "Int",
      "PxErrorCode"
    ],
    "PxSimulationStatistics::RbPairStatsType": [
      "Int",
      "RbPairStatsType"
    ],
    "PxConvexMeshCookingResult::Enum": [
      "Int",
      "PxConvexMeshCookingResult"
    ],
    "PxBatchQueryStatus::Enum": [
      "Int",
      "PxBatchQueryStatus"
    ],
    "PxMeshGeometryFlag::Enum": [
      "Int",
      "PxMeshGeometryFlag"
    ],
    "PxHeightFieldMaterial::Enum": [
      "Int",
      "PxHeightFieldMaterial"
    ],
    "PxHairSystemData::Enum": [
      "Int",
      "PxHairSystemData"
    ],
    "PxD6JointDriveFlag::Enum": [
      "Int",
      "PxD6JointDriveFlag"
    ],
    "PxMaterialFlag::Enum": [
      "Int",
      "PxMaterialFlag"
    ],
    "PxHitFlag::Enum": [
      "Int",
      "PxHitFlag"
    ],
    "PxRigidBodyFlag::Enum": [
      "Int",
      "PxRigidBodyFlag"
    ],
    "PxConcreteType::Enum": [
      "Int",
      "PxConcreteType"
    ],
    "PxSceneFlag::Enum": [
      "Int",
      "PxSceneFlag"
    ],
    "PxTriggerPairFlag::Enum": [
      "Int",
      "PxTriggerPairFlag"
    ],
    "PxForceMode::Enum": [
      "Int",
      "PxForceMode"
    ],
    "PxActorTypeFlag::Enum": [
      "Int",
      "PxActorTypeFlag"
    ],
    "PxConvexMeshGeometryFlag::Enum": [
      "Int",
      "PxConvexMeshGeometryFlag"
    ],
    "PxPruningStructureType::Enum": [
      "Int",
      "PxPruningStructureType"
    ],
    "PxBroadPhaseType::Enum": [
      "Int",
      "PxBroadPhaseType"
    ],
    "PxTaskType::Enum": [
      "Int",
      "PxTaskType"
    ],
    "PxBaseFlag::Enum": [
      "Int",
      "PxBaseFlag"
    ],
    "PxQueryFlag::Enum": [
      "Int",
      "PxQueryFlag"
    ],
    "PxArticulationFlag::Enum": [
      "Int",
      "PxArticulationFlag"
    ],
    "PxDataAccessFlag::Enum": [
      "Int",
      "PxDataAccessFlag"
    ],
    "PxGeometryType::Enum": [
      "Int",
      "PxGeometryType"
    ],
    "PxHeightFieldFlag::Enum": [
      "Int",
      "PxHeightFieldFlag"
    ],
    "PxMeshMeshQueryFlag::Enum": [
      "Int",
      "PxMeshMeshQueryFlag"
    ],
    "PxControllerDebugRenderFlag::Enum": [
      "UInt",
      "PxControllerDebugRenderFlag"
    ],
    "PxFilterFlag::Enum": [
      "Int",
      "PxFilterFlag"
    ],
    "PxTetrahedronMeshDesc::PxMeshFormat": [
      "Int",
      "PxMeshFormat"
    ],
    "PxCombineMode::Enum": [
      "Int",
      "PxCombineMode"
    ],
    "PxActorFlag::Enum": [
      "Int",
      "PxActorFlag"
    ],
    "PxMeshMidPhase::Enum": [
      "Int",
      "PxMeshMidPhase"
    ],
    "PxSolverType::Enum": [
      "Int",
      "PxSolverType"
    ],
    "PxDefaultCpuDispatcherWaitForWorkMode::Enum": [
      "Int",
      "PxDefaultCpuDispatcherWaitForWorkMode"
    ],
    "PxContactPairHeaderFlag::Enum": [
      "Int",
      "PxContactPairHeaderFlag"
    ],
    "PxContactPatch::PxContactPatchFlags": [
      "Int",
      "PxContactPatchFlags"
    ],
    "PxHeightFieldFormat::Enum": [
      "Int",
      "PxHeightFieldFormat"
    ],
    "PxControllerShapeType::Enum": [
      "Int",
      "PxControllerShapeType"
    ],
    "PxSphericalJointFlag::Enum": [
      "Int",
      "PxSphericalJointFlag"
    ],
    "PxCapsuleClimbingMode::Enum": [
      "Int",
      "PxCapsuleClimbingMode"
    ],
    "PxConvexFlag::Enum": [
      "Int",
      "PxConvexFlag"
    ],
    "PxParticleSolverType::Enum": [
      "Int",
      "PxParticleSolverType"
    ],
    "PxAggregateType::Enum": [
      "Int",
      "PxAggregateType"
    ],
    "PxTriangleMeshFlag::Enum": [
      "Int",
      "PxTriangleMeshFlag"
    ],
    "PxPvdUpdateType::Enum": [
      "Int",
      "PxPvdUpdateType"
    ],
    "PxArticulationMotion::Enum": [
      "Int",
      "PxArticulationMotion"
    ],
    "PxD6Drive::Enum": [
      "Int",
      "PxD6Drive"
    ],
    "PxActorType::Enum": [
      "Int",
      "PxActorType"
    ],
    "PxArticulationCacheFlag::Enum": [
      "Int",
      "PxArticulationCacheFlag"
    ],
    "PxD6Axis::Enum": [
      "Int",
      "PxD6Axis"
    ],
    "PxFilterOp::Enum": [
      "Int",
      "PxFilterOp"
    ],
    "PxSdfBitsPerSubgridPixel::Enum": [
      "Int",
      "PxSdfBitsPerSubgridPixel"
    ],
    "PxFilterObjectFlag::Enum": [
      "Int",
      "PxFilterObjectFlag"
    ],
    "Px1DConstraintFlag::Type": [
      "Int",
      "Px1DConstraintFlag"
    ],
    "PxControllerNonWalkableMode::Enum": [
      "Int",
      "PxControllerNonWalkableMode"
    ],
    "PxDistanceJointFlag::Enum": [
      "Int",
      "PxDistanceJointFlag"
    ],
    "PxFrictionType::Enum": [
      "Int",
      "PxFrictionType"
    ],
    "PxConstraintFlag::Enum": [
      "Int",
      "PxConstraintFlag"
    ],
    "PxSceneQueryUpdateMode::Enum": [
      "Int",
      "PxSceneQueryUpdateMode"
    ],
    "PxVisualizationParameter::Enum": [
      "Int",
      "PxVisualizationParameter"
    ],
    "PxEMPTY": [
      "Int",
      "PxEMPTY"
    ],
    "PxContactPairFlag::Enum": [
      "Int",
      "PxContactPairFlag"
    ],
    "PxSoftBodyData::Enum": [
      "Int",
      "PxSoftBodyData"
    ],
    "PxDeletionEventFlag::Enum": [
      "Int",
      "PxDeletionEventFlag"
    ],
    "PxJointActorIndex::Enum": [
      "Int",
      "PxJointActorIndex"
    ],
    "PxQueryHitType::Enum": [
      "Int",
      "PxQueryHitType"
    ],
    "PxSoftBodyFlag::Enum": [
      "Int",
      "PxSoftBodyFlag"
    ],
    "PxMetaDataFlag::Enum": [
      "Int",
      "PxMetaDataFlag"
    ],
    "PxParticlePhaseFlag::Enum": [
      "UInt",
      "PxParticlePhaseFlag"
    ],
    "PxContactStreamIterator::StreamFormat": [
      "Int",
      "StreamFormat"
    ],
    "PxConstraintExtIDs::Enum": [
      "Int",
      "PxConstraintExtIDs"
    ],
    "PxArticulationKinematicFlag::Enum": [
      "Int",
      "PxArticulationKinematicFlag"
    ],
    "PxRevoluteJointFlag::Enum": [
      "Int",
      "PxRevoluteJointFlag"
    ],
    "PxD6Motion::Enum": [
      "Int",
      "PxD6Motion"
    ],
    "PxThreadPriority::Enum": [
      "UInt",
      "PxThreadPriority"
    ],
    "PxRigidDynamicLockFlag::Enum": [
      "Int",
      "PxRigidDynamicLockFlag"
    ],
    "PxContactPairExtraDataType::Enum": [
      "Int",
      "PxContactPairExtraDataType"
    ],
    "PxPrismaticJointFlag::Enum": [
      "Int",
      "PxPrismaticJointFlag"
    ],
    "PxMeshFlag::Enum": [
      "Int",
      "PxMeshFlag"
    ],
    "PxSoftBodyDataFlag::Enum": [
      "Int",
      "PxSoftBodyDataFlag"
    ],
    "PxActorCacheFlag::Enum": [
      "Int",
      "PxActorCacheFlag"
    ],
    "PxFilterObjectType::Enum": [
      "Int",
      "PxFilterObjectType"
    ],
    "PxArticulationSensorFlag::Enum": [
      "Int",
      "PxArticulationSensorFlag"
    ],
    "PxIDENTITY": [
      "Int",
      "PxIDENTITY"
    ],
    "PxTetrahedronMeshFlag::Enum": [
      "Int",
      "PxTetrahedronMeshFlag"
    ],
    "PxArticulationAxis::Enum": [
      "Int",
      "PxArticulationAxis"
    ],
    "PxShapeFlag::Enum": [
      "Int",
      "PxShapeFlag"
    ],
    "PxPvdInstrumentationFlag::Enum": [
      "Int",
      "PxPvdInstrumentationFlag"
    ],
    "PxConstraintSolveHint::Enum": [
      "Int",
      "PxConstraintSolveHint"
    ],
    "PxConstraintVisualizationFlag::Enum": [
      "Int",
      "PxConstraintVisualizationFlag"
    ],
    "PxSolverConstraintDesc::ConstraintType": [
      "Int",
      "ConstraintType"
    ],
    "PxJointConcreteType::Enum": [
      "Int",
      "PxJointConcreteType"
    ],
    "PxControllerCollisionFlag::Enum": [
      "Int",
      "PxControllerCollisionFlag"
    ],
    "PxSolverConstraintPrepDescBase::BodyState": [
      "Int",
      "BodyState"
    ],
    "PxBufferType::Enum": [
      "Int",
      "PxBufferType"
    ],
    "PxDynamicTreeSecondaryPruner::Enum": [
      "Int",
      "PxDynamicTreeSecondaryPruner"
    ],
    "PxDebugColor::Enum": [
      "UInt",
      "PxDebugColor"
    ],
    "PxParticleBufferFlag::Enum": [
      "Int",
      "PxParticleBufferFlag"
    ],
    "PxControllerBehaviorFlag::Enum": [
      "Int",
      "PxControllerBehaviorFlag"
    ],
    "PxArticulationDriveType::Enum": [
      "Int",
      "PxArticulationDriveType"
    ],
    "PxBVH34BuildStrategy::Enum": [
      "Int",
      "PxBVH34BuildStrategy"
    ],
    "PxArticulationGpuDataType::Enum": [
      "Int",
      "PxArticulationGpuDataType"
    ],
    "PxZERO": [
      "Int",
      "PxZERO"
    ],
    "PxPvdSceneFlag::Enum": [
      "Int",
      "PxPvdSceneFlag"
    ],
    "PxHairSystemFlag::Enum": [
      "Int",
      "PxHairSystemFlag"
    ],
    "PxMeshPreprocessingFlag::Enum": [
      "Int",
      "PxMeshPreprocessingFlag"
    ],
    "PxScenePrunerIndex": [
      "UInt",
      "PxScenePrunerIndex"
    ]
  },
  "flags": [
    {
      "name": "PxBaseFlags",
      "enums_index": 7,
      "storage_type": "UShort"
    },
    {
      "name": "PxGeometryQueryFlags",
      "enums_index": 11,
      "storage_type": "UInt"
    },
    {
      "name": "PxConvexMeshGeometryFlags",
      "enums_index": 13,
      "storage_type": "UChar"
    },
    {
      "name": "PxMeshGeometryFlags",
      "enums_index": 14,
      "storage_type": "UChar"
    },
    {
      "name": "PxHitFlags",
      "enums_index": 16,
      "storage_type": "UShort"
    },
    {
      "name": "PxHeightFieldFlags",
      "enums_index": 19,
      "storage_type": "UShort"
    },
    {
      "name": "PxMeshMeshQueryFlags",
      "enums_index": 21,
      "storage_type": "UInt"
    },
    {
      "name": "PxMeshFlags",
      "enums_index": 22,
      "storage_type": "UShort"
    },
    {
      "name": "PxTriangleMeshFlags",
      "enums_index": 24,
      "storage_type": "UChar"
    },
    {
      "name": "PxTetrahedronMeshFlags",
      "enums_index": 25,
      "storage_type": "UChar"
    },
    {
      "name": "PxActorFlags",
      "enums_index": 26,
      "storage_type": "UChar"
    },
    {
      "name": "Px1DConstraintFlags",
      "enums_index": 29,
      "storage_type": "UShort"
    },
    {
      "name": "PxArticulationMotions",
      "enums_index": 36,
      "storage_type": "UChar"
    },
    {
      "name": "PxArticulationFlags",
      "enums_index": 38,
      "storage_type": "UChar"
    },
    {
      "name": "PxArticulationCacheFlags",
      "enums_index": 41,
      "storage_type": "UInt"
    },
    {
      "name": "PxArticulationSensorFlags",
      "enums_index": 42,
      "storage_type": "UChar"
    },
    {
      "name": "PxArticulationKinematicFlags",
      "enums_index": 43,
      "storage_type": "UChar"
    },
    {
      "name": "PxShapeFlags",
      "enums_index": 44,
      "storage_type": "UChar"
    },
    {
      "name": "PxRigidBodyFlags",
      "enums_index": 46,
      "storage_type": "UShort"
    },
    {
      "name": "PxConstraintFlags",
      "enums_index": 47,
      "storage_type": "UShort"
    },
    {
      "name": "PxDeletionEventFlags",
      "enums_index": 50,
      "storage_type": "UChar"
    },
    {
      "name": "PxPairFlags",
      "enums_index": 51,
      "storage_type": "UShort"
    },
    {
      "name": "PxFilterFlags",
      "enums_index": 52,
      "storage_type": "UShort"
    },
    {
      "name": "PxDataAccessFlags",
      "enums_index": 56,
      "storage_type": "UChar"
    },
    {
      "name": "PxMaterialFlags",
      "enums_index": 57,
      "storage_type": "UShort"
    },
    {
      "name": "PxParticleBufferFlags",
      "enums_index": 59,
      "storage_type": "UInt"
    },
    {
      "name": "PxParticlePhaseFlags",
      "enums_index": 60,
      "storage_type": "UInt"
    },
    {
      "name": "PxQueryFlags",
      "enums_index": 62,
      "storage_type": "UShort"
    },
    {
      "name": "PxRigidDynamicLockFlags",
      "enums_index": 64,
      "storage_type": "UChar"
    },
    {
      "name": "PxSceneFlags",
      "enums_index": 72,
      "storage_type": "UInt"
    },
    {
      "name": "PxHairSystemDataFlags",
      "enums_index": 76,
      "storage_type": "UInt"
    },
    {
      "name": "PxHairSystemFlags",
      "enums_index": 77,
      "storage_type": "UInt"
    },
    {
      "name": "PxActorCacheFlags",
      "enums_index": 78,
      "storage_type": "UShort"
    },
    {
      "name": "PxPvdSceneFlags",
      "enums_index": 79,
      "storage_type": "UChar"
    },
    {
      "name": "PxActorTypeFlags",
      "enums_index": 80,
      "storage_type": "UShort"
    },
    {
      "name": "PxContactPairHeaderFlags",
      "enums_index": 82,
      "storage_type": "UShort"
    },
    {
      "name": "PxContactPairFlags",
      "enums_index": 83,
      "storage_type": "UShort"
    },
    {
      "name": "PxTriggerPairFlags",
      "enums_index": 84,
      "storage_type": "UChar"
    },
    {
      "name": "PxSoftBodyDataFlags",
      "enums_index": 85,
      "storage_type": "UInt"
    },
    {
      "name": "PxSoftBodyFlags",
      "enums_index": 86,
      "storage_type": "UInt"
    },
    {
      "name": "PxControllerCollisionFlags",
      "enums_index": 89,
      "storage_type": "UChar"
    },
    {
      "name": "PxControllerBehaviorFlags",
      "enums_index": 91,
      "storage_type": "UChar"
    },
    {
      "name": "PxControllerDebugRenderFlags",
      "enums_index": 92,
      "storage_type": "UInt"
    },
    {
      "name": "PxConvexFlags",
      "enums_index": 94,
      "storage_type": "UShort"
    },
    {
      "name": "PxMeshPreprocessingFlags",
      "enums_index": 100,
      "storage_type": "UInt"
    },
    {
      "name": "PxDistanceJointFlags",
      "enums_index": 104,
      "storage_type": "UShort"
    },
    {
      "name": "PxPrismaticJointFlags",
      "enums_index": 105,
      "storage_type": "UShort"
    },
    {
      "name": "PxRevoluteJointFlags",
      "enums_index": 106,
      "storage_type": "UShort"
    },
    {
      "name": "PxSphericalJointFlags",
      "enums_index": 107,
      "storage_type": "UShort"
    },
    {
      "name": "PxD6JointDriveFlags",
      "enums_index": 111,
      "storage_type": "UInt"
    },
    {
      "name": "PxPvdInstrumentationFlags",
      "enums_index": 115,
      "storage_type": "UChar"
    }
  ],
  "flags_map": {
    "PxRigidDynamicLockFlags": "UChar",
    "PxConvexFlags": "UShort",
    "PxContactPairFlags": "UShort",
    "PxActorCacheFlags": "UShort",
    "PxHairSystemDataFlags": "UInt",
    "PxQueryFlags": "UShort",
    "PxControllerDebugRenderFlags": "UInt",
    "PxFilterFlags": "UShort",
    "PxMeshPreprocessingFlags": "UInt",
    "PxArticulationMotions": "UChar",
    "PxRigidBodyFlags": "UShort",
    "PxBaseFlags": "UShort",
    "PxArticulationKinematicFlags": "UChar",
    "PxMaterialFlags": "UShort",
    "PxHairSystemFlags": "UInt",
    "PxHeightFieldFlags": "UShort",
    "PxSceneFlags": "UInt",
    "PxPrismaticJointFlags": "UShort",
    "PxSoftBodyDataFlags": "UInt",
    "PxParticlePhaseFlags": "UInt",
    "PxArticulationSensorFlags": "UChar",
    "PxMeshMeshQueryFlags": "UInt",
    "PxTetrahedronMeshFlags": "UChar",
    "PxRevoluteJointFlags": "UShort",
    "PxConstraintFlags": "UShort",
    "PxControllerCollisionFlags": "UChar",
    "PxArticulationCacheFlags": "UInt",
    "PxPvdSceneFlags": "UChar",
    "PxActorFlags": "UChar",
    "PxGeometryQueryFlags": "UInt",
    "PxControllerBehaviorFlags": "UChar",
    "PxMeshGeometryFlags": "UChar",
    "PxConvexMeshGeometryFlags": "UChar",
    "PxArticulationFlags": "UChar",
    "PxDistanceJointFlags": "UShort",
    "PxContactPairHeaderFlags": "UShort",
    "PxDataAccessFlags": "UChar",
    "PxDeletionEventFlags": "UChar",
    "PxMeshFlags": "UShort",
    "PxSoftBodyFlags": "UInt",
    "PxActorTypeFlags": "UShort",
    "PxD6JointDriveFlags": "UInt",
    "PxParticleBufferFlags": "UInt",
    "PxPairFlags": "UShort",
    "PxSphericalJointFlags": "UShort",
    "PxPvdInstrumentationFlags": "UChar",
    "PxTriangleMeshFlags": "UChar",
    "PxHitFlags": "UShort",
    "PxTriggerPairFlags": "UChar",
    "PxShapeFlags": "UChar",
    "Px1DConstraintFlags": "UShort"
  },
  "type_defs": {
    "PxSceneQueryHit": {
      "Record": {
        "name": "PxQueryHit"
      }
    },
    "PxI32": {
      "Builtin": "Int"
    },
    "PxPhysicsInsertionCallback": {
      "Record": {
        "name": "PxInsertionCallback"
      }
    },
    "PxSQCompoundHandle": {
      "Builtin": "UInt"
    },
    "PxTriangleID": {
      "Builtin": "UInt"
    },
    "PxType": {
      "Builtin": "UShort"
    },
    "PxDominanceGroup": {
      "Builtin": "UChar"
    },
    "PxU64": {
      "Builtin": "ULong"
    },
    "PxF64": {
      "Builtin": "Double"
    },
    "PxSceneQueryFlag": {
      "Record": {
        "name": "PxHitFlag"
      }
    },
    "PxSQBuildStepHandle": {
      "Pointer": {
        "is_const": false,
        "is_pointee_const": false,
        "is_array_like": false,
        "pointee": {
          "Builtin": "Void"
        }
      }
    },
    "PxFilterObjectAttributes": {
      "Builtin": "UInt"
    },
    "PxTaskID": {
      "Builtin": "UInt"
    },
    "PxConstraintSolverPrep": "FunctionPointer",
    "PxRaycastThreadContext": {
      "Record": {
        "name": "PxQueryThreadContext"
      }
    },
    "PxSceneQueryFilterCallback": {
      "Record": {
        "name": "PxQueryFilterCallback"
      }
    },
    "PxExtended": {
      "Builtin": "Double"
    },
    "PxSceneQueryFlags": {
      "Flags": {
        "name": "PxHitFlags",
        "repr": "UShort"
      }
    },
    "PxBpFilterGroup": {
      "Builtin": "UInt"
    },
    "PxSceneQueryFilterData": {
      "Record": {
        "name": "PxQueryFilterData"
      }
    },
    "PxOverlapThreadContext": {
      "Record": {
        "name": "PxQueryThreadContext"
      }
    },
    "PxSweepThreadContext": {
      "Record": {
        "name": "PxQueryThreadContext"
      }
    },
    "PxClientID": {
      "Builtin": "UChar"
    },
    "PxConstraintVisualize": "FunctionPointer",
    "PxAgain": {
      "Builtin": "Bool"
    },
    "PxSceneQueryCache": {
      "Record": {
        "name": "PxQueryCache"
      }
    },
    "PxU32": {
      "Builtin": "UInt"
    },
    "PxMaterialTableIndex": {
      "Builtin": "UShort"
    },
    "PxFileHandle": {
      "Pointer": {
        "is_const": false,
        "is_pointee_const": false,
        "is_array_like": false,
        "pointee": {
          "Builtin": "Void"
        }
      }
    },
    "PxFEMMaterialTableIndex": {
      "Builtin": "UShort"
    },
    "PxSimulationFilterShader": "FunctionPointer",
    "PxBpIndex": {
      "Builtin": "UInt"
    },
    "PxTransform32": {
      "Record": {
        "name": "PxTransformPadded"
      }
    },
    "PxSQPrunerHandle": {
      "Builtin": "UInt"
    },
    "PxReal": {
      "Builtin": "Float"
    },
    "PxObstacleHandle": {
      "Builtin": "UInt"
    },
    "PxIntBool": {
      "Builtin": "Int"
    },
    "PxU16": {
      "Builtin": "UShort"
    },
    "PxSerialObjectId": {
      "Builtin": "ULong"
    },
    "PxI16": {
      "Builtin": "Short"
    },
    "PxVec3p": {
      "Record": {
        "name": "PxVec3Padded"
      }
    },
    "PxAggregateFilterHint": {
      "Builtin": "UInt"
    },
    "PxI64": {
      "Builtin": "Long"
    },
    "PxI8": {
      "Builtin": "Char"
    },
    "PxU8": {
      "Builtin": "UChar"
    },
    "PxCompileTimeAssert_Dummy": {
      "Array": {
        "element": {
          "Builtin": "Char"
        },
        "len": 1
      }
    },
    "PxF32": {
      "Builtin": "Float"
    }
  },
  "recs": [
    {
      "Forward": {
        "name": "PxAllocatorCallback"
      }
    },
    {
      "Forward": {
        "name": "PxErrorCallback"
      }
    },
    {
      "Forward": {
        "name": "PxAssertHandler"
      }
    },
    {
      "Forward": {
        "name": "PxInputStream"
      }
    },
    {
      "Forward": {
        "name": "PxInputData"
      }
    },
    {
      "Forward": {
        "name": "PxOutputStream"
      }
    },
    {
      "Forward": {
        "name": "PxVec2"
      }
    },
    {
      "Forward": {
        "name": "PxVec3"
      }
    },
    {
      "Forward": {
        "name": "PxVec4"
      }
    },
    {
      "Forward": {
        "name": "PxQuat"
      }
    },
    {
      "Forward": {
        "name": "PxMat33"
      }
    },
    {
      "Forward": {
        "name": "PxMat34"
      }
    },
    {
      "Forward": {
        "name": "PxMat44"
      }
    },
    {
      "Forward": {
        "name": "PxTransform"
      }
    },
    {
      "Forward": {
        "name": "PxPlane"
      }
    },
    {
      "Forward": {
        "name": "PxBounds3"
      }
    },
    {
      "Def": {
        "name": "PxAllocatorCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxAssertHandler",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxAllocationListener"
      }
    },
    {
      "Def": {
        "name": "PxFoundation",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxProfilerCallback"
      }
    },
    {
      "Def": {
        "name": "PxAllocator",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRawAllocator",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxVirtualAllocatorCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxVirtualAllocator",
        "has_vtable": false,
        "fields": [
          {
            "name": "mCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxVirtualAllocatorCallback"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mGroup",
            "kind": {
              "Builtin": "Int"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxUserAllocated",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTempAllocatorChunk",
        "has_vtable": false,
        "fields": [
          {
            "name": "mNext",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTempAllocatorChunk"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mPad",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UChar"
                },
                "len": 16
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "union",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTempAllocator",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxLogTwo"
      }
    },
    {
      "Forward": {
        "name": "PxUnConst"
      }
    },
    {
      "Def": {
        "name": "PxBitAndByte",
        "has_vtable": false,
        "fields": [
          {
            "name": "mData",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBitMap",
        "has_vtable": false,
        "fields": [
          {
            "name": "mMap",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mWordCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxVec3",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxVec3Padded",
        "has_vtable": false,
        "fields": [
          {
            "name": "padding",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxVec3",
            "has_vtable": false,
            "fields": [
              {
                "name": "x",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "y",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "z",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxQuat",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "w",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTransform",
        "has_vtable": false,
        "fields": [
          {
            "name": "q",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "p",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTransformPadded",
        "has_vtable": false,
        "fields": [
          {
            "name": "transform",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "padding",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMat33",
        "has_vtable": false,
        "fields": [
          {
            "name": "column0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "column1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "column2",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBounds3",
        "has_vtable": false,
        "fields": [
          {
            "name": "minimum",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maximum",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxErrorCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxAllocationListener",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadcastingAllocator",
        "has_vtable": true,
        "fields": [
          {
            "name": "mAllocator",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxAllocatorCallback"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": true
          },
          {
            "name": "mError",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxErrorCallback"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": true
          },
          {
            "name": "mListeners",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxAllocationListener"
                      }
                    }
                  }
                },
                "len": 16
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBufferUsed",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxAllocationListener"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxAllocatorCallback",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadcastingErrorCallback",
        "has_vtable": true,
        "fields": [
          {
            "name": "mListeners",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxErrorCallback"
                      }
                    }
                  }
                },
                "len": 16
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBufferUsed",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxErrorCallback"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxErrorCallback",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxHash"
      }
    },
    {
      "Def": {
        "name": "PxInputStream",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxInputData",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxInputStream",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxOutputStream",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxVec4",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "w",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMat44",
        "has_vtable": false,
        "fields": [
          {
            "name": "column0",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "column1",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "column2",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "column3",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPlane",
        "has_vtable": false,
        "fields": [
          {
            "name": "n",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "d",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "Interpolation",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMutexImpl",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxReadWriteLock",
        "has_vtable": false,
        "fields": [
          {
            "name": "mImpl",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxProfilerCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxProfileScoped",
        "has_vtable": false,
        "fields": [
          {
            "name": "mCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxProfilerCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mEventName",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Char"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mProfilerData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mContextId",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDetached",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSListEntry",
        "has_vtable": false,
        "fields": [
          {
            "name": "mNext",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSListEntry"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSListImpl",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSyncImpl",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRunnable",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCounterFrequencyToTensOfNanos",
        "has_vtable": false,
        "fields": [
          {
            "name": "mNumerator",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDenominator",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTime",
        "has_vtable": false,
        "fields": [
          {
            "name": "mLastTime",
            "kind": {
              "Builtin": "Double"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxVec2",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxStridedData",
        "has_vtable": false,
        "fields": [
          {
            "name": "stride",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBoundedData",
        "has_vtable": false,
        "fields": [
          {
            "name": "count",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxStridedData",
            "has_vtable": false,
            "fields": [
              {
                "name": "stride",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "data",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "stride",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDebugPoint",
        "has_vtable": false,
        "fields": [
          {
            "name": "pos",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDebugLine",
        "has_vtable": false,
        "fields": [
          {
            "name": "pos0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pos1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDebugTriangle",
        "has_vtable": false,
        "fields": [
          {
            "name": "pos0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pos1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pos2",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color2",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDebugText",
        "has_vtable": false,
        "fields": [
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "size",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "color",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "string",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Char"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRenderBuffer",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxBase"
      }
    },
    {
      "Forward": {
        "name": "PxSerializationContext"
      }
    },
    {
      "Forward": {
        "name": "PxRepXSerializer"
      }
    },
    {
      "Forward": {
        "name": "PxSerializer"
      }
    },
    {
      "Forward": {
        "name": "PxPhysics"
      }
    },
    {
      "Forward": {
        "name": "PxCollection"
      }
    },
    {
      "Def": {
        "name": "PxProcessPxBaseCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSerializationContext",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDeserializationContext",
        "has_vtable": true,
        "fields": [
          {
            "name": "mExtraDataAddress",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSerializationRegistry",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCollection",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxTypeInfo"
      }
    },
    {
      "Forward": {
        "name": "PxMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxFEMSoftBodyMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxFEMClothMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxPBDMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxFLIPMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxMPMMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxCustomMaterial"
      }
    },
    {
      "Forward": {
        "name": "PxConvexMesh"
      }
    },
    {
      "Forward": {
        "name": "PxTriangleMesh"
      }
    },
    {
      "Forward": {
        "name": "PxBVH33TriangleMesh"
      }
    },
    {
      "Forward": {
        "name": "PxBVH34TriangleMesh"
      }
    },
    {
      "Forward": {
        "name": "PxTetrahedronMesh"
      }
    },
    {
      "Forward": {
        "name": "PxHeightField"
      }
    },
    {
      "Forward": {
        "name": "PxActor"
      }
    },
    {
      "Forward": {
        "name": "PxRigidActor"
      }
    },
    {
      "Forward": {
        "name": "PxRigidBody"
      }
    },
    {
      "Forward": {
        "name": "PxRigidDynamic"
      }
    },
    {
      "Forward": {
        "name": "PxRigidStatic"
      }
    },
    {
      "Forward": {
        "name": "PxArticulationLink"
      }
    },
    {
      "Forward": {
        "name": "PxArticulationJointReducedCoordinate"
      }
    },
    {
      "Forward": {
        "name": "PxArticulationReducedCoordinate"
      }
    },
    {
      "Forward": {
        "name": "PxAggregate"
      }
    },
    {
      "Forward": {
        "name": "PxConstraint"
      }
    },
    {
      "Forward": {
        "name": "PxShape"
      }
    },
    {
      "Forward": {
        "name": "PxPruningStructure"
      }
    },
    {
      "Forward": {
        "name": "PxParticleSystem"
      }
    },
    {
      "Forward": {
        "name": "PxPBDParticleSystem"
      }
    },
    {
      "Forward": {
        "name": "PxFLIPParticleSystem"
      }
    },
    {
      "Forward": {
        "name": "PxMPMParticleSystem"
      }
    },
    {
      "Forward": {
        "name": "PxCustomParticleSystem"
      }
    },
    {
      "Forward": {
        "name": "PxSoftBody"
      }
    },
    {
      "Forward": {
        "name": "PxFEMCloth"
      }
    },
    {
      "Forward": {
        "name": "PxHairSystem"
      }
    },
    {
      "Forward": {
        "name": "PxParticleBuffer"
      }
    },
    {
      "Forward": {
        "name": "PxParticleAndDiffuseBuffer"
      }
    },
    {
      "Forward": {
        "name": "PxParticleClothBuffer"
      }
    },
    {
      "Forward": {
        "name": "PxParticleRigidBuffer"
      }
    },
    {
      "Def": {
        "name": "PxBase",
        "has_vtable": true,
        "fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRefCounted",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTolerancesScale",
        "has_vtable": false,
        "fields": [
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "speed",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxStringTable",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSerializer",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxMetaDataEntry",
        "has_vtable": false,
        "fields": [
          {
            "name": "type",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Char"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "name",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Char"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "offset",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "size",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "count",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "offsetSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "alignment",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxInsertionCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxBaseTask"
      }
    },
    {
      "Forward": {
        "name": "PxTask"
      }
    },
    {
      "Forward": {
        "name": "PxLightCpuTask"
      }
    },
    {
      "Forward": {
        "name": "PxCpuDispatcher"
      }
    },
    {
      "Def": {
        "name": "PxTaskManager",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCpuDispatcher",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBaseTask",
        "has_vtable": true,
        "fields": [
          {
            "name": "mContextID",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTm",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTaskManager"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTask",
        "has_vtable": true,
        "fields": [
          {
            "name": "mTaskID",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBaseTask",
            "has_vtable": true,
            "fields": [
              {
                "name": "mContextID",
                "kind": {
                  "Builtin": "ULong"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTm",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxTaskManager"
                      }
                    }
                  }
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mContextID",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTm",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTaskManager"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxLightCpuTask",
        "has_vtable": true,
        "fields": [
          {
            "name": "mCont",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxBaseTask"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mRefCount",
            "kind": {
              "Builtin": "Int"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBaseTask",
            "has_vtable": true,
            "fields": [
              {
                "name": "mContextID",
                "kind": {
                  "Builtin": "ULong"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTm",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxTaskManager"
                      }
                    }
                  }
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mContextID",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTm",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTaskManager"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBoxGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "halfExtents",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBVHRaycastCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBVHOverlapCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBVHTraversalCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBVH",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxGeomIndexPair"
      }
    },
    {
      "Def": {
        "name": "PxCapsuleGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "radius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "halfHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxHullPolygon",
        "has_vtable": false,
        "fields": [
          {
            "name": "mPlane",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Float"
                },
                "len": 4
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbVerts",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mIndexBase",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConvexMesh",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxMeshScale",
        "has_vtable": false,
        "fields": [
          {
            "name": "scale",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "rotation",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConvexMeshGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "scale",
            "kind": {
              "Record": {
                "name": "PxMeshScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "convexMesh",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxConvexMesh"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "meshFlags",
            "kind": {
              "Flags": {
                "name": "PxConvexMeshGeometryFlags",
                "repr": "UChar"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSphereGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "radius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPlaneGeometry",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTriangleMeshGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "scale",
            "kind": {
              "Record": {
                "name": "PxMeshScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "meshFlags",
            "kind": {
              "Flags": {
                "name": "PxMeshGeometryFlags",
                "repr": "UChar"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "triangleMesh",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTriangleMesh"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxHeightFieldGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "heightField",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxHeightField"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "heightScale",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "rowScale",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "columnScale",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "heightFieldFlags",
            "kind": {
              "Flags": {
                "name": "PxMeshGeometryFlags",
                "repr": "UChar"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxParticleSystemGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "mSolverType",
            "kind": {
              "Enum": {
                "name": "PxParticleSolverType",
                "cxx_qt": "PxParticleSolverType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxHairSystemGeometry",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedronMeshGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "tetrahedronMesh",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTetrahedronMesh"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxQueryHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxLocationHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHitFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "distance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxQueryHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeomRaycastHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "u",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "v",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxLocationHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "flags",
                "kind": {
                  "Flags": {
                    "name": "PxHitFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "position",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "normal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "distance",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxQueryHit",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "faceIndex",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHitFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "distance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeomOverlapHit",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxQueryHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeomSweepHit",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxLocationHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "flags",
                "kind": {
                  "Flags": {
                    "name": "PxHitFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "position",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "normal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "distance",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxQueryHit",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "faceIndex",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHitFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "distance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeomIndexPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "id0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "id1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxQueryThreadContext",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxContactBuffer"
      }
    },
    {
      "Forward": {
        "name": "PxRenderOutput"
      }
    },
    {
      "Forward": {
        "name": "PxMassProperties"
      }
    },
    {
      "Def": {
        "name": "PxCustomGeometryType",
        "has_vtable": false,
        "fields": [
          {
            "name": "mID",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxCustomGeometryCallbacks",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCustomGeometry",
        "has_vtable": false,
        "fields": [
          {
            "name": "callbacks",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxCustomGeometryCallbacks"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxGeometry",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mTypePadding",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mTypePadding",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeometryHolder",
        "has_vtable": false,
        "fields": [
          {
            "name": "bytes",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Char"
                },
                "len": 56
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGeometryQuery",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxHeightFieldSample",
        "has_vtable": false,
        "fields": [
          {
            "name": "height",
            "kind": {
              "Builtin": "Short"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex0",
            "kind": {
              "Record": {
                "name": "PxBitAndByte"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex1",
            "kind": {
              "Record": {
                "name": "PxBitAndByte"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxHeightFieldDesc"
      }
    },
    {
      "Def": {
        "name": "PxHeightField",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxHeightFieldDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "nbRows",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbColumns",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "format",
            "kind": {
              "Enum": {
                "name": "PxHeightFieldFormat",
                "cxx_qt": "PxHeightFieldFormat::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "samples",
            "kind": {
              "Record": {
                "name": "PxStridedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "convexEdgeThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHeightFieldFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxTriangle"
      }
    },
    {
      "Def": {
        "name": "PxMeshQuery",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSimpleTriangleMesh",
        "has_vtable": false,
        "fields": [
          {
            "name": "points",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "triangles",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxMeshFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTriangle",
        "has_vtable": false,
        "fields": [
          {
            "name": "verts",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Vec3"
                },
                "len": 3
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTrianglePadded",
        "has_vtable": false,
        "fields": [
          {
            "name": "padding",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxTriangle",
            "has_vtable": false,
            "fields": [
              {
                "name": "verts",
                "kind": {
                  "Array": {
                    "element": {
                      "Builtin": "Vec3"
                    },
                    "len": 3
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "verts",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Vec3"
                },
                "len": 3
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTriangleMesh",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBVH34TriangleMesh",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxTriangleMesh",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxRefCounted",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedron",
        "has_vtable": false,
        "fields": [
          {
            "name": "verts",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Vec3"
                },
                "len": 4
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSoftBodyAuxData",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedronMesh",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSoftBodyMesh",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCollisionMeshMappingData",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSoftBodyCollisionData",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedronMeshData",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSoftBodySimulationData",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxCollisionTetrahedronMeshData",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSimulationTetrahedronMeshData",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxScene"
      }
    },
    {
      "Def": {
        "name": "PxActor",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxAggregate",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSpringModifiers",
        "has_vtable": false,
        "fields": [
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRestitutionModifiers",
        "has_vtable": false,
        "fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "velocityThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "Px1DConstraintMods",
        "has_vtable": false,
        "fields": [
          {
            "name": "spring",
            "kind": {
              "Record": {
                "name": "PxSpringModifiers"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounce",
            "kind": {
              "Record": {
                "name": "PxRestitutionModifiers"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "union",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "Px1DConstraint",
        "has_vtable": false,
        "fields": [
          {
            "name": "linear0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "geometricError",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "velocityTarget",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linear1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "minImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mods",
            "kind": {
              "Record": {
                "name": "Px1DConstraintMods"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "forInternalUse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "solveHint",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintInvMassScale",
        "has_vtable": false,
        "fields": [
          {
            "name": "linear0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linear1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintVisualizer",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintConnector",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPoint",
        "has_vtable": false,
        "fields": [
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "separation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "point",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "targetVel",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialFlags",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "internalFaceIndex1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxTGSSolverBodyVel"
      }
    },
    {
      "Def": {
        "name": "PxSolverBody",
        "has_vtable": false,
        "fields": [
          {
            "name": "linearVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxSolverNormalProgress",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxSolverFrictionProgress",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angularState",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "solverProgress",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSolverBodyData",
        "has_vtable": false,
        "fields": [
          {
            "name": "linearVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "invMass",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angularVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "reportThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sqrtInvInertia",
            "kind": {
              "Builtin": "Mat33"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "penBiasClamp",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nodeIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxContactImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body2World",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintBatchHeader",
        "has_vtable": false,
        "fields": [
          {
            "name": "startIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stride",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "constraintType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSolverConstraintDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "bodyA",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyB",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyADataIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyBDataIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linkIndexA",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linkIndexB",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "constraint",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "writeBack",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "progressA",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "progressB",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "constraintLengthOver16",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "padding",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UChar"
                },
                "len": 10
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSolverConstraintPrepDescBase",
        "has_vtable": false,
        "fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSolverConstraintPrepDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "rows",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "Px1DConstraint"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numRows",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linBreakForce",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angBreakForce",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "minResponseThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "writeback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disablePreprocessing",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "improvedSlerp",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "driveLimitsAreForces",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "extendedLimits",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disableConstraint",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0WorldOffset",
            "kind": {
              "Record": {
                "name": "PxVec3Padded"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxSolverConstraintPrepDescBase",
            "has_vtable": false,
            "fields": [
              {
                "name": "invMassScales",
                "kind": {
                  "Record": {
                    "name": "PxConstraintInvMassScale"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "desc",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxSolverConstraintDesc"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "body0",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxSolverBody"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "body1",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxSolverBody"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "data0",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxSolverBodyData"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "data1",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxSolverBodyData"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bodyFrame0",
                "kind": {
                  "Record": {
                    "name": "PxTransform"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bodyFrame1",
                "kind": {
                  "Record": {
                    "name": "PxTransform"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bodyState0",
                "kind": {
                  "Enum": {
                    "name": "BodyState",
                    "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bodyState1",
                "kind": {
                  "Enum": {
                    "name": "BodyState",
                    "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSolverContactDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBody"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shapeInteraction",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contacts",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPoint"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasMaxImpulse",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disableStrongFriction",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasForceThresholds",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "restDistance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxCCDSeparation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionPtr",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionCount",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "startFrictionPatchIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numFrictionPatches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "startContactPatchIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numContactPatches",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "axisConstraintCount",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "offsetSlop",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintAllocator",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationLimit",
        "has_vtable": false,
        "fields": [
          {
            "name": "low",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "high",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationDrive",
        "has_vtable": false,
        "fields": [
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxForce",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "driveType",
            "kind": {
              "Enum": {
                "name": "PxArticulationDriveType",
                "cxx_qt": "PxArticulationDriveType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverBodyVel",
        "has_vtable": false,
        "fields": [
          {
            "name": "linearVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbStaticInteractions",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxDynamicPartition",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angularVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "partitionMask",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "deltaAngDt",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxAngVel",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "deltaLinDt",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "lockFlags",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "isKinematic",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverBodyTxInertia",
        "has_vtable": false,
        "fields": [
          {
            "name": "deltaBody2World",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sqrtInvInertia",
            "kind": {
              "Builtin": "Mat33"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverBodyData",
        "has_vtable": false,
        "fields": [
          {
            "name": "originalLinearVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxContactImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "originalAngularVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "penBiasClamp",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "invMass",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nodeIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "reportThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverConstraintPrepDescBase",
        "has_vtable": false,
        "fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverConstraintPrepDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "rows",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "Px1DConstraint"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numRows",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linBreakForce",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angBreakForce",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "minResponseThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "writeback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disablePreprocessing",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "improvedSlerp",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "driveLimitsAreForces",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "extendedLimits",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disableConstraint",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0WorldOffset",
            "kind": {
              "Record": {
                "name": "PxVec3Padded"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "cA2w",
            "kind": {
              "Record": {
                "name": "PxVec3Padded"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "cB2w",
            "kind": {
              "Record": {
                "name": "PxVec3Padded"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTGSSolverContactDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "invMassScales",
            "kind": {
              "Record": {
                "name": "PxConstraintInvMassScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "desc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSolverConstraintDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyVel"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body0TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "body1TxI",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyTxInertia"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyData1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxTGSSolverBodyData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame0",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyFrame1",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState0",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bodyState1",
            "kind": {
              "Enum": {
                "name": "BodyState",
                "cxx_qt": "PxSolverConstraintPrepDescBase::BodyState",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shapeInteraction",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contacts",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPoint"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasMaxImpulse",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "disableStrongFriction",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasForceThresholds",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "restDistance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxCCDSeparation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionPtr",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionCount",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "startFrictionPatchIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numFrictionPatches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "startContactPatchIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numContactPatches",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "axisConstraintCount",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "torsionalPatchRadius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "minTorsionalPatchRadius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "offsetSlop",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxArticulationSpatialTendon"
      }
    },
    {
      "Forward": {
        "name": "PxArticulationFixedTendon"
      }
    },
    {
      "Def": {
        "name": "PxArticulationTendonLimit",
        "has_vtable": false,
        "fields": [
          {
            "name": "lowLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "highLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationAttachment",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationTendonJoint",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationTendon",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationSpatialTendon",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxArticulationTendon",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationFixedTendon",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxArticulationTendon",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSpatialForce",
        "has_vtable": false,
        "fields": [
          {
            "name": "force",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "torque",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSpatialVelocity",
        "has_vtable": false,
        "fields": [
          {
            "name": "linear",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationRootLinkData",
        "has_vtable": false,
        "fields": [
          {
            "name": "transform",
            "kind": {
              "Record": {
                "name": "PxTransform"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldLinVel",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldAngVel",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldLinAccel",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldAngAccel",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationCache",
        "has_vtable": false,
        "fields": [
          {
            "name": "externalForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSpatialForce"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "denseJacobian",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "massMatrix",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "jointVelocity",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "jointAcceleration",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "jointPosition",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "jointForce",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "jointSolverForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linkVelocity",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSpatialVelocity"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linkAcceleration",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSpatialVelocity"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "rootLinkData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxArticulationRootLinkData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sensorForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSpatialForce"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "coefficientMatrix",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "lambda",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scratchMemory",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scratchAllocator",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "version",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationSensor",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationReducedCoordinate",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationJointReducedCoordinate",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxFilterData"
      }
    },
    {
      "Forward": {
        "name": "PxBaseMaterial"
      }
    },
    {
      "Def": {
        "name": "PxShape",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidActor",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxActor",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxNodeIndex",
        "has_vtable": false,
        "fields": [
          {
            "name": "ind",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidBody",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRigidActor",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxActor",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "userData",
                    "kind": {
                      "Pointer": {
                        "is_const": false,
                        "is_pointee_const": false,
                        "is_array_like": false,
                        "pointee": {
                          "Builtin": "Void"
                        }
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxArticulationLink",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRigidBody",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxRigidActor",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxActor",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "userData",
                        "kind": {
                          "Pointer": {
                            "is_const": false,
                            "is_pointee_const": false,
                            "is_array_like": false,
                            "pointee": {
                              "Builtin": "Void"
                            }
                          }
                        },
                        "is_public": true,
                        "is_reference": false
                      }
                    ],
                    "bases": [
                      {
                        "name": "PxBase",
                        "has_vtable": true,
                        "fields": [
                          {
                            "name": "mConcreteType",
                            "kind": {
                              "Builtin": "UShort"
                            },
                            "is_public": false,
                            "is_reference": false
                          },
                          {
                            "name": "mBaseFlags",
                            "kind": {
                              "Flags": {
                                "name": "PxBaseFlags",
                                "repr": "UShort"
                              }
                            },
                            "is_public": false,
                            "is_reference": false
                          },
                          {
                            "name": "mBuiltInRefCount",
                            "kind": {
                              "Builtin": "UInt"
                            },
                            "is_public": false,
                            "is_reference": false
                          }
                        ],
                        "bases": [],
                        "base_fields": [],
                        "calc_layout": true,
                        "ast_tag_used": "class",
                        "def_data": {
                          "dtor": {
                            "irrelevant": false,
                            "simple": false
                          },
                          "isAbstract": true,
                          "isPolymorphic": true
                        }
                      }
                    ],
                    "base_fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "userData",
                    "kind": {
                      "Pointer": {
                        "is_const": false,
                        "is_pointee_const": false,
                        "is_array_like": false,
                        "pointee": {
                          "Builtin": "Void"
                        }
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxConeLimitedConstraint",
        "has_vtable": false,
        "fields": [
          {
            "name": "mAxis",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mAngle",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mLowLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mHighLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConeLimitParams",
        "has_vtable": false,
        "fields": [
          {
            "name": "lowHighLimits",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "axisAngle",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintShaderTable",
        "has_vtable": false,
        "fields": [
          {
            "name": "solverPrep",
            "kind": "FunctionPointer",
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "visualize",
            "kind": "FunctionPointer",
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flag",
            "kind": {
              "Enum": {
                "name": "PxConstraintFlag",
                "cxx_qt": "PxConstraintFlag::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraint",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxMassModificationProps",
        "has_vtable": false,
        "fields": [
          {
            "name": "mInvMassScale0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mInvInertiaScale0",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mInvMassScale1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mInvInertiaScale1",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPatch",
        "has_vtable": false,
        "fields": [
          {
            "name": "mMassModification",
            "kind": {
              "Record": {
                "name": "PxMassModificationProps"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "startContactIndex",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbContacts",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialFlags",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "internalFlags",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex0",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex1",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UShort"
                },
                "len": 5
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContact",
        "has_vtable": false,
        "fields": [
          {
            "name": "contact",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "separation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxExtendedContact",
        "has_vtable": false,
        "fields": [
          {
            "name": "targetVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxContact",
            "has_vtable": false,
            "fields": [
              {
                "name": "contact",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "separation",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "contact",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "separation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxModifiableContact",
        "has_vtable": false,
        "fields": [
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialFlags",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex0",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "materialIndex1",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicFriction",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxExtendedContact",
            "has_vtable": false,
            "fields": [
              {
                "name": "targetVelocity",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "maxImpulse",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxContact",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "contact",
                    "kind": {
                      "Builtin": "Vec3"
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "separation",
                    "kind": {
                      "Builtin": "Float"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "contact",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "separation",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "contact",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "separation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "targetVelocity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxImpulse",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactStreamIterator",
        "has_vtable": false,
        "fields": [
          {
            "name": "zero",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "patch",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPatch"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contact",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContact"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "faceIndice",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "totalPatches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "totalContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nextContactIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nextPatchIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPatchHeaderSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPointSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mStreamFormat",
            "kind": {
              "Enum": {
                "name": "StreamFormat",
                "cxx_qt": "PxContactStreamIterator::StreamFormat",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "forceNoResponse",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pointStepped",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasFaceIndices",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGpuContactPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "contactPatches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPoints",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactForces",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "transformCacheRef0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "transformCacheRef1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nodeIndex0",
            "kind": {
              "Record": {
                "name": "PxNodeIndex"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nodeIndex1",
            "kind": {
              "Record": {
                "name": "PxNodeIndex"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor0",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor1",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbContacts",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbPatches",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactSet",
        "has_vtable": false,
        "fields": [
          {
            "name": "mCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mContacts",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxModifiableContact"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactModifyPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "actor",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxRigidActor"
                      }
                    }
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shape",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": true,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxShape"
                      }
                    }
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "transform",
            "kind": {
              "Array": {
                "element": {
                  "Record": {
                    "name": "PxTransform"
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contacts",
            "kind": {
              "Record": {
                "name": "PxContactSet"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactModifyCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCCDContactModifyCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDeletionListener",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBaseMaterial",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxRefCounted",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxFEMMaterial",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBaseMaterial",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxRefCounted",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxFilterData",
        "has_vtable": false,
        "fields": [
          {
            "name": "word0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "word1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "word2",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "word3",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSimulationFilterCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxParticleRigidFilterPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "mID0",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mID1",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxLockedData",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxMaterial",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBaseMaterial",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxRefCounted",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxGpuParticleBufferIndexPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "systemIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bufferIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxCudaContextManager"
      }
    },
    {
      "Forward": {
        "name": "PxParticleRigidAttachment"
      }
    },
    {
      "Def": {
        "name": "PxParticleVolume",
        "has_vtable": false,
        "fields": [
          {
            "name": "bound",
            "kind": {
              "Record": {
                "name": "PxBounds3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "particleIndicesOffset",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numParticles",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDiffuseParticleParams",
        "has_vtable": false,
        "fields": [
          {
            "name": "threshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "lifetime",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "airDrag",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bubbleDrag",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "buoyancy",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "kineticEnergyWeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pressureWeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "divergenceWeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "collisionDecay",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "useAccurateVelocity",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxParticleSpring",
        "has_vtable": false,
        "fields": [
          {
            "name": "ind0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "ind1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pad",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxParticleMaterial",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBaseMaterial",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxRefCounted",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxSceneDesc"
      }
    },
    {
      "Forward": {
        "name": "PxPvd"
      }
    },
    {
      "Forward": {
        "name": "PxOmniPvd"
      }
    },
    {
      "Def": {
        "name": "PxPhysics",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxActorShape",
        "has_vtable": false,
        "fields": [
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRaycastHit",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxGeomRaycastHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "u",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "v",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxLocationHit",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "flags",
                    "kind": {
                      "Flags": {
                        "name": "PxHitFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "position",
                    "kind": {
                      "Builtin": "Vec3"
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "normal",
                    "kind": {
                      "Builtin": "Vec3"
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "distance",
                    "kind": {
                      "Builtin": "Float"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [
                  {
                    "name": "PxQueryHit",
                    "has_vtable": false,
                    "fields": [
                      {
                        "name": "faceIndex",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": true,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "struct",
                    "def_data": {
                      "dtor": {
                        "irrelevant": true,
                        "simple": true
                      },
                      "isAbstract": false,
                      "isPolymorphic": false
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "faceIndex",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "flags",
                "kind": {
                  "Flags": {
                    "name": "PxHitFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "position",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "normal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "distance",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          },
          {
            "name": "PxActorShape",
            "has_vtable": false,
            "fields": [
              {
                "name": "actor",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxRigidActor"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "shape",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxShape"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHitFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "distance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "u",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "v",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxOverlapHit",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxGeomOverlapHit",
            "has_vtable": false,
            "fields": [],
            "bases": [
              {
                "name": "PxQueryHit",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "faceIndex",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          },
          {
            "name": "PxActorShape",
            "has_vtable": false,
            "fields": [
              {
                "name": "actor",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxRigidActor"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "shape",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxShape"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSweepHit",
        "has_vtable": false,
        "fields": [],
        "bases": [
          {
            "name": "PxGeomSweepHit",
            "has_vtable": false,
            "fields": [],
            "bases": [
              {
                "name": "PxLocationHit",
                "has_vtable": false,
                "fields": [
                  {
                    "name": "flags",
                    "kind": {
                      "Flags": {
                        "name": "PxHitFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "position",
                    "kind": {
                      "Builtin": "Vec3"
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "normal",
                    "kind": {
                      "Builtin": "Vec3"
                    },
                    "is_public": true,
                    "is_reference": false
                  },
                  {
                    "name": "distance",
                    "kind": {
                      "Builtin": "Float"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [
                  {
                    "name": "PxQueryHit",
                    "has_vtable": false,
                    "fields": [
                      {
                        "name": "faceIndex",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": true,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "struct",
                    "def_data": {
                      "dtor": {
                        "irrelevant": true,
                        "simple": true
                      },
                      "isAbstract": false,
                      "isPolymorphic": false
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "faceIndex",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "struct",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [
              {
                "name": "faceIndex",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "flags",
                "kind": {
                  "Flags": {
                    "name": "PxHitFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "position",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "normal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "distance",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          },
          {
            "name": "PxActorShape",
            "has_vtable": false,
            "fields": [
              {
                "name": "actor",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxRigidActor"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "shape",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxShape"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxHitFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "distance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRaycastCallback",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxRaycastHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRaycastHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxOverlapCallback",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxOverlapHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxOverlapHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSweepCallback",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxSweepHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSweepHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRaycastBuffer",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxRaycastHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRaycastHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxOverlapBuffer",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxOverlapHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxOverlapHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSweepBuffer",
        "has_vtable": true,
        "fields": [
          {
            "name": "block",
            "kind": {
              "Record": {
                "name": "PxSweepHit"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "hasBlock",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSweepHit"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxQueryCache",
        "has_vtable": false,
        "fields": [
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "faceIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxQueryFilterData",
        "has_vtable": false,
        "fields": [
          {
            "name": "data",
            "kind": {
              "Record": {
                "name": "PxFilterData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxQueryFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxQueryFilterCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidDynamic",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRigidBody",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxRigidActor",
                "has_vtable": true,
                "fields": [],
                "bases": [
                  {
                    "name": "PxActor",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "userData",
                        "kind": {
                          "Pointer": {
                            "is_const": false,
                            "is_pointee_const": false,
                            "is_array_like": false,
                            "pointee": {
                              "Builtin": "Void"
                            }
                          }
                        },
                        "is_public": true,
                        "is_reference": false
                      }
                    ],
                    "bases": [
                      {
                        "name": "PxBase",
                        "has_vtable": true,
                        "fields": [
                          {
                            "name": "mConcreteType",
                            "kind": {
                              "Builtin": "UShort"
                            },
                            "is_public": false,
                            "is_reference": false
                          },
                          {
                            "name": "mBaseFlags",
                            "kind": {
                              "Flags": {
                                "name": "PxBaseFlags",
                                "repr": "UShort"
                              }
                            },
                            "is_public": false,
                            "is_reference": false
                          },
                          {
                            "name": "mBuiltInRefCount",
                            "kind": {
                              "Builtin": "UInt"
                            },
                            "is_public": false,
                            "is_reference": false
                          }
                        ],
                        "bases": [],
                        "base_fields": [],
                        "calc_layout": true,
                        "ast_tag_used": "class",
                        "def_data": {
                          "dtor": {
                            "irrelevant": false,
                            "simple": false
                          },
                          "isAbstract": true,
                          "isPolymorphic": true
                        }
                      }
                    ],
                    "base_fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "userData",
                    "kind": {
                      "Pointer": {
                        "is_const": false,
                        "is_pointee_const": false,
                        "is_array_like": false,
                        "pointee": {
                          "Builtin": "Void"
                        }
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidStatic",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxRigidActor",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxActor",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "userData",
                    "kind": {
                      "Pointer": {
                        "is_const": false,
                        "is_pointee_const": false,
                        "is_array_like": false,
                        "pointee": {
                          "Builtin": "Void"
                        }
                      }
                    },
                    "is_public": true,
                    "is_reference": false
                  }
                ],
                "bases": [
                  {
                    "name": "PxBase",
                    "has_vtable": true,
                    "fields": [
                      {
                        "name": "mConcreteType",
                        "kind": {
                          "Builtin": "UShort"
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBaseFlags",
                        "kind": {
                          "Flags": {
                            "name": "PxBaseFlags",
                            "repr": "UShort"
                          }
                        },
                        "is_public": false,
                        "is_reference": false
                      },
                      {
                        "name": "mBuiltInRefCount",
                        "kind": {
                          "Builtin": "UInt"
                        },
                        "is_public": false,
                        "is_reference": false
                      }
                    ],
                    "bases": [],
                    "base_fields": [],
                    "calc_layout": true,
                    "ast_tag_used": "class",
                    "def_data": {
                      "dtor": {
                        "irrelevant": false,
                        "simple": false
                      },
                      "isAbstract": true,
                      "isPolymorphic": true
                    }
                  }
                ],
                "base_fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxSceneQuerySystem"
      }
    },
    {
      "Def": {
        "name": "PxSceneQueryDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "staticStructure",
            "kind": {
              "Enum": {
                "name": "PxPruningStructureType",
                "cxx_qt": "PxPruningStructureType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicStructure",
            "kind": {
              "Enum": {
                "name": "PxPruningStructureType",
                "cxx_qt": "PxPruningStructureType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicTreeRebuildRateHint",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicTreeSecondaryPruner",
            "kind": {
              "Enum": {
                "name": "PxDynamicTreeSecondaryPruner",
                "cxx_qt": "PxDynamicTreeSecondaryPruner::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticBVHBuildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVHBuildStrategy",
                "cxx_qt": "PxBVHBuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicBVHBuildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVHBuildStrategy",
                "cxx_qt": "PxBVHBuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticNbObjectsPerNode",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicNbObjectsPerNode",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sceneQueryUpdateMode",
            "kind": {
              "Enum": {
                "name": "PxSceneQueryUpdateMode",
                "cxx_qt": "PxSceneQueryUpdateMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneQuerySystemBase",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneSQSystem",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxSceneQuerySystemBase",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneQuerySystem",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxSceneQuerySystemBase",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseRegion",
        "has_vtable": false,
        "fields": [
          {
            "name": "mBounds",
            "kind": {
              "Record": {
                "name": "PxBounds3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mUserData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseRegionInfo",
        "has_vtable": false,
        "fields": [
          {
            "name": "mRegion",
            "kind": {
              "Record": {
                "name": "PxBroadPhaseRegion"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbStaticObjects",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbDynamicObjects",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mActive",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mOverlap",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseCaps",
        "has_vtable": false,
        "fields": [
          {
            "name": "mMaxNbRegions",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxBroadPhaseType",
                "cxx_qt": "PxBroadPhaseType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mContextID",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mFoundLostPairsCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDiscardStaticVsKinematic",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDiscardKinematicVsKinematic",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseUpdateData",
        "has_vtable": false,
        "fields": [
          {
            "name": "mCreated",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbCreated",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mUpdated",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbUpdated",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mRemoved",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbRemoved",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mBounds",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxBounds3"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mGroups",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDistances",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhasePair",
        "has_vtable": false,
        "fields": [
          {
            "name": "mID0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mID1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseResults",
        "has_vtable": false,
        "fields": [
          {
            "name": "mNbCreatedPairs",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mCreatedPairs",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxBroadPhasePair"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mNbDeletedPairs",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mDeletedPairs",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxBroadPhasePair"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseRegions",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhase",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxAABBManager",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxBroadPhaseCallback"
      }
    },
    {
      "Forward": {
        "name": "PxSimulationEventCallback"
      }
    },
    {
      "Def": {
        "name": "PxSceneLimits",
        "has_vtable": false,
        "fields": [
          {
            "name": "maxNbActors",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbStaticShapes",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbDynamicShapes",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbAggregates",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbConstraints",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbRegions",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbBroadPhaseOverlaps",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxgDynamicsMemoryConfig",
        "has_vtable": false,
        "fields": [
          {
            "name": "tempBufferCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxRigidContactCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxRigidPatchCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "heapCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "foundLostPairsCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "foundLostAggregatePairsCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "totalAggregatePairsCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxSoftBodyContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxFemClothContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxParticleContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "collisionStackSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxHairContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "gravity",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "simulationEventCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSimulationEventCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactModifyCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactModifyCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "ccdContactModifyCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxCCDContactModifyCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "filterShaderData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "filterShaderDataSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "filterShader",
            "kind": "FunctionPointer",
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "filterCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSimulationFilterCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "kineKineFilteringMode",
            "kind": {
              "Enum": {
                "name": "PxPairFilteringMode",
                "cxx_qt": "PxPairFilteringMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticKineFilteringMode",
            "kind": {
              "Enum": {
                "name": "PxPairFilteringMode",
                "cxx_qt": "PxPairFilteringMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "broadPhaseType",
            "kind": {
              "Enum": {
                "name": "PxBroadPhaseType",
                "cxx_qt": "PxBroadPhaseType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "broadPhaseCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxBroadPhaseCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "limits",
            "kind": {
              "Record": {
                "name": "PxSceneLimits"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionType",
            "kind": {
              "Enum": {
                "name": "PxFrictionType",
                "cxx_qt": "PxFrictionType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "solverType",
            "kind": {
              "Enum": {
                "name": "PxSolverType",
                "cxx_qt": "PxSolverType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThresholdVelocity",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionOffsetThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "frictionCorrelationDistance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxSceneFlags",
                "repr": "UInt"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "cpuDispatcher",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxCpuDispatcher"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "solverBatchSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "solverArticulationBatchSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbContactDataBlocks",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxNbContactDataBlocks",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxBiasCoefficient",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactReportStreamBufferSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "ccdMaxPasses",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "ccdThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "ccdMaxSeparation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "wakeCounterResetValue",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sanityBounds",
            "kind": {
              "Record": {
                "name": "PxBounds3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuDynamicsConfig",
            "kind": {
              "Record": {
                "name": "PxgDynamicsMemoryConfig"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMaxNumPartitions",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMaxNumStaticPartitions",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuComputeVersion",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPairSlabSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sceneQuerySystem",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSceneQuerySystem"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "tolerancesScale",
            "kind": {
              "Record": {
                "name": "PxTolerancesScale"
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxSceneQueryDesc",
            "has_vtable": false,
            "fields": [
              {
                "name": "staticStructure",
                "kind": {
                  "Enum": {
                    "name": "PxPruningStructureType",
                    "cxx_qt": "PxPruningStructureType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dynamicStructure",
                "kind": {
                  "Enum": {
                    "name": "PxPruningStructureType",
                    "cxx_qt": "PxPruningStructureType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dynamicTreeRebuildRateHint",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dynamicTreeSecondaryPruner",
                "kind": {
                  "Enum": {
                    "name": "PxDynamicTreeSecondaryPruner",
                    "cxx_qt": "PxDynamicTreeSecondaryPruner::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "staticBVHBuildStrategy",
                "kind": {
                  "Enum": {
                    "name": "PxBVHBuildStrategy",
                    "cxx_qt": "PxBVHBuildStrategy::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dynamicBVHBuildStrategy",
                "kind": {
                  "Enum": {
                    "name": "PxBVHBuildStrategy",
                    "cxx_qt": "PxBVHBuildStrategy::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "staticNbObjectsPerNode",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dynamicNbObjectsPerNode",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "sceneQueryUpdateMode",
                "kind": {
                  "Enum": {
                    "name": "PxSceneQueryUpdateMode",
                    "cxx_qt": "PxSceneQueryUpdateMode::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "staticStructure",
            "kind": {
              "Enum": {
                "name": "PxPruningStructureType",
                "cxx_qt": "PxPruningStructureType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicStructure",
            "kind": {
              "Enum": {
                "name": "PxPruningStructureType",
                "cxx_qt": "PxPruningStructureType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicTreeRebuildRateHint",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicTreeSecondaryPruner",
            "kind": {
              "Enum": {
                "name": "PxDynamicTreeSecondaryPruner",
                "cxx_qt": "PxDynamicTreeSecondaryPruner::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticBVHBuildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVHBuildStrategy",
                "cxx_qt": "PxBVHBuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicBVHBuildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVHBuildStrategy",
                "cxx_qt": "PxBVHBuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "staticNbObjectsPerNode",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dynamicNbObjectsPerNode",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sceneQueryUpdateMode",
            "kind": {
              "Enum": {
                "name": "PxSceneQueryUpdateMode",
                "cxx_qt": "PxSceneQueryUpdateMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSimulationStatistics",
        "has_vtable": false,
        "fields": [
          {
            "name": "nbActiveConstraints",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbActiveDynamicBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbActiveKinematicBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbStaticBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbDynamicBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbKinematicBodies",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbShapes",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UInt"
                },
                "len": 11
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbAggregates",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbArticulations",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbAxisSolverConstraints",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "compressedContactSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "requiredContactConstraintMemory",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "peakConstraintMemory",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbDiscreteContactPairsTotal",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbDiscreteContactPairsWithCacheHits",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbDiscreteContactPairsWithContacts",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbNewPairs",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbLostPairs",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbNewTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbLostTouches",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbPartitions",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemParticles",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemSoftBodies",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemFEMCloths",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHairSystems",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeap",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapBroadPhase",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapNarrowPhase",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSolver",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapArticulation",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulation",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulationArticulation",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulationParticles",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulationSoftBody",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulationFEMCloth",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSimulationHairSystem",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapParticles",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapSoftBodies",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapFEMCloths",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapHairSystems",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gpuMemHeapOther",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbBroadPhaseAdds",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbBroadPhaseRemoves",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbDiscreteContactPairs",
            "kind": {
              "Array": {
                "element": {
                  "Array": {
                    "element": {
                      "Builtin": "UInt"
                    },
                    "len": 11
                  }
                },
                "len": 11
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbCCDPairs",
            "kind": {
              "Array": {
                "element": {
                  "Array": {
                    "element": {
                      "Builtin": "UInt"
                    },
                    "len": 11
                  }
                },
                "len": 11
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbModifiedContactPairs",
            "kind": {
              "Array": {
                "element": {
                  "Array": {
                    "element": {
                      "Builtin": "UInt"
                    },
                    "len": 11
                  }
                },
                "len": 11
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTriggerPairs",
            "kind": {
              "Array": {
                "element": {
                  "Array": {
                    "element": {
                      "Builtin": "UInt"
                    },
                    "len": 11
                  }
                },
                "len": 11
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGpuBodyData",
        "has_vtable": false,
        "fields": [
          {
            "name": "quat",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pos",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linVel",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angVel",
            "kind": {
              "Builtin": "Vec4"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxGpuActorPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "srcIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nodeIndex",
            "kind": {
              "Record": {
                "name": "PxNodeIndex"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxIndexDataPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "index",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "data",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPvdSceneClient",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxContactPairHeader"
      }
    },
    {
      "Def": {
        "name": "PxDominanceGroupPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "dominance0",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dominance1",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxScene",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxSceneSQSystem",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxSceneQuerySystemBase",
                "has_vtable": true,
                "fields": [],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneReadLock",
        "has_vtable": false,
        "fields": [
          {
            "name": "mScene",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxScene"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": true
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneWriteLock",
        "has_vtable": false,
        "fields": [
          {
            "name": "mScene",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxScene"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": true
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairExtraDataItem",
        "has_vtable": false,
        "fields": [
          {
            "name": "type",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairVelocity",
        "has_vtable": false,
        "fields": [
          {
            "name": "linearVelocity",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Vec3"
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angularVelocity",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Vec3"
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxContactPairExtraDataItem",
            "has_vtable": false,
            "fields": [
              {
                "name": "type",
                "kind": {
                  "Builtin": "UChar"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "type",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairPose",
        "has_vtable": false,
        "fields": [
          {
            "name": "globalPose",
            "kind": {
              "Array": {
                "element": {
                  "Record": {
                    "name": "PxTransform"
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxContactPairExtraDataItem",
            "has_vtable": false,
            "fields": [
              {
                "name": "type",
                "kind": {
                  "Builtin": "UChar"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "type",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairIndex",
        "has_vtable": false,
        "fields": [
          {
            "name": "index",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxContactPairExtraDataItem",
            "has_vtable": false,
            "fields": [
              {
                "name": "type",
                "kind": {
                  "Builtin": "UChar"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "type",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairExtraDataIterator",
        "has_vtable": false,
        "fields": [
          {
            "name": "currPtr",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "endPtr",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "preSolverVelocity",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPairVelocity"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "postSolverVelocity",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPairVelocity"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "eventPose",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPairPose"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPairIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxContactPair"
      }
    },
    {
      "Def": {
        "name": "PxContactPairHeader",
        "has_vtable": false,
        "fields": [
          {
            "name": "actors",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxActor"
                      }
                    }
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "extraDataStream",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "extraDataStreamSize",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxContactPairHeaderFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "pairs",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxContactPair"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbPairs",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPairPoint",
        "has_vtable": false,
        "fields": [
          {
            "name": "position",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "separation",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "normal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "internalFaceIndex0",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "impulse",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "internalFaceIndex1",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "shapes",
            "kind": {
              "Array": {
                "element": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxShape"
                      }
                    }
                  }
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPatches",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactPoints",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactImpulses",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Float"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "requiredBufferSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactCount",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "patchCount",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactStreamSize",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxContactPairFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "events",
            "kind": {
              "Flags": {
                "name": "PxPairFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "internalData",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UInt"
                },
                "len": 2
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTriggerPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "triggerShape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "triggerActor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "otherShape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "otherActor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "status",
            "kind": {
              "Enum": {
                "name": "PxPairFlag",
                "cxx_qt": "PxPairFlag::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxTriggerPairFlags",
                "repr": "UChar"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConstraintInfo",
        "has_vtable": false,
        "fields": [
          {
            "name": "constraint",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxConstraint"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "externalReference",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "type",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSimulationEventCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxFEMParameters",
        "has_vtable": false,
        "fields": [
          {
            "name": "velocityDamping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "settlingThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sleepThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sleepDamping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "selfCollisionFilterDistance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "selfCollisionStressTolerance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPruningStructure",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxExtendedVec3",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "Double"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "Double"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "Double"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxControllerManager"
      }
    },
    {
      "Def": {
        "name": "PxObstacle",
        "has_vtable": false,
        "fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mUserData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mRot",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBoxObstacle",
        "has_vtable": false,
        "fields": [
          {
            "name": "mHalfExtents",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxObstacle",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mUserData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mPos",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mRot",
                "kind": {
                  "Record": {
                    "name": "PxQuat"
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mUserData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mRot",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxCapsuleObstacle",
        "has_vtable": false,
        "fields": [
          {
            "name": "mHalfHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mRadius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxObstacle",
            "has_vtable": false,
            "fields": [
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxGeometryType",
                    "cxx_qt": "PxGeometryType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mUserData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mPos",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mRot",
                "kind": {
                  "Record": {
                    "name": "PxQuat"
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxGeometryType",
                "cxx_qt": "PxGeometryType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mUserData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mRot",
            "kind": {
              "Record": {
                "name": "PxQuat"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxObstacleContext",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxController"
      }
    },
    {
      "Forward": {
        "name": "PxControllerBehaviorCallback"
      }
    },
    {
      "Def": {
        "name": "PxControllerState",
        "has_vtable": false,
        "fields": [
          {
            "name": "deltaXP",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touchedShape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touchedActor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "touchedObstacleHandle",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "collisionFlags",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "standOnAnotherCCT",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "standOnObstacle",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "isMovingUp",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerStats",
        "has_vtable": false,
        "fields": [
          {
            "name": "nbIterations",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbFullUpdates",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbPartialUpdates",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nbTessellation",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "controller",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxController"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldNormal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dir",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerShapeHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "shape",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxShape"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "actor",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxRigidActor"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "triangleIndex",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxControllerHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "controller",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxController"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldPos",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldNormal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dir",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "length",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "controller",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxController"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldNormal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dir",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllersHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "other",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxController"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxControllerHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "controller",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxController"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldPos",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldNormal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dir",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "length",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "controller",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxController"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldNormal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dir",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerObstacleHit",
        "has_vtable": false,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxControllerHit",
            "has_vtable": false,
            "fields": [
              {
                "name": "controller",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxController"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldPos",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "worldNormal",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "dir",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "length",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "struct",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "controller",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxController"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldPos",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "worldNormal",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dir",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "length",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxUserControllerHitReport",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerFilterCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerFilters",
        "has_vtable": false,
        "fields": [
          {
            "name": "mFilterData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxFilterData"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mFilterCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxQueryFilterCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mFilterFlags",
            "kind": {
              "Flags": {
                "name": "PxQueryFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mCCTFilterCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxControllerFilterCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerDesc",
        "has_vtable": true,
        "fields": [
          {
            "name": "position",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "upDirection",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "slopeLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "invisibleWallHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxJumpHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stepOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "density",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scaleCoeff",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "volumeGrowth",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "reportCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxUserControllerHitReport"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "behaviorCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxControllerBehaviorCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nonWalkableMode",
            "kind": {
              "Enum": {
                "name": "PxControllerNonWalkableMode",
                "cxx_qt": "PxControllerNonWalkableMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "material",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxMaterial"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "registerDeletionListener",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "clientID",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxControllerShapeType",
                "cxx_qt": "PxControllerShapeType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxController",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBoxControllerDesc",
        "has_vtable": true,
        "fields": [
          {
            "name": "halfHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "halfSideExtent",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "halfForwardExtent",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxControllerDesc",
            "has_vtable": true,
            "fields": [
              {
                "name": "position",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "upDirection",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "slopeLimit",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "invisibleWallHeight",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "maxJumpHeight",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactOffset",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stepOffset",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "density",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "scaleCoeff",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "volumeGrowth",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "reportCallback",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxUserControllerHitReport"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "behaviorCallback",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxControllerBehaviorCallback"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "nonWalkableMode",
                "kind": {
                  "Enum": {
                    "name": "PxControllerNonWalkableMode",
                    "cxx_qt": "PxControllerNonWalkableMode::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "material",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxMaterial"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "registerDeletionListener",
                "kind": {
                  "Builtin": "Bool"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "clientID",
                "kind": {
                  "Builtin": "UChar"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxControllerShapeType",
                    "cxx_qt": "PxControllerShapeType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "position",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "upDirection",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "slopeLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "invisibleWallHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxJumpHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stepOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "density",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scaleCoeff",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "volumeGrowth",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "reportCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxUserControllerHitReport"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "behaviorCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxControllerBehaviorCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nonWalkableMode",
            "kind": {
              "Enum": {
                "name": "PxControllerNonWalkableMode",
                "cxx_qt": "PxControllerNonWalkableMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "material",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxMaterial"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "registerDeletionListener",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "clientID",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxControllerShapeType",
                "cxx_qt": "PxControllerShapeType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxBoxController",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxController",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCapsuleControllerDesc",
        "has_vtable": true,
        "fields": [
          {
            "name": "radius",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "height",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "climbingMode",
            "kind": {
              "Enum": {
                "name": "PxCapsuleClimbingMode",
                "cxx_qt": "PxCapsuleClimbingMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxControllerDesc",
            "has_vtable": true,
            "fields": [
              {
                "name": "position",
                "kind": {
                  "Record": {
                    "name": "PxExtendedVec3"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "upDirection",
                "kind": {
                  "Builtin": "Vec3"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "slopeLimit",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "invisibleWallHeight",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "maxJumpHeight",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactOffset",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stepOffset",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "density",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "scaleCoeff",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "volumeGrowth",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "reportCallback",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxUserControllerHitReport"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "behaviorCallback",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxControllerBehaviorCallback"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "nonWalkableMode",
                "kind": {
                  "Enum": {
                    "name": "PxControllerNonWalkableMode",
                    "cxx_qt": "PxControllerNonWalkableMode::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "material",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Record": {
                        "name": "PxMaterial"
                      }
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "registerDeletionListener",
                "kind": {
                  "Builtin": "Bool"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "clientID",
                "kind": {
                  "Builtin": "UChar"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "mType",
                "kind": {
                  "Enum": {
                    "name": "PxControllerShapeType",
                    "cxx_qt": "PxControllerShapeType::Enum",
                    "repr": "Int"
                  }
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "position",
            "kind": {
              "Record": {
                "name": "PxExtendedVec3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "upDirection",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "slopeLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "invisibleWallHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxJumpHeight",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stepOffset",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "density",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scaleCoeff",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "volumeGrowth",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "reportCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxUserControllerHitReport"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "behaviorCallback",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxControllerBehaviorCallback"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "nonWalkableMode",
            "kind": {
              "Enum": {
                "name": "PxControllerNonWalkableMode",
                "cxx_qt": "PxControllerNonWalkableMode::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "material",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxMaterial"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "registerDeletionListener",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "clientID",
            "kind": {
              "Builtin": "UChar"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxControllerShapeType",
                "cxx_qt": "PxControllerShapeType::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCapsuleController",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxController",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerBehaviorCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxControllerManager",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDim3",
        "has_vtable": false,
        "fields": [
          {
            "name": "x",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "y",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "z",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSDFDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "sdf",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "dims",
            "kind": {
              "Record": {
                "name": "PxDim3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "meshLower",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "spacing",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "subgridSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bitsPerSubgridPixel",
            "kind": {
              "Enum": {
                "name": "PxSdfBitsPerSubgridPixel",
                "cxx_qt": "PxSdfBitsPerSubgridPixel::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfSubgrids3DTexBlockDim",
            "kind": {
              "Record": {
                "name": "PxDim3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfSubgrids",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfStartSlots",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "subgridsMinSdfValue",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "subgridsMaxSdfValue",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfBounds",
            "kind": {
              "Record": {
                "name": "PxBounds3"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "narrowBandThicknessRelativeToSdfBoundsDiagonal",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numThreadsForSdfConstruction",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxConvexMeshDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "points",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "polygons",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "indices",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxConvexFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "vertexLimit",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "polygonLimit",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "quantizedCount",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfDesc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSDFDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTriangleMeshDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "materialIndices",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Char"
                },
                "len": 16
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "sdfDesc",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxSDFDesc"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxSimpleTriangleMesh",
            "has_vtable": false,
            "fields": [
              {
                "name": "points",
                "kind": {
                  "Record": {
                    "name": "PxBoundedData"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "triangles",
                "kind": {
                  "Record": {
                    "name": "PxBoundedData"
                  }
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "flags",
                "kind": {
                  "Flags": {
                    "name": "PxMeshFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "points",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "triangles",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxMeshFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedronMeshDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "materialIndices",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Char"
                },
                "len": 16
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "points",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "tetrahedrons",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxMeshFlags",
                "repr": "UShort"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "tetsPerElement",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSoftBodySimulationDataDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "vertexToTet",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBVH34MidphaseDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "numPrimsPerLeaf",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "buildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVH34BuildStrategy",
                "cxx_qt": "PxBVH34BuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "quantized",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMidphaseDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "mBVH34Desc",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "Char"
                },
                "len": 12
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mType",
            "kind": {
              "Enum": {
                "name": "PxMeshMidPhase",
                "cxx_qt": "PxMeshMidPhase::Enum",
                "repr": "Int"
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBVHDesc",
        "has_vtable": false,
        "fields": [
          {
            "name": "bounds",
            "kind": {
              "Record": {
                "name": "PxBoundedData"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "enlargement",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "numPrimsPerLeaf",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "buildStrategy",
            "kind": {
              "Enum": {
                "name": "PxBVHBuildStrategy",
                "cxx_qt": "PxBVHBuildStrategy::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxCookingParams",
        "has_vtable": false,
        "fields": [
          {
            "name": "areaTestEpsilon",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "planeTolerance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "convexMeshCookingType",
            "kind": {
              "Enum": {
                "name": "PxConvexMeshCookingType",
                "cxx_qt": "PxConvexMeshCookingType::Enum",
                "repr": "Int"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "suppressTriangleMeshRemapTable",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "buildTriangleAdjacencies",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "buildGPUData",
            "kind": {
              "Builtin": "Bool"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scale",
            "kind": {
              "Record": {
                "name": "PxTolerancesScale"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "meshPreprocessParams",
            "kind": {
              "Flags": {
                "name": "PxMeshPreprocessingFlags",
                "repr": "UInt"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "meshWeldTolerance",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "midphaseDesc",
            "kind": {
              "Record": {
                "name": "PxMidphaseDesc"
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "gaussMapLimit",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "maxWeightRatioInTet",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultMemoryOutputStream",
        "has_vtable": true,
        "fields": [
          {
            "name": "mAllocator",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxAllocatorCallback"
                  }
                }
              }
            },
            "is_public": false,
            "is_reference": true
          },
          {
            "name": "mData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mCapacity",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxOutputStream",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultMemoryInputData",
        "has_vtable": true,
        "fields": [
          {
            "name": "mSize",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UChar"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mPos",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxInputData",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxInputStream",
                "has_vtable": true,
                "fields": [],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultFileOutputStream",
        "has_vtable": true,
        "fields": [
          {
            "name": "mFile",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxOutputStream",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultFileInputData",
        "has_vtable": true,
        "fields": [
          {
            "name": "mFile",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mLength",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxInputData",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxInputStream",
                "has_vtable": true,
                "fields": [],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultAllocator",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxAllocatorCallback",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxJoint"
      }
    },
    {
      "Forward": {
        "name": "PxRackAndPinionJoint"
      }
    },
    {
      "Forward": {
        "name": "PxGearJoint"
      }
    },
    {
      "Forward": {
        "name": "PxD6Joint"
      }
    },
    {
      "Forward": {
        "name": "PxDistanceJoint"
      }
    },
    {
      "Forward": {
        "name": "PxContactJoint"
      }
    },
    {
      "Forward": {
        "name": "PxFixedJoint"
      }
    },
    {
      "Forward": {
        "name": "PxPrismaticJoint"
      }
    },
    {
      "Forward": {
        "name": "PxRevoluteJoint"
      }
    },
    {
      "Forward": {
        "name": "PxSphericalJoint"
      }
    },
    {
      "Def": {
        "name": "PxJoint",
        "has_vtable": true,
        "fields": [
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxBase",
            "has_vtable": true,
            "fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSpring",
        "has_vtable": false,
        "fields": [
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDistanceJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxJacobianRow",
        "has_vtable": false,
        "fields": [
          {
            "name": "linear0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "linear1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular0",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "angular1",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxContactJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxFixedJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxJointLimitParameters",
        "has_vtable": false,
        "fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxJointLinearLimit",
        "has_vtable": false,
        "fields": [
          {
            "name": "value",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxJointLimitParameters",
            "has_vtable": false,
            "fields": [
              {
                "name": "restitution",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bounceThreshold",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactDistance_deprecated",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxJointLinearLimitPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "upper",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "lower",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxJointLimitParameters",
            "has_vtable": false,
            "fields": [
              {
                "name": "restitution",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bounceThreshold",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactDistance_deprecated",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxJointAngularLimitPair",
        "has_vtable": false,
        "fields": [
          {
            "name": "upper",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "lower",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxJointLimitParameters",
            "has_vtable": false,
            "fields": [
              {
                "name": "restitution",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bounceThreshold",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactDistance_deprecated",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxJointLimitCone",
        "has_vtable": false,
        "fields": [
          {
            "name": "yAngle",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "zAngle",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxJointLimitParameters",
            "has_vtable": false,
            "fields": [
              {
                "name": "restitution",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bounceThreshold",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactDistance_deprecated",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxJointLimitPyramid",
        "has_vtable": false,
        "fields": [
          {
            "name": "yAngleMin",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "yAngleMax",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "zAngleMin",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "zAngleMax",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxJointLimitParameters",
            "has_vtable": false,
            "fields": [
              {
                "name": "restitution",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "bounceThreshold",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "contactDistance_deprecated",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "restitution",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bounceThreshold",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "contactDistance_deprecated",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPrismaticJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRevoluteJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSphericalJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxD6JointDrive",
        "has_vtable": false,
        "fields": [
          {
            "name": "forceLimit",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "flags",
            "kind": {
              "Flags": {
                "name": "PxD6JointDriveFlags",
                "repr": "UInt"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [
          {
            "name": "PxSpring",
            "has_vtable": false,
            "fields": [
              {
                "name": "stiffness",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              },
              {
                "name": "damping",
                "kind": {
                  "Builtin": "Float"
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [
          {
            "name": "stiffness",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "damping",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxD6Joint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxGearJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRackAndPinionJoint",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxJoint",
            "has_vtable": true,
            "fields": [
              {
                "name": "userData",
                "kind": {
                  "Pointer": {
                    "is_const": false,
                    "is_pointee_const": false,
                    "is_array_like": false,
                    "pointee": {
                      "Builtin": "Void"
                    }
                  }
                },
                "is_public": true,
                "is_reference": false
              }
            ],
            "bases": [
              {
                "name": "PxBase",
                "has_vtable": true,
                "fields": [
                  {
                    "name": "mConcreteType",
                    "kind": {
                      "Builtin": "UShort"
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBaseFlags",
                    "kind": {
                      "Flags": {
                        "name": "PxBaseFlags",
                        "repr": "UShort"
                      }
                    },
                    "is_public": false,
                    "is_reference": false
                  },
                  {
                    "name": "mBuiltInRefCount",
                    "kind": {
                      "Builtin": "UInt"
                    },
                    "is_public": false,
                    "is_reference": false
                  }
                ],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [
              {
                "name": "mConcreteType",
                "kind": {
                  "Builtin": "UShort"
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBaseFlags",
                "kind": {
                  "Flags": {
                    "name": "PxBaseFlags",
                    "repr": "UShort"
                  }
                },
                "is_public": false,
                "is_reference": false
              },
              {
                "name": "mBuiltInRefCount",
                "kind": {
                  "Builtin": "UInt"
                },
                "is_public": false,
                "is_reference": false
              }
            ],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [
          {
            "name": "mConcreteType",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBaseFlags",
            "kind": {
              "Flags": {
                "name": "PxBaseFlags",
                "repr": "UShort"
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mBuiltInRefCount",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "userData",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxGroupsMask",
        "has_vtable": false,
        "fields": [
          {
            "name": "bits0",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bits1",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bits2",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "bits3",
            "kind": {
              "Builtin": "UShort"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultErrorCallback",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxErrorCallback",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidActorExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMassProperties",
        "has_vtable": false,
        "fields": [
          {
            "name": "inertiaTensor",
            "kind": {
              "Builtin": "Mat33"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "centerOfMass",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "mass",
            "kind": {
              "Builtin": "Float"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRigidBodyExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxShapeExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxMeshOverlapUtil",
        "has_vtable": false,
        "fields": [
          {
            "name": "mResultsMemory",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "UInt"
                }
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mResults",
            "kind": {
              "Array": {
                "element": {
                  "Builtin": "UInt"
                },
                "len": 256
              }
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mNbResults",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          },
          {
            "name": "mMaxNbResults",
            "kind": {
              "Builtin": "UInt"
            },
            "is_public": false,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxBinaryConverter"
      }
    },
    {
      "Def": {
        "name": "PxXmlMiscParameter",
        "has_vtable": false,
        "fields": [
          {
            "name": "upVector",
            "kind": {
              "Builtin": "Vec3"
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "scale",
            "kind": {
              "Record": {
                "name": "PxTolerancesScale"
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSerialization",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxDefaultCpuDispatcher",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxCpuDispatcher",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": true
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxStringTableExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBroadPhaseExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxSceneQueryExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxBatchQueryExt",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCustomSceneQuerySystem",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxSceneQuerySystem",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxSceneQuerySystemBase",
                "has_vtable": true,
                "fields": [],
                "bases": [],
                "base_fields": [],
                "calc_layout": true,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": false,
                    "simple": false
                  },
                  "isAbstract": true,
                  "isPolymorphic": true
                }
              }
            ],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxCustomSceneQuerySystemAdapter",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxSamplingExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxPoissonSampler",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxUserAllocated",
            "has_vtable": false,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": false,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": true,
                "simple": true
              },
              "isAbstract": false,
              "isPolymorphic": false
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTriangleMeshPoissonSampler",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxPoissonSampler",
            "has_vtable": true,
            "fields": [],
            "bases": [
              {
                "name": "PxUserAllocated",
                "has_vtable": false,
                "fields": [],
                "bases": [],
                "base_fields": [],
                "calc_layout": false,
                "ast_tag_used": "class",
                "def_data": {
                  "dtor": {
                    "irrelevant": true,
                    "simple": true
                  },
                  "isAbstract": false,
                  "isPolymorphic": false
                }
              }
            ],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxTetrahedronMeshExt",
        "has_vtable": false,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": false,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Def": {
        "name": "PxRepXObject",
        "has_vtable": false,
        "fields": [
          {
            "name": "typeName",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Char"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "serializable",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": true,
                "is_array_like": false,
                "pointee": {
                  "Builtin": "Void"
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "id",
            "kind": {
              "Builtin": "ULong"
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "PxCooking"
      }
    },
    {
      "Def": {
        "name": "PxRepXInstantiationArgs",
        "has_vtable": false,
        "fields": [
          {
            "name": "physics",
            "kind": {
              "Reference": {
                "is_const": false,
                "pointee": {
                  "Record": {
                    "name": "PxPhysics"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": true
          },
          {
            "name": "cooker",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxCooking"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          },
          {
            "name": "stringTable",
            "kind": {
              "Pointer": {
                "is_const": false,
                "is_pointee_const": false,
                "is_array_like": false,
                "pointee": {
                  "Record": {
                    "name": "PxStringTable"
                  }
                }
              }
            },
            "is_public": true,
            "is_reference": false
          }
        ],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "struct",
        "def_data": {
          "dtor": {
            "irrelevant": true,
            "simple": true
          },
          "isAbstract": false,
          "isPolymorphic": false
        }
      }
    },
    {
      "Forward": {
        "name": "XmlMemoryAllocator"
      }
    },
    {
      "Forward": {
        "name": "XmlWriter"
      }
    },
    {
      "Forward": {
        "name": "XmlReader"
      }
    },
    {
      "Forward": {
        "name": "MemoryBuffer"
      }
    },
    {
      "Def": {
        "name": "PxRepXSerializer",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Forward": {
        "name": "PxVehicleWheels4SimData"
      }
    },
    {
      "Forward": {
        "name": "PxVehicleWheels4DynData"
      }
    },
    {
      "Forward": {
        "name": "PxVehicleTireForceCalculator"
      }
    },
    {
      "Forward": {
        "name": "PxVehicleDrivableSurfaceToTireFrictionPairs"
      }
    },
    {
      "Forward": {
        "name": "PxVehicleTelemetryData"
      }
    },
    {
      "Forward": {
        "name": "PxPvdTransport"
      }
    },
    {
      "Def": {
        "name": "PxPvd",
        "has_vtable": true,
        "fields": [],
        "bases": [
          {
            "name": "PxProfilerCallback",
            "has_vtable": true,
            "fields": [],
            "bases": [],
            "base_fields": [],
            "calc_layout": true,
            "ast_tag_used": "class",
            "def_data": {
              "dtor": {
                "irrelevant": false,
                "simple": false
              },
              "isAbstract": true,
              "isPolymorphic": true
            }
          }
        ],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    },
    {
      "Def": {
        "name": "PxPvdTransport",
        "has_vtable": true,
        "fields": [],
        "bases": [],
        "base_fields": [],
        "calc_layout": true,
        "ast_tag_used": "class",
        "def_data": {
          "dtor": {
            "irrelevant": false,
            "simple": false
          },
          "isAbstract": true,
          "isPolymorphic": true
        }
      }
    }
  ],
  "funcs": [
    {
      "name": "PxAllocatorCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxAllocatorCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAllocatorCallback_allocate_mut",
      "comment": {
        "summary": {
          "b": [
            "Allocates size bytes of memory, which must be 16-byte aligned."
          ]
        },
        "additional": {
          "b": [
            "This method should never return NULL.  If you run out of memory, then",
            "you should terminate the app or take some other appropriate action.",
            "",
            "Threading:",
            "This function should be thread safe as it can be called in the context of the user thread",
            "and physics processing thread(s).",
            "",
            "The allocated block of memory."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxAllocatorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "typeName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "filename",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxAllocatorCallback_deallocate_mut",
      "comment": {
        "summary": {
          "b": [
            "Frees memory previously allocated by allocate()."
          ]
        },
        "additional": {
          "b": [
            "Threading:",
            "This function should be thread safe as it can be called in the context of the user thread",
            "and physics processing thread(s)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxAllocatorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAssertHandler_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxAssertHandler"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAssertHandler"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetAssertHandler",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetAssertHandler",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxAssertHandler"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxSetAssertHandler",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetAssertHandler",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "handler",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAssertHandler"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Destroys the instance it is called on."
          ]
        },
        "additional": {
          "b": [
            "The operation will fail, if there are still modules referencing the foundation object. Release all dependent modules",
            "prior to calling this method."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_getErrorCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "retrieves error callback"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getErrorCallback",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxErrorCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxFoundation_setErrorLevel_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets mask of errors to report."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setErrorLevel",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "mask",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_getErrorLevel",
      "comment": {
        "summary": {
          "b": [
            "Retrieves mask of errors to be reported."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getErrorLevel",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxFoundation_getAllocatorCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the allocator this object was created with."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAllocatorCallback",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxAllocatorCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxFoundation_getReportAllocationNames",
      "comment": {
        "summary": {
          "b": [
            "Retrieves if allocation names are being passed to allocator callback."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getReportAllocationNames",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxFoundation_setReportAllocationNames_mut",
      "comment": {
        "summary": {
          "b": [
            "Set if allocation names are being passed to allocator callback."
          ]
        },
        "additional": {
          "b": [
            "Enabled by default in debug and checked build, disabled by default in profile and release build."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setReportAllocationNames",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_registerAllocationListener_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerAllocationListener",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "listener",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocationListener"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_deregisterAllocationListener_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deregisterAllocationListener",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "listener",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocationListener"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_registerErrorCallback_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerErrorCallback",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFoundation_deregisterErrorCallback_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deregisterErrorCallback",
            "class_name": "PxFoundation",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateFoundation",
      "comment": {
        "summary": {
          "b": [
            "Creates an instance of the foundation class"
          ]
        },
        "additional": {
          "b": [
            "The foundation class is needed to initialize higher level SDKs. There may be only one instance per process.",
            "Calling this method after an instance has been created already will result in an error message and NULL will be",
            "returned.",
            "",
            "Foundation instance on success, NULL if operation failed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateFoundation",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "version",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "allocator",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "errorCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxFoundation"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxSetFoundationInstance",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetFoundationInstance",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "foundation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetFoundation",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetFoundation",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxFoundation"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetProfilerCallback",
      "comment": {
        "summary": {
          "b": [
            "Get the callback that will be used for all profiling."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetProfilerCallback",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxProfilerCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxSetProfilerCallback",
      "comment": {
        "summary": {
          "b": [
            "Set the callback that will be used for all profiling."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetProfilerCallback",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "profiler",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProfilerCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetAllocatorCallback",
      "comment": {
        "summary": {
          "b": [
            "Get the allocator callback"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetAllocatorCallback",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAllocatorCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetBroadcastAllocator",
      "comment": {
        "summary": {
          "b": [
            "Get the broadcasting allocator callback"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetBroadcastAllocator",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAllocatorCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetErrorCallback",
      "comment": {
        "summary": {
          "b": [
            "Get the error callback"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetErrorCallback",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxErrorCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetBroadcastError",
      "comment": {
        "summary": {
          "b": [
            "Get the broadcasting error callback"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetBroadcastError",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxErrorCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetWarnOnceTimeStamp",
      "comment": {
        "summary": {
          "b": [
            "Get the warn once timestamp"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetWarnOnceTimeStamp",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxDecFoundationRefCount",
      "comment": {
        "summary": {
          "b": [
            "Decrement the ref count of PxFoundation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDecFoundationRefCount",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "phys_PxIncFoundationRefCount",
      "comment": {
        "summary": {
          "b": [
            "Increment the ref count of PxFoundation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxIncFoundationRefCount",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "PxAllocator_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxAllocator"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxAllocator"
        }
      }
    },
    {
      "name": "PxAllocator_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxAllocator_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRawAllocator_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxRawAllocator"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxRawAllocator"
        }
      }
    },
    {
      "name": "PxRawAllocator_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxRawAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRawAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "anon_param2",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxRawAllocator_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxRawAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRawAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxVirtualAllocatorCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxVirtualAllocatorCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocatorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxVirtualAllocatorCallback_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxVirtualAllocatorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "group",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxVirtualAllocatorCallback_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxVirtualAllocatorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxVirtualAllocator_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxVirtualAllocator"
        }
      },
      "params": [
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "group",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVirtualAllocator"
        }
      }
    },
    {
      "name": "PxVirtualAllocator_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxVirtualAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxVirtualAllocator_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxVirtualAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVirtualAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTempAllocatorChunk_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTempAllocatorChunk"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTempAllocatorChunk"
        }
      }
    },
    {
      "name": "PxTempAllocator_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTempAllocator"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTempAllocator"
        }
      }
    },
    {
      "name": "PxTempAllocator_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxTempAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTempAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxTempAllocator_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxTempAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTempAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxMemZero",
      "comment": {
        "summary": {
          "b": [
            "Sets the bytes of the provided buffer to zero."
          ]
        },
        "additional": {
          "b": [
            "Pointer to memory block (same as input)"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMemZero",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_PxMemSet",
      "comment": {
        "summary": {
          "b": [
            "Sets the bytes of the provided buffer to the specified value."
          ]
        },
        "additional": {
          "b": [
            "Pointer to memory block (same as input)"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMemSet",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_PxMemCopy",
      "comment": {
        "summary": {
          "b": [
            "Copies the bytes of one memory block to another. The memory blocks must not overlap."
          ]
        },
        "additional": {
          "b": [
            "Use #PxMemMove if memory blocks overlap.",
            "",
            "Pointer to destination memory block"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMemCopy",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_PxMemMove",
      "comment": {
        "summary": {
          "b": [
            "Copies the bytes of one memory block to another. The memory blocks can overlap."
          ]
        },
        "additional": {
          "b": [
            "Use #PxMemCopy if memory blocks do not overlap.",
            "",
            "Pointer to destination memory block"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMemMove",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_PxMarkSerializedMemory",
      "comment": {
        "summary": {
          "b": [
            "Mark a specified amount of memory with 0xcd pattern. This is used to check that the meta data",
            "definition for serialized classes is complete in checked builds."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMarkSerializedMemory",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "byteSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxMemoryBarrier",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxMemoryBarrier",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "phys_PxHighestSetBitUnsafe",
      "comment": {
        "summary": {
          "b": [
            "Return the index of the highest set bit. Undefined for zero arg."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxHighestSetBitUnsafe",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxLowestSetBitUnsafe",
      "comment": {
        "summary": {
          "b": [
            "Return the index of the highest set bit. Undefined for zero arg."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxLowestSetBitUnsafe",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxCountLeadingZeros",
      "comment": {
        "summary": {
          "b": [
            "Returns the index of the highest set bit. Returns 32 for v=0."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCountLeadingZeros",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxPrefetchLine",
      "comment": {
        "summary": {
          "b": [
            "Prefetch aligned 64B x86, 32b ARM around"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxPrefetchLine",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxPrefetch",
      "comment": {
        "summary": {
          "b": [
            "Prefetch",
            "bytes starting at"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxPrefetch",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxBitCount",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxBitCount",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxIsPowerOfTwo",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxIsPowerOfTwo",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "x",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxNextPowerOfTwo",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxNextPowerOfTwo",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "x",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxLowestSetBit",
      "comment": {
        "summary": {
          "b": [
            "Return the index of the highest set bit. Not valid for zero arg."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxLowestSetBit",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "x",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxHighestSetBit",
      "comment": {
        "summary": {
          "b": [
            "Return the index of the highest set bit. Not valid for zero arg."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxHighestSetBit",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "x",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxILog2",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxILog2",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "num",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxVec3_new",
      "comment": {
        "summary": {
          "b": [
            "default constructor leaves data uninitialized."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec3"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxVec3"
        }
      }
    },
    {
      "name": "PxVec3_new_1",
      "comment": {
        "summary": {
          "b": [
            "zero constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec3"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxZERO",
              "cxx_qt": "PxZERO",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec3"
        }
      }
    },
    {
      "name": "PxVec3_new_2",
      "comment": {
        "summary": {
          "b": [
            "Assigns scalar parameter to all elements."
          ]
        },
        "additional": {
          "b": [
            "Useful to initialize to zero or one."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec3"
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec3"
        }
      }
    },
    {
      "name": "PxVec3_new_3",
      "comment": {
        "summary": {
          "b": [
            "Initializes from 3 scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec3"
        }
      },
      "params": [
        {
          "name": "nx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ny",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nz",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec3"
        }
      }
    },
    {
      "name": "PxVec3_isZero",
      "comment": {
        "summary": {
          "b": [
            "tests for exact zero vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isZero",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec3_isFinite",
      "comment": {
        "summary": {
          "b": [
            "returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec3_isNormalized",
      "comment": {
        "summary": {
          "b": [
            "is normalized - used by API parameter validation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isNormalized",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec3_magnitudeSquared",
      "comment": {
        "summary": {
          "b": [
            "returns the squared magnitude"
          ]
        },
        "additional": {
          "b": [
            "Avoids calling PxSqrt()!"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitudeSquared",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_magnitude",
      "comment": {
        "summary": {
          "b": [
            "returns the magnitude"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitude",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_dot",
      "comment": {
        "summary": {
          "b": [
            "returns the scalar product of this and other."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "dot",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_cross",
      "comment": {
        "summary": {
          "b": [
            "cross product"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cross",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3_getNormalized",
      "comment": {
        "summary": {
          "b": [
            "returns a unit vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormalized",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3_normalize_mut",
      "comment": {
        "summary": {
          "b": [
            "normalizes the vector in place"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_normalizeSafe_mut",
      "comment": {
        "summary": {
          "b": [
            "normalizes the vector in place. Does nothing if vector magnitude is under PX_NORMALIZATION_EPSILON.",
            "Returns vector magnitude if >= PX_NORMALIZATION_EPSILON and 0.0f otherwise."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalizeSafe",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_normalizeFast_mut",
      "comment": {
        "summary": {
          "b": [
            "normalizes the vector in place. Asserts if vector magnitude is under PX_NORMALIZATION_EPSILON.",
            "returns vector magnitude."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalizeFast",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_multiply",
      "comment": {
        "summary": {
          "b": [
            "a[i] * b[i], for all i."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "multiply",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        },
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3_minimum",
      "comment": {
        "summary": {
          "b": [
            "element-wise minimum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minimum",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3_minElement",
      "comment": {
        "summary": {
          "b": [
            "returns MIN(x, y, z);"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minElement",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_maximum",
      "comment": {
        "summary": {
          "b": [
            "element-wise maximum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maximum",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3_maxElement",
      "comment": {
        "summary": {
          "b": [
            "returns MAX(x, y, z);"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maxElement",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec3_abs",
      "comment": {
        "summary": {
          "b": [
            "returns absolute values of components;"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "abs",
            "class_name": "PxVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxVec3Padded_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxVec3Padded"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxVec3Padded"
            }
          }
        }
      }
    },
    {
      "name": "PxVec3Padded_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxVec3Padded"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec3Padded"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxVec3Padded_new_alloc_1",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxVec3Padded"
        }
      },
      "params": [
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxVec3Padded"
            }
          }
        }
      }
    },
    {
      "name": "PxVec3Padded_new_alloc_2",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxVec3Padded"
        }
      },
      "params": [
        {
          "name": "f",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxVec3Padded"
            }
          }
        }
      }
    },
    {
      "name": "PxQuat_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor, does not do any initialization."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_new_1",
      "comment": {
        "summary": {
          "b": [
            "identity constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxIDENTITY",
              "cxx_qt": "PxIDENTITY",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_new_2",
      "comment": {
        "summary": {
          "b": [
            "Constructor from a scalar: sets the real part w to the scalar value, and the imaginary parts (x,y,z) to zero"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [
        {
          "name": "r",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_new_3",
      "comment": {
        "summary": {
          "b": [
            "Constructor. Take note of the order of the elements!"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [
        {
          "name": "nx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ny",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nz",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nw",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_new_4",
      "comment": {
        "summary": {
          "b": [
            "Creates from angle-axis representation."
          ]
        },
        "additional": {
          "b": [
            "Axis must be normalized!",
            "",
            "Angle is in radians!",
            "",
            "Unit:",
            "Radians"
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [
        {
          "name": "angleRadians",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "unitAxis",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_new_5",
      "comment": {
        "summary": {
          "b": [
            "Creates from orientation matrix."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQuat"
        }
      },
      "params": [
        {
          "name": "m",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_isIdentity",
      "comment": {
        "summary": {
          "b": [
            "returns true if quat is identity"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isIdentity",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxQuat_isFinite",
      "comment": {
        "summary": {
          "b": [
            "returns true if all elements are finite (not NAN or INF, etc.)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxQuat_isUnit",
      "comment": {
        "summary": {
          "b": [
            "returns true if finite and magnitude is close to unit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isUnit",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxQuat_isSane",
      "comment": {
        "summary": {
          "b": [
            "returns true if finite and magnitude is reasonably close to unit to allow for some accumulation of error vs",
            "isValid"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSane",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxQuat_toRadiansAndUnitAxis",
      "comment": {
        "summary": {
          "b": [
            "converts this quaternion to angle-axis representation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "toRadiansAndUnitAxis",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "angle",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxQuat_getAngle",
      "comment": {
        "summary": {
          "b": [
            "Gets the angle between this quat and the identity quaternion."
          ]
        },
        "additional": {
          "b": [
            "Unit:",
            "Radians"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngle",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_getAngle_1",
      "comment": {
        "summary": {
          "b": [
            "Gets the angle between this quat and the argument"
          ]
        },
        "additional": {
          "b": [
            "Unit:",
            "Radians"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngle",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_magnitudeSquared",
      "comment": {
        "summary": {
          "b": [
            "This is the squared 4D vector length, should be 1 for unit quaternions."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitudeSquared",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_dot",
      "comment": {
        "summary": {
          "b": [
            "returns the scalar product of this and other."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "dot",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_getNormalized",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormalized",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_magnitude",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitude",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_normalize_mut",
      "comment": {
        "summary": {
          "b": [
            "maps to the closest unit quaternion."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxQuat_getConjugate",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConjugate",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "PxQuat_getImaginaryPart",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getImaginaryPart",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxQuat_getBasisVector0",
      "comment": {
        "summary": {
          "b": [
            "brief computes rotation of x-axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBasisVector0",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxQuat_getBasisVector1",
      "comment": {
        "summary": {
          "b": [
            "brief computes rotation of y-axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBasisVector1",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxQuat_getBasisVector2",
      "comment": {
        "summary": {
          "b": [
            "brief computes rotation of z-axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBasisVector2",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxQuat_rotate",
      "comment": {
        "summary": {
          "b": [
            "rotates passed vec by this (assumed unitary)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotate",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxQuat_rotateInv",
      "comment": {
        "summary": {
          "b": [
            "inverse rotates passed vec by this (assumed unitary)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotateInv",
            "class_name": "PxQuat",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTransform_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "position",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_2",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxIDENTITY",
              "cxx_qt": "PxIDENTITY",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_3",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "orientation",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_4",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "x",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "y",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "z",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "aQ",
          "kind": {
            "Record": {
              "name": "PxQuat"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_5",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "q0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_new_6",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTransform"
        }
      },
      "params": [
        {
          "name": "m",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat44"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_getInverse",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInverse",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_transform",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "input",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTransform_transformInv",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transformInv",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "input",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTransform_rotate",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotate",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "input",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTransform_rotateInv",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotateInv",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "input",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTransform_transform_1",
      "comment": {
        "summary": {
          "b": [
            "Transform transform to parent (returns compound transform: first src, then *this)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if finite and q is a unit quaternion"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTransform_isSane",
      "comment": {
        "summary": {
          "b": [
            "returns true if finite and quat magnitude is reasonably close to unit to allow for some accumulation of error",
            "vs isValid"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSane",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTransform_isFinite",
      "comment": {
        "summary": {
          "b": [
            "returns true if all elems are finite (not NAN or INF, etc.)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTransform_transformInv_1",
      "comment": {
        "summary": {
          "b": [
            "Transform transform from parent (returns compound transform: first src, then this->inverse)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transformInv",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxTransform_getNormalized",
      "comment": {
        "summary": {
          "b": [
            "return a normalized transform (i.e. one in which the quaternion has unit magnitude)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormalized",
            "class_name": "PxTransform",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxMat33_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_1",
      "comment": {
        "summary": {
          "b": [
            "identity constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxIDENTITY",
              "cxx_qt": "PxIDENTITY",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_2",
      "comment": {
        "summary": {
          "b": [
            "zero constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxZERO",
              "cxx_qt": "PxZERO",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_3",
      "comment": {
        "summary": {
          "b": [
            "Construct from three base vectors"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "col0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "col1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "col2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_4",
      "comment": {
        "summary": {
          "b": [
            "constructor from a scalar, which generates a multiple of the identity matrix"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "r",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_5",
      "comment": {
        "summary": {
          "b": [
            "Construct from float[9]"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "values",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_new_6",
      "comment": {
        "summary": {
          "b": [
            "Construct from a quaternion"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat33"
        }
      },
      "params": [
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat33"
        }
      }
    },
    {
      "name": "PxMat33_createDiagonal",
      "comment": {
        "summary": {
          "b": [
            "Construct from diagonal, off-diagonals are zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createDiagonal",
            "class_name": "PxMat33",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "d",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMat33_outer",
      "comment": {
        "summary": {
          "b": [
            "Computes the outer product of two vectors"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "outer",
            "class_name": "PxMat33",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMat33_getTranspose",
      "comment": {
        "summary": {
          "b": [
            "Get transposed matrix"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTranspose",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMat33_getInverse",
      "comment": {
        "summary": {
          "b": [
            "Get the real inverse"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInverse",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMat33_getDeterminant",
      "comment": {
        "summary": {
          "b": [
            "Get determinant"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDeterminant",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMat33_transform",
      "comment": {
        "summary": {
          "b": [
            "Transform vector by matrix, equal to v' = M*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat33_transformTranspose",
      "comment": {
        "summary": {
          "b": [
            "Transform vector by matrix transpose, v' = M^t*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transformTranspose",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat33_front",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "front",
            "class_name": "PxMat33",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat33"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Float"
          }
        }
      }
    },
    {
      "name": "PxBounds3_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor, not performing any initialization for performance reason."
          ]
        },
        "additional": {
          "b": [
            "Use empty() function below to construct empty bounds."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxBounds3"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_new_1",
      "comment": {
        "summary": {
          "b": [
            "Construct from two bounding points"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxBounds3"
        }
      },
      "params": [
        {
          "name": "minimum",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maximum",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_empty",
      "comment": {
        "summary": {
          "b": [
            "Return empty bounds."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "empty",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_boundsOfPoints",
      "comment": {
        "summary": {
          "b": [
            "returns the AABB containing v0 and v1."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "boundsOfPoints",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "v0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "v1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_centerExtents",
      "comment": {
        "summary": {
          "b": [
            "returns the AABB from center and extents vectors."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "centerExtents",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "center",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "extent",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_basisExtent",
      "comment": {
        "summary": {
          "b": [
            "Construct from center, extent, and (not necessarily orthogonal) basis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "basisExtent",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "center",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "basis",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "extent",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_poseExtent",
      "comment": {
        "summary": {
          "b": [
            "Construct from pose and extent"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "poseExtent",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "extent",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_transformSafe",
      "comment": {
        "summary": {
          "b": [
            "gets the transformed bounds of the passed AABB (resulting in a bigger AABB)."
          ]
        },
        "additional": {
          "b": [
            "This version is safe to call for empty bounds."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "transformSafe",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "matrix",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_transformFast",
      "comment": {
        "summary": {
          "b": [
            "gets the transformed bounds of the passed AABB (resulting in a bigger AABB)."
          ]
        },
        "additional": {
          "b": [
            "Calling this method for empty bounds leads to undefined behavior. Use #transformSafe() instead."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "transformFast",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "matrix",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_transformSafe_1",
      "comment": {
        "summary": {
          "b": [
            "gets the transformed bounds of the passed AABB (resulting in a bigger AABB)."
          ]
        },
        "additional": {
          "b": [
            "This version is safe to call for empty bounds."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "transformSafe",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_transformFast_1",
      "comment": {
        "summary": {
          "b": [
            "gets the transformed bounds of the passed AABB (resulting in a bigger AABB)."
          ]
        },
        "additional": {
          "b": [
            "Calling this method for empty bounds leads to undefined behavior. Use #transformSafe() instead."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "transformFast",
            "class_name": "PxBounds3",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxBounds3_setEmpty_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets empty to true"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setEmpty",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_setMaximal_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the bounds to maximum size [-PX_MAX_BOUNDS_EXTENTS, PX_MAX_BOUNDS_EXTENTS]."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaximal",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_include_mut",
      "comment": {
        "summary": {
          "b": [
            "expands the volume to include v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "include",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_include_mut_1",
      "comment": {
        "summary": {
          "b": [
            "expands the volume to include b."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "include",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_isEmpty",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isEmpty",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_intersects",
      "comment": {
        "summary": {
          "b": [
            "indicates whether the intersection of this and b is empty or not."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "intersects",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_intersects1D",
      "comment": {
        "summary": {
          "b": [
            "computes the 1D-intersection between two AABBs, on a given axis."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "intersects1D",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_contains",
      "comment": {
        "summary": {
          "b": [
            "indicates if these bounds contain v."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "contains",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_isInside",
      "comment": {
        "summary": {
          "b": [
            "checks a box is inside another box."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isInside",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "box",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_getCenter",
      "comment": {
        "summary": {
          "b": [
            "returns the center of this axis aligned box."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCenter",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxBounds3_getCenter_1",
      "comment": {
        "summary": {
          "b": [
            "get component of the box's center along a given axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCenter",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxBounds3_getExtents",
      "comment": {
        "summary": {
          "b": [
            "get component of the box's extents along a given axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getExtents",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxBounds3_getDimensions",
      "comment": {
        "summary": {
          "b": [
            "returns the dimensions (width/height/depth) of this axis aligned box."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDimensions",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxBounds3_getExtents_1",
      "comment": {
        "summary": {
          "b": [
            "returns the extents, which are half of the width/height/depth."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getExtents",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxBounds3_scaleSafe_mut",
      "comment": {
        "summary": {
          "b": [
            "scales the AABB."
          ]
        },
        "additional": {
          "b": [
            "This version is safe to call for empty bounds."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "scaleSafe",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_scaleFast_mut",
      "comment": {
        "summary": {
          "b": [
            "scales the AABB."
          ]
        },
        "additional": {
          "b": [
            "Calling this method for empty bounds leads to undefined behavior. Use #scaleSafe() instead."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "scaleFast",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_fattenSafe_mut",
      "comment": {
        "summary": {
          "b": [
            "fattens the AABB in all 3 dimensions by the given distance."
          ]
        },
        "additional": {
          "b": [
            "This version is safe to call for empty bounds."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fattenSafe",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_fattenFast_mut",
      "comment": {
        "summary": {
          "b": [
            "fattens the AABB in all 3 dimensions by the given distance."
          ]
        },
        "additional": {
          "b": [
            "Calling this method for empty bounds leads to undefined behavior. Use #fattenSafe() instead."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fattenFast",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBounds3_isFinite",
      "comment": {
        "summary": {
          "b": [
            "checks that the AABB values are not NaN"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_isValid",
      "comment": {
        "summary": {
          "b": [
            "checks that the AABB values describe a valid configuration."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBounds3_closestPoint",
      "comment": {
        "summary": {
          "b": [
            "Finds the closest point in the box to the point p. If p is contained, this will be p, otherwise it",
            "will be the closest point on the surface of the box."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "closestPoint",
            "class_name": "PxBounds3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxErrorCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxErrorCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxErrorCallback_reportError_mut",
      "comment": {
        "summary": {
          "b": [
            "Reports an error code."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportError",
            "class_name": "PxErrorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        },
        {
          "name": "code",
          "kind": {
            "Enum": {
              "name": "PxErrorCode",
              "cxx_qt": "PxErrorCode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "message",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAllocationListener_onAllocation_mut",
      "comment": {
        "summary": {
          "b": [
            "callback when memory is allocated."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onAllocation",
            "class_name": "PxAllocationListener",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocationListener"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "typeName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "filename",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "allocatedMemory",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAllocationListener_onDeallocation_mut",
      "comment": {
        "summary": {
          "b": [
            "callback when memory is deallocated."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onDeallocation",
            "class_name": "PxAllocationListener",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocationListener"
                }
              }
            }
          }
        },
        {
          "name": "allocatedMemory",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadcastingAllocator_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "The default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxBroadcastingAllocator"
        }
      },
      "params": [
        {
          "name": "allocator",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "error",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBroadcastingAllocator"
            }
          }
        }
      }
    },
    {
      "name": "PxBroadcastingAllocator_delete",
      "comment": {
        "summary": {
          "b": [
            "The default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxBroadcastingAllocator"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadcastingAllocator"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadcastingAllocator_allocate_mut",
      "comment": {
        "summary": {
          "b": [
            "Allocates size bytes of memory, which must be 16-byte aligned."
          ]
        },
        "additional": {
          "b": [
            "This method should never return NULL.  If you run out of memory, then",
            "you should terminate the app or take some other appropriate action.",
            "",
            "Threading:",
            "This function should be thread safe as it can be called in the context of the user thread",
            "and physics processing thread(s).",
            "",
            "The allocated block of memory."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxBroadcastingAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadcastingAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "typeName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "filename",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxBroadcastingAllocator_deallocate_mut",
      "comment": {
        "summary": {
          "b": [
            "Frees memory previously allocated by allocate()."
          ]
        },
        "additional": {
          "b": [
            "Threading:",
            "This function should be thread safe as it can be called in the context of the user thread",
            "and physics processing thread(s)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxBroadcastingAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadcastingAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadcastingErrorCallback_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "The default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxBroadcastingErrorCallback"
        }
      },
      "params": [
        {
          "name": "errorCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBroadcastingErrorCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxBroadcastingErrorCallback_delete",
      "comment": {
        "summary": {
          "b": [
            "The default destructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxBroadcastingErrorCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadcastingErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadcastingErrorCallback_reportError_mut",
      "comment": {
        "summary": {
          "b": [
            "Reports an error code."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportError",
            "class_name": "PxBroadcastingErrorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadcastingErrorCallback"
                }
              }
            }
          }
        },
        {
          "name": "code",
          "kind": {
            "Enum": {
              "name": "PxErrorCode",
              "cxx_qt": "PxErrorCode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "message",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxEnableFPExceptions",
      "comment": {
        "summary": {
          "b": [
            "Enables floating point exceptions for the scalar and SIMD unit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxEnableFPExceptions",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "phys_PxDisableFPExceptions",
      "comment": {
        "summary": {
          "b": [
            "Disables floating point exceptions for the scalar and SIMD unit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDisableFPExceptions",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "PxInputStream_read_mut",
      "comment": {
        "summary": {
          "b": [
            "read from the stream. The number of bytes read may be less than the number requested."
          ]
        },
        "additional": {
          "b": [
            "the number of bytes read from the stream."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "read",
            "class_name": "PxInputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        },
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxInputStream_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxInputStream"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxInputData_getLength",
      "comment": {
        "summary": {
          "b": [
            "return the length of the input data"
          ]
        },
        "additional": {
          "b": [
            "size in bytes of the input data"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLength",
            "class_name": "PxInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxInputData_seek_mut",
      "comment": {
        "summary": {
          "b": [
            "seek to the given offset from the start of the data."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "seek",
            "class_name": "PxInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputData"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxInputData_tell",
      "comment": {
        "summary": {
          "b": [
            "return the current offset from the start of the data"
          ]
        },
        "additional": {
          "b": [
            "the offset to seek to."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tell",
            "class_name": "PxInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxInputData_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxInputData"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInputData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxOutputStream_write_mut",
      "comment": {
        "summary": {
          "b": [
            "write to the stream. The number of bytes written may be less than the number sent."
          ]
        },
        "additional": {
          "b": [
            "the number of bytes written to the stream by this call."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "write",
            "class_name": "PxOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxOutputStream_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxOutputStream"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxVec4_new",
      "comment": {
        "summary": {
          "b": [
            "default constructor leaves data uninitialized."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_new_1",
      "comment": {
        "summary": {
          "b": [
            "zero constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxZERO",
              "cxx_qt": "PxZERO",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_new_2",
      "comment": {
        "summary": {
          "b": [
            "Assigns scalar parameter to all elements."
          ]
        },
        "additional": {
          "b": [
            "Useful to initialize to zero or one."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_new_3",
      "comment": {
        "summary": {
          "b": [
            "Initializes from 3 scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [
        {
          "name": "nx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ny",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nz",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nw",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_new_4",
      "comment": {
        "summary": {
          "b": [
            "Initializes from 3 scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "nw",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_new_5",
      "comment": {
        "summary": {
          "b": [
            "Initializes from an array of scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec4"
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec4"
        }
      }
    },
    {
      "name": "PxVec4_isZero",
      "comment": {
        "summary": {
          "b": [
            "tests for exact zero vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isZero",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec4_isFinite",
      "comment": {
        "summary": {
          "b": [
            "returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec4_isNormalized",
      "comment": {
        "summary": {
          "b": [
            "is normalized - used by API parameter validation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isNormalized",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec4_magnitudeSquared",
      "comment": {
        "summary": {
          "b": [
            "returns the squared magnitude"
          ]
        },
        "additional": {
          "b": [
            "Avoids calling PxSqrt()!"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitudeSquared",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec4_magnitude",
      "comment": {
        "summary": {
          "b": [
            "returns the magnitude"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitude",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec4_dot",
      "comment": {
        "summary": {
          "b": [
            "returns the scalar product of this and other."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "dot",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec4_getNormalized",
      "comment": {
        "summary": {
          "b": [
            "returns a unit vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormalized",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxVec4_normalize_mut",
      "comment": {
        "summary": {
          "b": [
            "normalizes the vector in place"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec4_multiply",
      "comment": {
        "summary": {
          "b": [
            "a[i] * b[i], for all i."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "multiply",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        },
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxVec4_minimum",
      "comment": {
        "summary": {
          "b": [
            "element-wise minimum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minimum",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxVec4_maximum",
      "comment": {
        "summary": {
          "b": [
            "element-wise maximum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maximum",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxVec4_getXYZ",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getXYZ",
            "class_name": "PxVec4",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec4"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat44_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_1",
      "comment": {
        "summary": {
          "b": [
            "identity constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxIDENTITY",
              "cxx_qt": "PxIDENTITY",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_2",
      "comment": {
        "summary": {
          "b": [
            "zero constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxZERO",
              "cxx_qt": "PxZERO",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_3",
      "comment": {
        "summary": {
          "b": [
            "Construct from four 4-vectors"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "col0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        },
        {
          "name": "col1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        },
        {
          "name": "col2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        },
        {
          "name": "col3",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_4",
      "comment": {
        "summary": {
          "b": [
            "constructor that generates a multiple of the identity matrix"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "r",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_5",
      "comment": {
        "summary": {
          "b": [
            "Construct from three base vectors and a translation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "col0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "col1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "col2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "col3",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_6",
      "comment": {
        "summary": {
          "b": [
            "Construct from float[16]"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "values",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_7",
      "comment": {
        "summary": {
          "b": [
            "Construct from a quaternion"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_8",
      "comment": {
        "summary": {
          "b": [
            "Construct from a diagonal vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "diagonal",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_9",
      "comment": {
        "summary": {
          "b": [
            "Construct from Mat33 and a translation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "axes",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "position",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_new_10",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxMat44"
        }
      },
      "params": [
        {
          "name": "t",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMat44"
        }
      }
    },
    {
      "name": "PxMat44_getTranspose",
      "comment": {
        "summary": {
          "b": [
            "Get transposed matrix"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTranspose",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat44"
      }
    },
    {
      "name": "PxMat44_transform",
      "comment": {
        "summary": {
          "b": [
            "Transform vector by matrix, equal to v' = M*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxMat44_transform_1",
      "comment": {
        "summary": {
          "b": [
            "Transform vector by matrix, equal to v' = M*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat44_rotate",
      "comment": {
        "summary": {
          "b": [
            "Rotate vector by matrix, equal to v' = M*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotate",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec4"
      }
    },
    {
      "name": "PxMat44_rotate_1",
      "comment": {
        "summary": {
          "b": [
            "Rotate vector by matrix, equal to v' = M*v"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "rotate",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat44_getBasis",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBasis",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "num",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat44_getPosition",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPosition",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMat44_setPosition_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPosition",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "position",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMat44_front",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "front",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Float"
          }
        }
      }
    },
    {
      "name": "PxMat44_scale_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "scale",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMat44_inverseRT",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "inverseRT",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat44"
      }
    },
    {
      "name": "PxMat44_isFinite",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxMat44",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMat44"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPlane_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlane"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_new_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor from a normal and a distance"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlane"
        }
      },
      "params": [
        {
          "name": "nx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ny",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "nz",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_new_2",
      "comment": {
        "summary": {
          "b": [
            "Constructor from a normal and a distance"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlane"
        }
      },
      "params": [
        {
          "name": "normal",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_new_3",
      "comment": {
        "summary": {
          "b": [
            "Constructor from a point on the plane and a normal"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlane"
        }
      },
      "params": [
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "normal",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_new_4",
      "comment": {
        "summary": {
          "b": [
            "Constructor from three points"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlane"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_distance",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "distance",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxPlane_contains",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "contains",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPlane_project",
      "comment": {
        "summary": {
          "b": [
            "projects p into the plane"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "project",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxPlane_pointInPlane",
      "comment": {
        "summary": {
          "b": [
            "find an arbitrary point in the plane"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "pointInPlane",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxPlane_normalize_mut",
      "comment": {
        "summary": {
          "b": [
            "equivalent plane with unit normal"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPlane_transform",
      "comment": {
        "summary": {
          "b": [
            "transform plane"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "PxPlane_inverseTransform",
      "comment": {
        "summary": {
          "b": [
            "inverse-transform plane"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "inverseTransform",
            "class_name": "PxPlane",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "phys_PxShortestRotation",
      "comment": {
        "summary": {
          "b": [
            "finds the shortest rotation between two vectors."
          ]
        },
        "additional": {
          "b": [
            "a rotation about an axis normal to the two vectors which takes one to the other via the shortest path"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxShortestRotation",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "from",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "target",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "phys_PxDiagonalize",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDiagonalize",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "m",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "axes",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "phys_PxTransformFromSegment",
      "comment": {
        "summary": {
          "b": [
            "creates a transform from the endpoints of a segment, suitable for an actor transform for a PxCapsuleGeometry"
          ]
        },
        "additional": {
          "b": [
            "A PxTransform which will transform the vector (1,0,0) to the capsule axis shrunk by the halfHeight"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTransformFromSegment",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "halfHeight",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "phys_PxTransformFromPlaneEquation",
      "comment": {
        "summary": {
          "b": [
            "creates a transform from a plane equation, suitable for an actor transform for a PxPlaneGeometry"
          ]
        },
        "additional": {
          "b": [
            "a PxTransform which will transform the plane PxPlane(1,0,0,0) to the specified plane"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTransformFromPlaneEquation",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "plane",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "phys_PxPlaneEquationFromTransform",
      "comment": {
        "summary": {
          "b": [
            "creates a plane equation from a transform, such as the actor transform for a PxPlaneGeometry"
          ]
        },
        "additional": {
          "b": [
            "the plane"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxPlaneEquationFromTransform",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxPlane"
        }
      }
    },
    {
      "name": "phys_PxSlerp",
      "comment": {
        "summary": {
          "b": [
            "Spherical linear interpolation of two quaternions."
          ]
        },
        "additional": {
          "b": [
            "Returns left when t=0, right when t=1 and a linear interpolation of left and right when 0",
            "<",
            "t",
            "<",
            "1.",
            "Returns angle between -PI and PI in radians"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSlerp",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "left",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "phys_PxIntegrateTransform",
      "comment": {
        "summary": {
          "b": [
            "integrate transform."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxIntegrateTransform",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "curTrans",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "linvel",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angvel",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "timeStep",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "result",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxExp",
      "comment": {
        "summary": {
          "b": [
            "Compute the exponent of a PxVec3"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxExp",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQuat"
        }
      }
    },
    {
      "name": "phys_PxOptimizeBoundingBox",
      "comment": {
        "summary": {
          "b": [
            "computes a oriented bounding box around the scaled basis."
          ]
        },
        "additional": {
          "b": [
            "Bounding box extent."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxOptimizeBoundingBox",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "basis",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "phys_PxLog",
      "comment": {
        "summary": {
          "b": [
            "return Returns the log of a PxQuat"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxLog",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "phys_PxLargestAxis",
      "comment": {
        "summary": {
          "b": [
            "return Returns 0 if v.x is largest element of v, 1 if v.y is largest element, 2 if v.z is largest element."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxLargestAxis",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxTanHalf",
      "comment": {
        "summary": {
          "b": [
            "Compute tan(theta/2) given sin(theta) and cos(theta) as inputs."
          ]
        },
        "additional": {
          "b": [
            "Returns tan(theta/2)"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTanHalf",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sin",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "cos",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "phys_PxEllipseClamp",
      "comment": {
        "summary": {
          "b": [
            "Compute the closest point on an 2d ellipse to a given 2d point."
          ]
        },
        "additional": {
          "b": [
            "Returns the 2d position on the surface of the ellipse that is closest to point."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxEllipseClamp",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "radii",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "phys_PxSeparateSwingTwist",
      "comment": {
        "summary": {
          "b": [
            "Compute from an input quaternion q a pair of quaternions (swing, twist) such that",
            "q = swing * twist",
            "with the caveats that swing.x = twist.y = twist.z = 0."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSeparateSwingTwist",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "swing",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "twist",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxComputeAngle",
      "comment": {
        "summary": {
          "b": [
            "Compute the angle between two non-unit vectors"
          ]
        },
        "additional": {
          "b": [
            "Returns the angle (in radians) between the two vector v0 and v1."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeAngle",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "v1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "phys_PxComputeBasisVectors",
      "comment": {
        "summary": {
          "b": [
            "Compute two normalized vectors (right and up) that are perpendicular to an input normalized vector (dir)."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeBasisVectors",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "dir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "up",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxComputeBasisVectors_1",
      "comment": {
        "summary": {
          "b": [
            "Compute three normalized vectors (dir, right and up) that are parallel to (dir) and perpendicular to (right, up) the",
            "normalized direction vector (p1 - p0)/||p1 - p0||."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeBasisVectors",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "dir",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "up",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetNextIndex3",
      "comment": {
        "summary": {
          "b": [
            "Compute (i+1)%3"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetNextIndex3",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_computeBarycentric",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "computeBarycentric",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "d",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "bary",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_computeBarycentric_1",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "computeBarycentric",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "bary",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "Interpolation_PxLerp",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "PxLerp",
            "class_name": "Interpolation",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "b",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "Interpolation_PxBiLerp",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "PxBiLerp",
            "class_name": "Interpolation",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "f00",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f10",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f01",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f11",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "tx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ty",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "Interpolation_PxTriLerp",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "PxTriLerp",
            "class_name": "Interpolation",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "f000",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f100",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f010",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f110",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f001",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f101",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f011",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "f111",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "tx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ty",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "tz",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "Interpolation_PxSDFIdx",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "PxSDFIdx",
            "class_name": "Interpolation",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "j",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "k",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbX",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbY",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "Interpolation_PxSDFSampleImpl",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "PxSDFSampleImpl",
            "class_name": "Interpolation",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "sdf",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "localPos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfBoxLower",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfBoxHigher",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfDx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "invSdfDx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "dimX",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "dimY",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "dimZ",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "phys_PxSdfSample",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSdfSample",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdf",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "localPos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfBoxLower",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfBoxHigher",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sdfDx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "invSdfDx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "dimX",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "dimY",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "dimZ",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "gradient",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMutexImpl_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "The constructor for Mutex creates a mutex. It is initially unlocked."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxMutexImpl"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxMutexImpl"
            }
          }
        }
      }
    },
    {
      "name": "PxMutexImpl_delete",
      "comment": {
        "summary": {
          "b": [
            "The destructor for Mutex deletes the mutex."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxMutexImpl"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMutexImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMutexImpl_lock_mut",
      "comment": {
        "summary": {
          "b": [
            "Acquire (lock) the mutex. If the mutex is already locked",
            "by another thread, this method blocks until the mutex is",
            "unlocked."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lock",
            "class_name": "PxMutexImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMutexImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMutexImpl_trylock_mut",
      "comment": {
        "summary": {
          "b": [
            "Acquire (lock) the mutex. If the mutex is already locked",
            "by another thread, this method returns false without blocking."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "trylock",
            "class_name": "PxMutexImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMutexImpl"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMutexImpl_unlock_mut",
      "comment": {
        "summary": {
          "b": [
            "Release (unlock) the mutex."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlock",
            "class_name": "PxMutexImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMutexImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMutexImpl_getSize",
      "comment": {
        "summary": {
          "b": [
            "Size of this class."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getSize",
            "class_name": "PxMutexImpl",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxReadWriteLock_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxReadWriteLock"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxReadWriteLock"
            }
          }
        }
      }
    },
    {
      "name": "PxReadWriteLock_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxReadWriteLock"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxReadWriteLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxReadWriteLock_lockReader_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lockReader",
            "class_name": "PxReadWriteLock",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxReadWriteLock"
                }
              }
            }
          }
        },
        {
          "name": "takeLock",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxReadWriteLock_lockWriter_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lockWriter",
            "class_name": "PxReadWriteLock",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxReadWriteLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxReadWriteLock_unlockReader_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlockReader",
            "class_name": "PxReadWriteLock",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxReadWriteLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxReadWriteLock_unlockWriter_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlockWriter",
            "class_name": "PxReadWriteLock",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxReadWriteLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxProfilerCallback_zoneStart_mut",
      "comment": {
        "summary": {
          "b": [
            "Mark the beginning of a nested profile block"
          ]
        },
        "additional": {
          "b": [
            "Returns implementation-specific profiler data for this event"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "zoneStart",
            "class_name": "PxProfilerCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProfilerCallback"
                }
              }
            }
          }
        },
        {
          "name": "eventName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "detached",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "contextId",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxProfilerCallback_zoneEnd_mut",
      "comment": {
        "summary": {
          "b": [
            "Mark the end of a nested profile block"
          ]
        },
        "additional": {
          "b": [
            "eventName plus contextId can be used to uniquely match up start and end of a zone."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "zoneEnd",
            "class_name": "PxProfilerCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProfilerCallback"
                }
              }
            }
          }
        },
        {
          "name": "profilerData",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "eventName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "detached",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "contextId",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxProfileScoped_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxProfileScoped"
        }
      },
      "params": [
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProfilerCallback"
                }
              }
            }
          }
        },
        {
          "name": "eventName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "detached",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "contextId",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxProfileScoped"
            }
          }
        }
      }
    },
    {
      "name": "PxProfileScoped_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxProfileScoped"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProfileScoped"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSListEntry_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxSListEntry"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSListEntry"
        }
      }
    },
    {
      "name": "PxSListEntry_next_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "next",
            "class_name": "PxSListEntry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListEntry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSListEntry"
            }
          }
        }
      }
    },
    {
      "name": "PxSListImpl_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxSListImpl"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSListImpl"
            }
          }
        }
      }
    },
    {
      "name": "PxSListImpl_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSListImpl"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSListImpl_push_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "push",
            "class_name": "PxSListImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListImpl"
                }
              }
            }
          }
        },
        {
          "name": "entry",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListEntry"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSListImpl_pop_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "pop",
            "class_name": "PxSListImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListImpl"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSListEntry"
            }
          }
        }
      }
    },
    {
      "name": "PxSListImpl_flush_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flush",
            "class_name": "PxSListImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSListImpl"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSListEntry"
            }
          }
        }
      }
    },
    {
      "name": "PxSListImpl_getSize",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "getSize",
            "class_name": "PxSListImpl",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSyncImpl_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxSyncImpl"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSyncImpl"
            }
          }
        }
      }
    },
    {
      "name": "PxSyncImpl_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSyncImpl"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSyncImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSyncImpl_wait_mut",
      "comment": {
        "summary": {
          "b": [
            "Wait on the object for at most the given number of ms. Returns",
            "true if the object is signaled. Sync::waitForever will block forever",
            "or until the object is signaled."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "wait",
            "class_name": "PxSyncImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSyncImpl"
                }
              }
            }
          }
        },
        {
          "name": "milliseconds",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSyncImpl_set_mut",
      "comment": {
        "summary": {
          "b": [
            "Signal the synchronization object, waking all threads waiting on it"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "set",
            "class_name": "PxSyncImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSyncImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSyncImpl_reset_mut",
      "comment": {
        "summary": {
          "b": [
            "Reset the synchronization object"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reset",
            "class_name": "PxSyncImpl",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSyncImpl"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSyncImpl_getSize",
      "comment": {
        "summary": {
          "b": [
            "Size of this class."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getSize",
            "class_name": "PxSyncImpl",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRunnable_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxRunnable"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRunnable"
            }
          }
        }
      }
    },
    {
      "name": "PxRunnable_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxRunnable"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRunnable"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRunnable_execute_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "execute",
            "class_name": "PxRunnable",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRunnable"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxTlsAlloc",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsAlloc",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxTlsFree",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsFree",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxTlsGet",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsGet",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_PxTlsGetValue",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsGetValue",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "USize"
      }
    },
    {
      "name": "phys_PxTlsSet",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsSet",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "value",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxTlsSetValue",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxTlsSetValue",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "USize"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCounterFrequencyToTensOfNanos_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxCounterFrequencyToTensOfNanos"
        }
      },
      "params": [
        {
          "name": "inNum",
          "kind": {
            "Builtin": "ULong"
          }
        },
        {
          "name": "inDenom",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCounterFrequencyToTensOfNanos"
        }
      }
    },
    {
      "name": "PxCounterFrequencyToTensOfNanos_toTensOfNanos",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "toTensOfNanos",
            "class_name": "PxCounterFrequencyToTensOfNanos",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCounterFrequencyToTensOfNanos"
                }
              }
            }
          }
        },
        {
          "name": "inCounter",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxTime_getBootCounterFrequency",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "getBootCounterFrequency",
            "class_name": "PxTime",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxCounterFrequencyToTensOfNanos"
            }
          }
        }
      }
    },
    {
      "name": "PxTime_getCounterFrequency",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "getCounterFrequency",
            "class_name": "PxTime",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxCounterFrequencyToTensOfNanos"
        }
      }
    },
    {
      "name": "PxTime_getCurrentCounterValue",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "getCurrentCounterValue",
            "class_name": "PxTime",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxTime_getCurrentTimeInTensOfNanoSeconds",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "getCurrentTimeInTensOfNanoSeconds",
            "class_name": "PxTime",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxTime_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTime"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTime"
        }
      }
    },
    {
      "name": "PxTime_getElapsedSeconds_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getElapsedSeconds",
            "class_name": "PxTime",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTime"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxTime_peekElapsedSeconds_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "peekElapsedSeconds",
            "class_name": "PxTime",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTime"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxTime_getLastTime",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLastTime",
            "class_name": "PxTime",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTime"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxVec2_new",
      "comment": {
        "summary": {
          "b": [
            "default constructor leaves data uninitialized."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec2"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_new_1",
      "comment": {
        "summary": {
          "b": [
            "zero constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec2"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxZERO",
              "cxx_qt": "PxZERO",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_new_2",
      "comment": {
        "summary": {
          "b": [
            "Assigns scalar parameter to all elements."
          ]
        },
        "additional": {
          "b": [
            "Useful to initialize to zero or one."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec2"
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_new_3",
      "comment": {
        "summary": {
          "b": [
            "Initializes from 2 scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxVec2"
        }
      },
      "params": [
        {
          "name": "nx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ny",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_isZero",
      "comment": {
        "summary": {
          "b": [
            "tests for exact zero vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isZero",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec2_isFinite",
      "comment": {
        "summary": {
          "b": [
            "returns true if all 2 elems of the vector are finite (not NAN or INF, etc.)"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec2_isNormalized",
      "comment": {
        "summary": {
          "b": [
            "is normalized - used by API parameter validation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isNormalized",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxVec2_magnitudeSquared",
      "comment": {
        "summary": {
          "b": [
            "returns the squared magnitude"
          ]
        },
        "additional": {
          "b": [
            "Avoids calling PxSqrt()!"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitudeSquared",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec2_magnitude",
      "comment": {
        "summary": {
          "b": [
            "returns the magnitude"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitude",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec2_dot",
      "comment": {
        "summary": {
          "b": [
            "returns the scalar product of this and other."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "dot",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec2_getNormalized",
      "comment": {
        "summary": {
          "b": [
            "returns a unit vector"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormalized",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_normalize_mut",
      "comment": {
        "summary": {
          "b": [
            "normalizes the vector in place"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec2_multiply",
      "comment": {
        "summary": {
          "b": [
            "a[i] * b[i], for all i."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "multiply",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        },
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_minimum",
      "comment": {
        "summary": {
          "b": [
            "element-wise minimum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minimum",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_minElement",
      "comment": {
        "summary": {
          "b": [
            "returns MIN(x, y);"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minElement",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxVec2_maximum",
      "comment": {
        "summary": {
          "b": [
            "element-wise maximum"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maximum",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxVec2"
        }
      }
    },
    {
      "name": "PxVec2_maxElement",
      "comment": {
        "summary": {
          "b": [
            "returns MAX(x, y);"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maxElement",
            "class_name": "PxVec2",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxVec2"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxStridedData_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxStridedData"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxStridedData"
        }
      }
    },
    {
      "name": "PxBoundedData_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBoundedData"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBoundedData"
        }
      }
    },
    {
      "name": "PxDebugPoint_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDebugPoint"
        }
      },
      "params": [
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDebugPoint"
        }
      }
    },
    {
      "name": "PxDebugLine_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDebugLine"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDebugLine"
        }
      }
    },
    {
      "name": "PxDebugTriangle_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDebugTriangle"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDebugTriangle"
        }
      }
    },
    {
      "name": "PxDebugText_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDebugText"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxDebugText"
        }
      }
    },
    {
      "name": "PxDebugText_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDebugText"
        }
      },
      "params": [
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sz",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "clr",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "str",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDebugText"
        }
      }
    },
    {
      "name": "PxRenderBuffer_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxRenderBuffer"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_getNbPoints",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbPoints",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRenderBuffer_getPoints",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPoints",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxDebugPoint"
            }
          }
        }
      }
    },
    {
      "name": "PxRenderBuffer_addPoint_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addPoint",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxDebugPoint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_getNbLines",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbLines",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRenderBuffer_getLines",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLines",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxDebugLine"
            }
          }
        }
      }
    },
    {
      "name": "PxRenderBuffer_addLine_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addLine",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxDebugLine"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_reserveLines_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reserveLines",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "nbLines",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxDebugLine"
            }
          }
        }
      }
    },
    {
      "name": "PxRenderBuffer_reservePoints_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reservePoints",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "nbLines",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxDebugPoint"
            }
          }
        }
      }
    },
    {
      "name": "PxRenderBuffer_getNbTriangles",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTriangles",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRenderBuffer_getTriangles",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangles",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxDebugTriangle"
            }
          }
        }
      }
    },
    {
      "name": "PxRenderBuffer_addTriangle_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addTriangle",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "triangle",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxDebugTriangle"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_append_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "append",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "other",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_clear_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "clear",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_shift_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "shift",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        },
        {
          "name": "delta",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRenderBuffer_empty",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "empty",
            "class_name": "PxRenderBuffer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRenderBuffer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxProcessPxBaseCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxProcessPxBaseCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProcessPxBaseCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxProcessPxBaseCallback_process_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "process",
            "class_name": "PxProcessPxBaseCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxProcessPxBaseCallback"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationContext_registerReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Registers a reference value corresponding to a PxBase object."
          ]
        },
        "additional": {
          "b": [
            "This method is assumed to be called in the implementation of PxSerializer::registerReferences for serialized",
            "references that need to be resolved on deserialization.",
            "",
            "A reference needs to be associated with exactly one PxBase object in either the collection or the",
            "external references collection.",
            "",
            "Different kinds of references are supported and need to be specified. In the most common case",
            "(PX_SERIAL_REF_KIND_PXBASE) the PxBase object matches the reference value (which is the pointer",
            "to the PxBase object). Integer references maybe registered as well (used for internal material",
            "indices with PX_SERIAL_REF_KIND_MATERIAL_IDX). Other kinds could be added with the restriction that",
            "for pointer types the kind value needs to be marked with the PX_SERIAL_REF_KIND_PTR_TYPE_BIT."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerReference",
            "class_name": "PxSerializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        },
        {
          "name": "base",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "kind",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "reference",
          "kind": {
            "Builtin": "USize"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationContext_getCollection",
      "comment": {
        "summary": {
          "b": [
            "Returns the collection that is being serialized."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCollection",
            "class_name": "PxSerializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxCollection"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializationContext_writeData_mut",
      "comment": {
        "summary": {
          "b": [
            "Serializes object data and object extra data."
          ]
        },
        "additional": {
          "b": [
            "This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "writeData",
            "class_name": "PxSerializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationContext_alignData_mut",
      "comment": {
        "summary": {
          "b": [
            "Aligns the serialized data."
          ]
        },
        "additional": {
          "b": [
            "This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "alignData",
            "class_name": "PxSerializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        },
        {
          "name": "alignment",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationContext_writeName_mut",
      "comment": {
        "summary": {
          "b": [
            "Helper function to write a name to the extraData if serialization is configured to save names."
          ]
        },
        "additional": {
          "b": [
            "This function is assumed to be called within the implementation of PxSerializer::exportExtraData."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "writeName",
            "class_name": "PxSerializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDeserializationContext_resolveReference",
      "comment": {
        "summary": {
          "b": [
            "Retrieves a pointer to a deserialized PxBase object given a corresponding deserialized reference value"
          ]
        },
        "additional": {
          "b": [
            "This method is assumed to be called in the implementation of PxSerializer::createObject in order",
            "to update reference values on deserialization.",
            "",
            "To update a PxBase reference the corresponding deserialized pointer value needs to be provided in order to retrieve",
            "the location of the corresponding deserialized PxBase object. (PxDeserializationContext::translatePxBase simplifies",
            "this common case).",
            "",
            "For other kinds of references the reverence values need to be updated by deduction given the corresponding PxBase instance.",
            "",
            "PxBase object associated with the reference value"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "resolveReference",
            "class_name": "PxDeserializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDeserializationContext"
                }
              }
            }
          }
        },
        {
          "name": "kind",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "reference",
          "kind": {
            "Builtin": "USize"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxDeserializationContext_readName_mut",
      "comment": {
        "summary": {
          "b": [
            "Helper function to read a name from the extra data during deserialization."
          ]
        },
        "additional": {
          "b": [
            "This function is assumed to be called within the implementation of PxSerializer::createObject."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "readName",
            "class_name": "PxDeserializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDeserializationContext"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "Char"
                  }
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDeserializationContext_alignExtraData_mut",
      "comment": {
        "summary": {
          "b": [
            "Function to align the extra data stream to a power of 2 alignment"
          ]
        },
        "additional": {
          "b": [
            "This function is assumed to be called within the implementation of PxSerializer::createObject."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "alignExtraData",
            "class_name": "PxDeserializationContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDeserializationContext"
                }
              }
            }
          }
        },
        {
          "name": "alignment",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationRegistry_registerSerializer_mut",
      "comment": {
        "summary": {
          "b": [
            "Register a serializer for a concrete type"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "serializer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationRegistry_unregisterSerializer_mut",
      "comment": {
        "summary": {
          "b": [
            "Unregister a serializer for a concrete type, and retrieves the corresponding serializer object."
          ]
        },
        "additional": {
          "b": [
            "Unregistered serializer corresponding to type, NULL for types for which no serializer has been registered."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unregisterSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSerializer"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializationRegistry_getSerializer",
      "comment": {
        "summary": {
          "b": [
            "Returns PxSerializer corresponding to type"
          ]
        },
        "additional": {
          "b": [
            "Registered PxSerializer object corresponding to type"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSerializer"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializationRegistry_registerRepXSerializer_mut",
      "comment": {
        "summary": {
          "b": [
            "Register a RepX serializer for a concrete type"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerRepXSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "serializer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializationRegistry_unregisterRepXSerializer_mut",
      "comment": {
        "summary": {
          "b": [
            "Unregister a RepX serializer for a concrete type, and retrieves the corresponding serializer object."
          ]
        },
        "additional": {
          "b": [
            "Unregistered PxRepxSerializer corresponding to type, NULL for types for which no RepX serializer has been registered."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unregisterRepXSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRepXSerializer"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializationRegistry_getRepXSerializer",
      "comment": {
        "summary": {
          "b": [
            "Returns RepX serializer given the corresponding type name"
          ]
        },
        "additional": {
          "b": [
            "Registered PxRepXSerializer object corresponding to type name"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRepXSerializer",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "typeName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRepXSerializer"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializationRegistry_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases PxSerializationRegistry instance."
          ]
        },
        "additional": {
          "b": [
            "This unregisters all PhysX and PhysXExtension serializers. Make sure to unregister all custom type",
            "serializers before releasing the PxSerializationRegistry."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxSerializationRegistry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_add_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a PxBase object to the collection."
          ]
        },
        "additional": {
          "b": [
            "Adds a PxBase object to the collection. Optionally a PxSerialObjectId can be provided",
            "in order to resolve dependencies between collections. A PxSerialObjectId value of PX_SERIAL_OBJECT_ID_INVALID",
            "means the object remains without id. Objects can be added regardless of other objects they require. If the object",
            "is already in the collection, the ID will be set if it was PX_SERIAL_OBJECT_ID_INVALID previously, otherwise the",
            "operation fails."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "add",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "object",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_remove_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a PxBase member object from the collection."
          ]
        },
        "additional": {
          "b": [
            "Object needs to be contained by the collection."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "remove",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "object",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_contains",
      "comment": {
        "summary": {
          "b": [
            "Returns whether the collection contains a certain PxBase object."
          ]
        },
        "additional": {
          "b": [
            "Whether object is contained."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "contains",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "object",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCollection_addId_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an id to a member PxBase object."
          ]
        },
        "additional": {
          "b": [
            "If the object is already associated with an id within the collection, the id is replaced.",
            "May only be called for objects that are members of the collection. The id needs to be unique",
            "within the collection."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addId",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "object",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_removeId_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes id from a contained PxBase object."
          ]
        },
        "additional": {
          "b": [
            "May only be called for ids that are associated with an object in the collection."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeId",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_add_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Adds all PxBase objects and their ids of collection to this collection."
          ]
        },
        "additional": {
          "b": [
            "PxBase objects already in this collection are ignored. Object ids need to be conflict",
            "free, i.e. the same object may not have two different ids within the two collections."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "add",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_remove_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Removes all PxBase objects of collection from this collection."
          ]
        },
        "additional": {
          "b": [
            "PxBase objects not present in this collection are ignored. Ids of objects",
            "which are removed are also removed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "remove",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollection_getNbObjects",
      "comment": {
        "summary": {
          "b": [
            "Gets number of PxBase objects in this collection."
          ]
        },
        "additional": {
          "b": [
            "Number of objects in this collection"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbObjects",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCollection_getObject",
      "comment": {
        "summary": {
          "b": [
            "Gets the PxBase object of this collection given its index."
          ]
        },
        "additional": {
          "b": [
            "PxBase object at index index"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getObject",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxCollection_getObjects",
      "comment": {
        "summary": {
          "b": [
            "Copies member PxBase pointers to a user specified buffer."
          ]
        },
        "additional": {
          "b": [
            "number of members PxBase objects that have been written to the userBuffer"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getObjects",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxBase"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCollection_find",
      "comment": {
        "summary": {
          "b": [
            "Looks for a PxBase object given a PxSerialObjectId value."
          ]
        },
        "additional": {
          "b": [
            "If there is no PxBase object in the collection with the given id, NULL is returned.",
            "",
            "PxBase object with the given id value or NULL"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "find",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxCollection_getNbIds",
      "comment": {
        "summary": {
          "b": [
            "Gets number of PxSerialObjectId names in this collection."
          ]
        },
        "additional": {
          "b": [
            "Number of PxSerialObjectId names in this collection"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbIds",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCollection_getIds",
      "comment": {
        "summary": {
          "b": [
            "Copies member PxSerialObjectId values to a user specified buffer."
          ]
        },
        "additional": {
          "b": [
            "number of members PxSerialObjectId values that have been written to the userBuffer"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getIds",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Builtin": "ULong"
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCollection_getId",
      "comment": {
        "summary": {
          "b": [
            "Gets the PxSerialObjectId name of a PxBase object within the collection."
          ]
        },
        "additional": {
          "b": [
            "The PxBase object needs to be a member of the collection.",
            "",
            "PxSerialObjectId name of the object or PX_SERIAL_OBJECT_ID_INVALID if the object is unnamed"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getId",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "object",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxCollection_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes a collection object."
          ]
        },
        "additional": {
          "b": [
            "This function only deletes the collection object, i.e. the container class. It doesn't delete objects",
            "that are part of the collection."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxCollection",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateCollection",
      "comment": {
        "summary": {
          "b": [
            "Creates a collection object."
          ]
        },
        "additional": {
          "b": [
            "Objects can only be serialized or deserialized through a collection.",
            "For serialization, users must add objects to the collection and serialize the collection as a whole.",
            "For deserialization, the system gives back a collection of deserialized objects to users.",
            "",
            "The new collection object."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateCollection",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCollection"
            }
          }
        }
      }
    },
    {
      "name": "PxBase_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the PxBase instance, please check documentation of release in derived class."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBase_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of dynamic type."
          ]
        },
        "additional": {
          "b": [
            "Class name of most derived type of this object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxBase_getConcreteType",
      "comment": {
        "summary": {
          "b": [
            "Returns concrete type of object."
          ]
        },
        "additional": {
          "b": [
            "PxConcreteType::Enum of serialized object"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteType",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxBase_setBaseFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Set PxBaseFlag"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBaseFlag",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxBaseFlag",
              "cxx_qt": "PxBaseFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBase_setBaseFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Set PxBaseFlags"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBaseFlags",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "inFlags",
          "kind": {
            "Flags": {
              "name": "PxBaseFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBase_getBaseFlags",
      "comment": {
        "summary": {
          "b": [
            "Returns PxBaseFlags"
          ]
        },
        "additional": {
          "b": [
            "PxBaseFlags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBaseFlags",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxBaseFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxBase_isReleasable",
      "comment": {
        "summary": {
          "b": [
            "Whether the object is subordinate."
          ]
        },
        "additional": {
          "b": [
            "A class is subordinate, if it can only be instantiated in the context of another class.",
            "",
            "Whether the class is subordinate"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isReleasable",
            "class_name": "PxBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRefCounted_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of the object and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxRefCounted",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRefCounted"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRefCounted_getReferenceCount",
      "comment": {
        "summary": {
          "b": [
            "Returns the reference count of the object."
          ]
        },
        "additional": {
          "b": [
            "At creation, the reference count of the object is 1. Every other object referencing this object increments the",
            "count by 1. When the reference count reaches 0, and only then, the object gets destroyed automatically.",
            "",
            "the current reference count."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getReferenceCount",
            "class_name": "PxRefCounted",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRefCounted"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRefCounted_acquireReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Acquires a counted reference to this object."
          ]
        },
        "additional": {
          "b": [
            "This method increases the reference count of the object by 1. Decrement the reference count by calling release()"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "acquireReference",
            "class_name": "PxRefCounted",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRefCounted"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTolerancesScale_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxTolerancesScale"
        }
      },
      "params": [
        {
          "name": "defaultLength",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "defaultSpeed",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTolerancesScale"
        }
      }
    },
    {
      "name": "PxTolerancesScale_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid (returns always true)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTolerancesScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxStringTable_allocateStr_mut",
      "comment": {
        "summary": {
          "b": [
            "Allocate a new string."
          ]
        },
        "additional": {
          "b": [
            "*Always* a valid null terminated string.  \"\" is returned if \"\" or null is passed in."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocateStr",
            "class_name": "PxStringTable",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxStringTable"
                }
              }
            }
          }
        },
        {
          "name": "inSrc",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxStringTable_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Release the string table and all the strings associated with it."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxStringTable",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxStringTable"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializer_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of dynamic type."
          ]
        },
        "additional": {
          "b": [
            "Class name of most derived type of this object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxSerializer_requiresObjects",
      "comment": {
        "summary": {
          "b": [
            "Adds required objects to the collection."
          ]
        },
        "additional": {
          "b": [
            "This method does not add the required objects recursively, e.g. objects required by required objects."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "requiresObjects",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxProcessPxBaseCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializer_isSubordinate",
      "comment": {
        "summary": {
          "b": [
            "Whether the object is subordinate."
          ]
        },
        "additional": {
          "b": [
            "A class is subordinate, if it can only be instantiated in the context of another class.",
            "",
            "Whether the class is subordinate"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSubordinate",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSerializer_exportExtraData",
      "comment": {
        "summary": {
          "b": [
            "Exports object's extra data to stream."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "exportExtraData",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializer_exportData",
      "comment": {
        "summary": {
          "b": [
            "Exports object's data to stream."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "exportData",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializer_registerReferences",
      "comment": {
        "summary": {
          "b": [
            "Register references that the object maintains to other objects."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerReferences",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        },
        {
          "name": "obj",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "s",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationContext"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerializer_getClassSize",
      "comment": {
        "summary": {
          "b": [
            "Returns size needed to create the class instance."
          ]
        },
        "additional": {
          "b": [
            "sizeof class instance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getClassSize",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "USize"
      }
    },
    {
      "name": "PxSerializer_createObject",
      "comment": {
        "summary": {
          "b": [
            "Create object at a given address, resolve references and import extra data."
          ]
        },
        "additional": {
          "b": [
            "Created PxBase pointer (needs to be identical to address before increment)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createObject",
            "class_name": "PxSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        },
        {
          "name": "address",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "UChar"
                  }
                }
              }
            }
          }
        },
        {
          "name": "context",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxDeserializationContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxSerializer_delete",
      "comment": {
        "summary": {
          "b": [
            "*******************************************************************************************************************"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxSerializer"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxInsertionCallback_buildObjectFromData_mut",
      "comment": {
        "summary": {
          "b": [
            "Builds object (TriangleMesh, Heightfield, ConvexMesh or BVH) from given data in PxPhysics."
          ]
        },
        "additional": {
          "b": [
            "PxBase Created object in PxPhysics."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "buildObjectFromData",
            "class_name": "PxInsertionCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxInsertionCallback"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxConcreteType",
              "cxx_qt": "PxConcreteType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxTaskManager_setCpuDispatcher_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the user-provided dispatcher object for CPU tasks"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCpuDispatcher",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "ref",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_getCpuDispatcher",
      "comment": {
        "summary": {
          "b": [
            "Get the user-provided dispatcher object for CPU tasks"
          ]
        },
        "additional": {
          "b": [
            "The CPU dispatcher object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCpuDispatcher",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCpuDispatcher"
            }
          }
        }
      }
    },
    {
      "name": "PxTaskManager_resetDependencies_mut",
      "comment": {
        "summary": {
          "b": [
            "Reset any dependencies between Tasks"
          ]
        },
        "additional": {
          "b": [
            "Will be called at the start of every frame before tasks are submitted."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "resetDependencies",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_startSimulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Called by the owning scene to start the task graph."
          ]
        },
        "additional": {
          "b": [
            "All tasks with ref count of 1 will be dispatched."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "startSimulation",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_stopSimulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Called by the owning scene at the end of a simulation step."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "stopSimulation",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_taskCompleted_mut",
      "comment": {
        "summary": {
          "b": [
            "Called by the worker threads to inform the PxTaskManager that a task has completed processing."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "taskCompleted",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "task",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_getNamedTask_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve a task by name"
          ]
        },
        "additional": {
          "b": [
            "The ID of the task with that name, or eNOT_PRESENT if not found"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNamedTask",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTaskManager_submitNamedTask_mut",
      "comment": {
        "summary": {
          "b": [
            "Submit a task with a unique name."
          ]
        },
        "additional": {
          "b": [
            "The ID of the task with that name, or eNOT_PRESENT if not found"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "submitNamedTask",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "task",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxTaskType",
              "cxx_qt": "PxTaskType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTaskManager_submitUnnamedTask_mut",
      "comment": {
        "summary": {
          "b": [
            "Submit an unnamed task."
          ]
        },
        "additional": {
          "b": [
            "The ID of the task with that name, or eNOT_PRESENT if not found"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "submitUnnamedTask",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "task",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxTaskType",
              "cxx_qt": "PxTaskType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTaskManager_getTaskFromID_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve a task given a task ID"
          ]
        },
        "additional": {
          "b": [
            "The task associated with the ID"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTaskFromID",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTask"
            }
          }
        }
      }
    },
    {
      "name": "PxTaskManager_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Release the PxTaskManager object, referenced dispatchers will not be released"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxTaskManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTaskManager_createTaskManager",
      "comment": {
        "summary": {
          "b": [
            "Construct a new PxTaskManager instance with the given [optional] dispatchers"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createTaskManager",
            "class_name": "PxTaskManager",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "errorCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxErrorCallback"
                }
              }
            }
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTaskManager"
            }
          }
        }
      }
    },
    {
      "name": "PxCpuDispatcher_submitTask_mut",
      "comment": {
        "summary": {
          "b": [
            "Called by the TaskManager when a task is to be queued for execution."
          ]
        },
        "additional": {
          "b": [
            "Upon receiving a task, the dispatcher should schedule the task to run.",
            "After the task has been run, it should call the release() method and",
            "discard its pointer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "submitTask",
            "class_name": "PxCpuDispatcher",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCpuDispatcher"
                }
              }
            }
          }
        },
        {
          "name": "task",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCpuDispatcher_getWorkerCount",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of available worker threads for this dispatcher."
          ]
        },
        "additional": {
          "b": [
            "The SDK will use this count to control how many tasks are submitted. By",
            "matching the number of tasks with the number of execution units task",
            "overhead can be reduced."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWorkerCount",
            "class_name": "PxCpuDispatcher",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCpuDispatcher_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxCpuDispatcher"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_run_mut",
      "comment": {
        "summary": {
          "b": [
            "The user-implemented run method where the task's work should be performed"
          ]
        },
        "additional": {
          "b": [
            "run() methods must be thread safe, stack friendly (no alloca, etc), and",
            "must never block."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "run",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_getName",
      "comment": {
        "summary": {
          "b": [
            "Return a user-provided task name for profiling purposes."
          ]
        },
        "additional": {
          "b": [
            "It does not have to be unique, but unique names are helpful.",
            "",
            "The name of this task"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getName",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxBaseTask_addReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Implemented by derived implementation classes"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addReference",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_removeReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Implemented by derived implementation classes"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeReference",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_getReference",
      "comment": {
        "summary": {
          "b": [
            "Implemented by derived implementation classes"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getReference",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxBaseTask_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Implemented by derived implementation classes"
          ]
        },
        "additional": {
          "b": [
            "A task may assume in its release() method that the task system no longer holds",
            "references to it - so it may safely run its destructor, recycle itself, etc.",
            "provided no additional user references to the task exist"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_getTaskManager",
      "comment": {
        "summary": {
          "b": [
            "Return PxTaskManager to which this task was submitted"
          ]
        },
        "additional": {
          "b": [
            "Note, can return NULL if task was not submitted, or has been",
            "completed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTaskManager",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTaskManager"
            }
          }
        }
      }
    },
    {
      "name": "PxBaseTask_setContextId_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContextId",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        },
        {
          "name": "id",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseTask_getContextId",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContextId",
            "class_name": "PxBaseTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxTask_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Release method implementation"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTask_finishBefore_mut",
      "comment": {
        "summary": {
          "b": [
            "Inform the PxTaskManager this task must finish before the given"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "finishBefore",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        },
        {
          "name": "taskID",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTask_startAfter_mut",
      "comment": {
        "summary": {
          "b": [
            "Inform the PxTaskManager this task cannot start until the given"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "startAfter",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        },
        {
          "name": "taskID",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTask_addReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Manually increment this task's reference count. The task will",
            "not be allowed to run until removeReference() is called."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addReference",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTask_removeReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Manually decrement this task's reference count. If the reference",
            "count reaches zero, the task will be dispatched."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeReference",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTask_getReference",
      "comment": {
        "summary": {
          "b": [
            "Return the ref-count for this task"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getReference",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxTask_getTaskID",
      "comment": {
        "summary": {
          "b": [
            "Return the unique ID for this task"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTaskID",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTask_submitted_mut",
      "comment": {
        "summary": {
          "b": [
            "Called by PxTaskManager at submission time for initialization"
          ]
        },
        "additional": {
          "b": [
            "Perform simulation step initialization here."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "submitted",
            "class_name": "PxTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLightCpuTask_setContinuation_mut",
      "comment": {
        "summary": {
          "b": [
            "Initialize this task and specify the task that will have its ref count decremented on completion."
          ]
        },
        "additional": {
          "b": [
            "Submission is deferred until the task's mRefCount is decremented to zero.",
            "Note that we only use the PxTaskManager to query the appropriate dispatcher."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContinuation",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        },
        {
          "name": "tm",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTaskManager"
                }
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLightCpuTask_setContinuation_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Initialize this task and specify the task that will have its ref count decremented on completion."
          ]
        },
        "additional": {
          "b": [
            "This overload of setContinuation() queries the PxTaskManager from the continuation",
            "task, which cannot be NULL."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContinuation",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        },
        {
          "name": "c",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLightCpuTask_getContinuation",
      "comment": {
        "summary": {
          "b": [
            "Retrieves continuation task"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContinuation",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBaseTask"
            }
          }
        }
      }
    },
    {
      "name": "PxLightCpuTask_removeReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Manually decrement this task's reference count. If the reference",
            "count reaches zero, the task will be dispatched."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeReference",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLightCpuTask_getReference",
      "comment": {
        "summary": {
          "b": [
            "Return the ref-count for this task"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getReference",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxLightCpuTask_addReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Manually increment this task's reference count. The task will",
            "not be allowed to run until removeReference() is called."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addReference",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLightCpuTask_release_mut",
      "comment": {
        "summary": {
          "b": [
            "called by CpuDispatcher after run method has completed"
          ]
        },
        "additional": {
          "b": [
            "Decrements the continuation task's reference count, if specified."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxLightCpuTask",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLightCpuTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxGeometry_getType",
      "comment": {
        "summary": {
          "b": [
            "Returns the type of the geometry."
          ]
        },
        "additional": {
          "b": [
            "The type of the object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxGeometryType",
          "cxx_qt": "PxGeometryType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxBoxGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor to initialize half extents from scalar parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxBoxGeometry"
        }
      },
      "params": [
        {
          "name": "hx",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hy",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hz",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBoxGeometry"
        }
      }
    },
    {
      "name": "PxBoxGeometry_new_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor to initialize half extents from vector parameter."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxBoxGeometry"
        }
      },
      "params": [
        {
          "name": "halfExtents_",
          "kind": {
            "Builtin": "Vec3"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBoxGeometry"
        }
      }
    },
    {
      "name": "PxBoxGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid",
            "",
            "A valid box has a positive extent in each direction (halfExtents.x > 0, halfExtents.y > 0, halfExtents.z > 0).",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a box that has zero extent in any direction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBoxGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVHRaycastCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxBVHRaycastCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHRaycastCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVHRaycastCallback_reportHit_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportHit",
            "class_name": "PxBVHRaycastCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHRaycastCallback"
                }
              }
            }
          }
        },
        {
          "name": "boundsIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "distance",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVHOverlapCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxBVHOverlapCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHOverlapCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVHOverlapCallback_reportHit_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportHit",
            "class_name": "PxBVHOverlapCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHOverlapCallback"
                }
              }
            }
          }
        },
        {
          "name": "boundsIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVHTraversalCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxBVHTraversalCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHTraversalCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVHTraversalCallback_visitNode_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visitNode",
            "class_name": "PxBVHTraversalCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHTraversalCallback"
                }
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVHTraversalCallback_reportLeaf_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportLeaf",
            "class_name": "PxBVHTraversalCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHTraversalCallback"
                }
              }
            }
          }
        },
        {
          "name": "nbPrims",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "prims",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_raycast",
      "comment": {
        "summary": {
          "b": [
            "Raycast test against a BVH."
          ]
        },
        "additional": {
          "b": [
            "false if query has been aborted"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "cb",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHRaycastCallback"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_sweep",
      "comment": {
        "summary": {
          "b": [
            "Sweep test against a BVH."
          ]
        },
        "additional": {
          "b": [
            "false if query has been aborted"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "cb",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHRaycastCallback"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_overlap",
      "comment": {
        "summary": {
          "b": [
            "Overlap test against a BVH."
          ]
        },
        "additional": {
          "b": [
            "false if query has been aborted"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "cb",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHOverlapCallback"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_cull",
      "comment": {
        "summary": {
          "b": [
            "Frustum culling test against a BVH."
          ]
        },
        "additional": {
          "b": [
            "This is similar in spirit to an overlap query using a convex object around the frustum.",
            "However this specialized query has better performance, and can support more than the 6 planes",
            "of a frustum, which can be useful in portal-based engines.",
            "",
            "On the other hand this test only returns a conservative number of bounds, i.e. some of the returned",
            "bounds may actually be outside the frustum volume, close to it but not touching it. This is usually",
            "an ok performance trade-off when the function is used for view-frustum culling.",
            "",
            "false if query has been aborted"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cull",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "nbPlanes",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "planes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "cb",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHOverlapCallback"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_getNbBounds",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of bounds in the BVH."
          ]
        },
        "additional": {
          "b": [
            "You can use #getBounds() to retrieve the bounds.",
            "",
            "These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.",
            "",
            "Number of bounds in the BVH."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbBounds",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBVH_getBounds",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the read-only bounds in the BVH."
          ]
        },
        "additional": {
          "b": [
            "These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBounds",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Record": {
              "name": "PxBounds3"
            }
          }
        }
      }
    },
    {
      "name": "PxBVH_getBoundsForModification_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the bounds in the BVH."
          ]
        },
        "additional": {
          "b": [
            "These bounds can be modified. Call refit() after modifications are done.",
            "",
            "These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBoundsForModification",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBounds3"
            }
          }
        }
      }
    },
    {
      "name": "PxBVH_refit_mut",
      "comment": {
        "summary": {
          "b": [
            "Refit the BVH."
          ]
        },
        "additional": {
          "b": [
            "This function \"refits\" the tree, i.e. takes the new (leaf) bounding boxes into account and",
            "recomputes all the BVH bounds accordingly. This is an O(n) operation with n = number of bounds in the BVH.",
            "",
            "This works best with minor bounds modifications, i.e. when the bounds remain close to their initial values.",
            "With large modifications the tree quality degrades more and more, and subsequent query performance suffers.",
            "It might be a better strategy to create a brand new BVH if bounds change drastically.",
            "",
            "This function refits the whole tree after an arbitrary number of bounds have potentially been modified by",
            "users (via getBoundsForModification()). If you only have a small number of bounds to update, it might be",
            "more efficient to use setBounds() and partialRefit() instead."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "refit",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVH_updateBounds_mut",
      "comment": {
        "summary": {
          "b": [
            "Update single bounds."
          ]
        },
        "additional": {
          "b": [
            "This is an alternative to getBoundsForModification() / refit(). If you only have a small set of bounds to",
            "update, it can be inefficient to call the refit() function, because it refits the whole BVH.",
            "",
            "Instead, one can update individual bounds with this updateBounds() function. It sets the new bounds and",
            "marks the corresponding BVH nodes for partial refit. Once all the individual bounds have been updated,",
            "call partialRefit() to only refit the subset of marked nodes.",
            "",
            "true if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateBounds",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "boundsIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "newBounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_partialRefit_mut",
      "comment": {
        "summary": {
          "b": [
            "Refits subset of marked nodes."
          ]
        },
        "additional": {
          "b": [
            "This is an alternative to the refit() function, to be called after updateBounds() calls.",
            "See updateBounds() for details."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "partialRefit",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVH_traverse",
      "comment": {
        "summary": {
          "b": [
            "Generic BVH traversal function."
          ]
        },
        "additional": {
          "b": [
            "This can be used to implement custom BVH traversal functions if provided ones are not enough.",
            "In particular this can be used to visualize the tree's bounds.",
            "",
            "false if query has been aborted"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "traverse",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "cb",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHTraversalCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxBVH",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxCapsuleGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor, initializes to a capsule with passed radius and half height."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxCapsuleGeometry"
        }
      },
      "params": [
        {
          "name": "radius_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "halfHeight_",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCapsuleGeometry"
        }
      }
    },
    {
      "name": "PxCapsuleGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid.",
            "",
            "A valid capsule has radius > 0, halfHeight >= 0.",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a capsule that has zero radius or height."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxCapsuleGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxConvexMesh_getNbVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of vertices."
          ]
        },
        "additional": {
          "b": [
            "Number of vertices."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbVertices",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxConvexMesh_getVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the vertices."
          ]
        },
        "additional": {
          "b": [
            "Array of vertices."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVertices",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxConvexMesh_getIndexBuffer",
      "comment": {
        "summary": {
          "b": [
            "Returns the index buffer."
          ]
        },
        "additional": {
          "b": [
            "Index buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getIndexBuffer",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UChar"
          }
        }
      }
    },
    {
      "name": "PxConvexMesh_getNbPolygons",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of polygons."
          ]
        },
        "additional": {
          "b": [
            "Number of polygons."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbPolygons",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxConvexMesh_getPolygonData",
      "comment": {
        "summary": {
          "b": [
            "Returns the polygon data."
          ]
        },
        "additional": {
          "b": [
            "True if success."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPolygonData",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "data",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxHullPolygon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxConvexMesh_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a convex mesh and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConvexMesh_getMassInformation",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass properties of the mesh assuming unit density."
          ]
        },
        "additional": {
          "b": [
            "The following relationship holds between mass and volume:",
            "",
            "mass = volume * density",
            "",
            "The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.",
            "",
            "Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the",
            "localInertia of the unit density mesh by d."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMassInformation",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        },
        {
          "name": "mass",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "localInertia",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "localCenterOfMass",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConvexMesh_getLocalBounds",
      "comment": {
        "summary": {
          "b": [
            "Returns the local-space (vertex space) AABB from the convex mesh."
          ]
        },
        "additional": {
          "b": [
            "local-space bounds"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalBounds",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxConvexMesh_getSDF",
      "comment": {
        "summary": {
          "b": [
            "Returns the local-space Signed Distance Field for this mesh if it has one."
          ]
        },
        "additional": {
          "b": [
            "local-space SDF."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSDF",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Float"
          }
        }
      }
    },
    {
      "name": "PxConvexMesh_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxConvexMesh_isGpuCompatible",
      "comment": {
        "summary": {
          "b": [
            "This method decides whether a convex mesh is gpu compatible. If the total number of vertices are more than 64 or any number of vertices in a polygon is more than 32, or",
            "convex hull data was not cooked with GPU data enabled during cooking or was loaded from a serialized collection, the convex hull is incompatible with GPU collision detection. Otherwise",
            "it is compatible."
          ]
        },
        "additional": {
          "b": [
            "True if the convex hull is gpu compatible"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isGpuCompatible",
            "class_name": "PxConvexMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMeshScale_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor initializes to identity scale."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMeshScale"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxMeshScale"
        }
      }
    },
    {
      "name": "PxMeshScale_new_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor from scalar."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMeshScale"
        }
      },
      "params": [
        {
          "name": "r",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMeshScale"
        }
      }
    },
    {
      "name": "PxMeshScale_new_2",
      "comment": {
        "summary": {
          "b": [
            "Constructor to initialize to arbitrary scale and identity scale rotation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMeshScale"
        }
      },
      "params": [
        {
          "name": "s",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMeshScale"
        }
      }
    },
    {
      "name": "PxMeshScale_new_3",
      "comment": {
        "summary": {
          "b": [
            "Constructor to initialize to arbitrary scaling."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMeshScale"
        }
      },
      "params": [
        {
          "name": "s",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "r",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMeshScale"
        }
      }
    },
    {
      "name": "PxMeshScale_isIdentity",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the scaling is an identity transformation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isIdentity",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMeshScale_getInverse",
      "comment": {
        "summary": {
          "b": [
            "Returns the inverse of this scaling transformation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInverse",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMeshScale"
        }
      }
    },
    {
      "name": "PxMeshScale_toMat33",
      "comment": {
        "summary": {
          "b": [
            "Converts this transformation to a 3x3 matrix representation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "toMat33",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMeshScale_hasNegativeDeterminant",
      "comment": {
        "summary": {
          "b": [
            "Returns true if combination of negative scale components will cause the triangle normal to flip. The SDK will flip the normals internally."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hasNegativeDeterminant",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMeshScale_transform",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "transform",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMeshScale_isValidForTriangleMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValidForTriangleMesh",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMeshScale_isValidForConvexMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValidForConvexMesh",
            "class_name": "PxMeshScale",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxConvexMeshGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor. By default creates an empty object with a NULL mesh and identity scale."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxConvexMeshGeometry"
        }
      },
      "params": [
        {
          "name": "mesh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMesh"
                }
              }
            }
          }
        },
        {
          "name": "scaling",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxConvexMeshGeometryFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxConvexMeshGeometry"
        }
      }
    },
    {
      "name": "PxConvexMeshGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation.",
            "",
            "A valid convex mesh has a positive scale value in each direction (scale.x > 0, scale.y > 0, scale.z > 0).",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a convex that has zero extent in any direction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxConvexMeshGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSphereGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSphereGeometry"
        }
      },
      "params": [
        {
          "name": "ir",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSphereGeometry"
        }
      }
    },
    {
      "name": "PxSphereGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid",
            "",
            "A valid sphere has radius > 0.",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a sphere that has zero radius."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSphereGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphereGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPlaneGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxPlaneGeometry"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxPlaneGeometry"
        }
      }
    },
    {
      "name": "PxPlaneGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxPlaneGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPlaneGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTriangleMeshGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor. By default creates an empty object with a NULL mesh and identity scale."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxTriangleMeshGeometry"
        }
      },
      "params": [
        {
          "name": "mesh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "scaling",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxMeshScale"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxMeshGeometryFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTriangleMeshGeometry"
        }
      }
    },
    {
      "name": "PxTriangleMeshGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation.",
            "",
            "A valid triangle mesh has a positive scale value in each direction (scale.scale.x > 0, scale.scale.y > 0, scale.scale.z > 0).",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a triangle mesh that has zero extents in any direction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTriangleMeshGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxHeightFieldGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxHeightFieldGeometry"
        }
      },
      "params": [
        {
          "name": "hf",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxMeshGeometryFlags",
              "repr": "UChar"
            }
          }
        },
        {
          "name": "heightScale_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "rowScale_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "columnScale_",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxHeightFieldGeometry"
        }
      }
    },
    {
      "name": "PxHeightFieldGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid",
            "",
            "A valid height field has a positive scale value in each direction (heightScale > 0, rowScale > 0, columnScale > 0).",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a height field that has zero extents in any direction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxHeightFieldGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxParticleSystemGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor."
          ]
        },
        "additional": {
          "b": [
            "Creates an empty object with no particles."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxParticleSystemGeometry"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxParticleSystemGeometry"
        }
      }
    },
    {
      "name": "PxParticleSystemGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxParticleSystemGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleSystemGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxHairSystemGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxHairSystemGeometry"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxHairSystemGeometry"
        }
      }
    },
    {
      "name": "PxHairSystemGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxHairSystemGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHairSystemGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTetrahedronMeshGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor. By default creates an empty object with a NULL mesh and identity scale."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxTetrahedronMeshGeometry"
        }
      },
      "params": [
        {
          "name": "mesh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTetrahedronMeshGeometry"
        }
      }
    },
    {
      "name": "PxTetrahedronMeshGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation.",
            "",
            "A valid tetrahedron mesh has a positive scale value in each direction (scale.scale.x > 0, scale.scale.y > 0, scale.scale.z > 0).",
            "It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a tetrahedron mesh that has zero extents in any direction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTetrahedronMeshGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMeshGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxQueryHit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxQueryHit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxQueryHit"
        }
      }
    },
    {
      "name": "PxLocationHit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxLocationHit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxLocationHit"
        }
      }
    },
    {
      "name": "PxLocationHit_hadInitialOverlap",
      "comment": {
        "summary": {
          "b": [
            "For raycast hits: true for shapes overlapping with raycast origin."
          ]
        },
        "additional": {
          "b": [
            "For sweep hits: true for shapes overlapping at zero sweep distance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hadInitialOverlap",
            "class_name": "PxLocationHit",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLocationHit"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxGeomRaycastHit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeomRaycastHit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxGeomRaycastHit"
        }
      }
    },
    {
      "name": "PxGeomOverlapHit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeomOverlapHit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxGeomOverlapHit"
        }
      }
    },
    {
      "name": "PxGeomSweepHit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeomSweepHit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxGeomSweepHit"
        }
      }
    },
    {
      "name": "PxGeomIndexPair_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeomIndexPair"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxGeomIndexPair"
        }
      }
    },
    {
      "name": "PxGeomIndexPair_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeomIndexPair"
        }
      },
      "params": [
        {
          "name": "_id0",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "_id1",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxGeomIndexPair"
        }
      }
    },
    {
      "name": "phys_PxCustomGeometry_getUniqueID",
      "comment": {
        "summary": {
          "b": [
            "For internal use"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCustomGeometry_getUniqueID",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCustomGeometryType_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxCustomGeometryType"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxCustomGeometryType"
        }
      }
    },
    {
      "name": "PxCustomGeometryType_INVALID",
      "comment": {
        "summary": {
          "b": [
            "Invalid type"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "INVALID",
            "class_name": "PxCustomGeometryType",
            "is_static": true
          }
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxCustomGeometryType"
        }
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_getCustomType",
      "comment": {
        "summary": {
          "b": [
            "Return custom type. The type purpose is for user to differentiate custom geometries. Not used by PhysX."
          ]
        },
        "additional": {
          "b": [
            "Unique ID of a custom geometry type.",
            "",
            "User should use DECLARE_CUSTOM_GEOMETRY_TYPE and IMPLEMENT_CUSTOM_GEOMETRY_TYPE intead of overwriting this function."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCustomType",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCustomGeometryType"
        }
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_getLocalBounds",
      "comment": {
        "summary": {
          "b": [
            "Return local bounds."
          ]
        },
        "additional": {
          "b": [
            "Bounding box in the geometry local space."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalBounds",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_raycast",
      "comment": {
        "summary": {
          "b": [
            "Raycast. Cast a ray against the geometry in given pose."
          ]
        },
        "additional": {
          "b": [
            "Number of hits."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "maxHits",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "rayHits",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeomRaycastHit"
                }
              }
            }
          }
        },
        {
          "name": "stride",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_overlap",
      "comment": {
        "summary": {
          "b": [
            "Overlap. Test if geometries overlap."
          ]
        },
        "additional": {
          "b": [
            "True if there is overlap. False otherwise."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "geom0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geom1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_sweep",
      "comment": {
        "summary": {
          "b": [
            "Sweep. Sweep one geometry against the other."
          ]
        },
        "additional": {
          "b": [
            "True if there is hit. False otherwise."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "geom0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geom1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "sweepHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxGeomSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_computeMassProperties",
      "comment": {
        "summary": {
          "b": [
            "Compute custom geometry mass properties. For geometries usable with dynamic rigidbodies."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeMassProperties",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "massProperties",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxMassProperties"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCustomGeometryCallbacks_usePersistentContactManifold",
      "comment": {
        "summary": {
          "b": [
            "Compatible with PhysX's PCM feature. Allows to optimize contact generation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "usePersistentContactManifold",
            "class_name": "PxCustomGeometryCallbacks",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "breakingThreshold",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCustomGeometryCallbacks_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxCustomGeometryCallbacks"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCustomGeometry_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor."
          ]
        },
        "additional": {
          "b": [
            "Creates an empty object with a NULL callbacks pointer."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxCustomGeometry"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxCustomGeometry"
        }
      }
    },
    {
      "name": "PxCustomGeometry_new_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxCustomGeometry"
        }
      },
      "params": [
        {
          "name": "_callbacks",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometryCallbacks"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCustomGeometry"
        }
      }
    },
    {
      "name": "PxCustomGeometry_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid for shape creation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxCustomGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCustomGeometry_getCustomType",
      "comment": {
        "summary": {
          "b": [
            "Returns the custom type of the custom geometry."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCustomType",
            "class_name": "PxCustomGeometry",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCustomGeometryType"
        }
      }
    },
    {
      "name": "PxGeometryHolder_getType",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxGeometryType",
          "cxx_qt": "PxGeometryType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxGeometryHolder_any_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "any",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_any",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "any",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_sphere_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sphere",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxSphereGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_sphere",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sphere",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxSphereGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_plane_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "plane",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxPlaneGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_plane",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "plane",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxPlaneGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_capsule_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "capsule",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxCapsuleGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_capsule",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "capsule",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxCapsuleGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_box_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "box",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxBoxGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_box",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "box",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxBoxGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_convexMesh_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "convexMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxConvexMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_convexMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "convexMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxConvexMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_tetMesh_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tetMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_tetMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tetMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_triangleMesh_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "triangleMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxTriangleMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_triangleMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "triangleMesh",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxTriangleMeshGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_heightField_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "heightField",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxHeightFieldGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_heightField",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "heightField",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxHeightFieldGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_particleSystem_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "particleSystem",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxParticleSystemGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_particleSystem",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "particleSystem",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxParticleSystemGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_hairSystem_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hairSystem",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxHairSystemGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_hairSystem",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hairSystem",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxHairSystemGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_custom_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "custom",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxCustomGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_custom",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "custom",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxCustomGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxGeometryHolder_storeAny_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "storeAny",
            "class_name": "PxGeometryHolder",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeometryHolder"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxGeometryHolder_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeometryHolder"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxGeometryHolder"
        }
      }
    },
    {
      "name": "PxGeometryHolder_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxGeometryHolder"
        }
      },
      "params": [
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxGeometryHolder"
        }
      }
    },
    {
      "name": "PxGeometryQuery_raycast",
      "comment": {
        "summary": {
          "b": [
            "Raycast test against a geometry object."
          ]
        },
        "additional": {
          "b": [
            "All geometry types are supported except PxParticleSystemGeometry, PxTetrahedronMeshGeometry and PxHairSystemGeometry.",
            "",
            "Number of hits between the ray and the geometry object"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "maxHits",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "rayHits",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGeomRaycastHit"
                }
              }
            }
          }
        },
        {
          "name": "stride",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxGeometryQuery_overlap",
      "comment": {
        "summary": {
          "b": [
            "Overlap test for two geometry objects."
          ]
        },
        "additional": {
          "b": [
            "All combinations are supported except:",
            "",
            "PxPlaneGeometry vs. {PxPlaneGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}",
            "",
            "PxTriangleMeshGeometry vs. PxHeightFieldGeometry",
            "",
            "PxHeightFieldGeometry vs. PxHeightFieldGeometry",
            "",
            "Anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry.",
            "",
            "True if the two geometry objects overlap"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "geom0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geom1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxGeometryQuery_sweep",
      "comment": {
        "summary": {
          "b": [
            "Sweep a specified geometry object in space and test for collision with a given object."
          ]
        },
        "additional": {
          "b": [
            "The following combinations are supported.",
            "",
            "PxSphereGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}",
            "",
            "PxCapsuleGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}",
            "",
            "PxBoxGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}",
            "",
            "PxConvexMeshGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}",
            "",
            "True if the swept geometry object geom0 hits the object geom1"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "geom0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geom1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "sweepHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxGeomSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        },
        {
          "name": "threadContext",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxGeometryQuery_computePenetration",
      "comment": {
        "summary": {
          "b": [
            "Compute minimum translational distance (MTD) between two geometry objects."
          ]
        },
        "additional": {
          "b": [
            "All combinations of geom objects are supported except:",
            "- plane/plane",
            "- plane/mesh",
            "- plane/heightfield",
            "- mesh/mesh",
            "- mesh/heightfield",
            "- heightfield/heightfield",
            "- anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry",
            "",
            "The function returns a unit vector ('direction') and a penetration depth ('depth').",
            "",
            "The depenetration vector D = direction * depth should be applied to the first object, to",
            "get out of the second object.",
            "",
            "Returned depth should always be positive or null.",
            "",
            "If objects do not overlap, the function can not compute the MTD and returns false.",
            "",
            "True if the MTD has successfully been computed, i.e. if objects do overlap."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computePenetration",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "direction",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "depth",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "geom0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geom1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxGeometryQuery_pointDistance",
      "comment": {
        "summary": {
          "b": [
            "Computes distance between a point and a geometry object."
          ]
        },
        "additional": {
          "b": [
            "Currently supported geometry objects: box, sphere, capsule, convex, mesh.",
            "",
            "For meshes, only the BVH34 midphase data-structure is supported.",
            "",
            "Square distance between the point and the geom object, or 0.0 if the point is inside the object, or -1.0 if an error occured (geometry type is not supported, or invalid pose)"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "pointDistance",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "closestPoint",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "closestIndex",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxGeometryQuery_computeGeomBounds",
      "comment": {
        "summary": {
          "b": [
            "computes the bounds for a geometry object"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computeGeomBounds",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxGeometryQuery_isValid",
      "comment": {
        "summary": {
          "b": [
            "Checks if provided geometry is valid."
          ]
        },
        "additional": {
          "b": [
            "True if geometry is valid."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxGeometryQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxHeightFieldSample_tessFlag",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tessFlag",
            "class_name": "PxHeightFieldSample",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldSample"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UChar"
      }
    },
    {
      "name": "PxHeightFieldSample_setTessFlag_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTessFlag",
            "class_name": "PxHeightFieldSample",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldSample"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxHeightFieldSample_clearTessFlag_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "clearTessFlag",
            "class_name": "PxHeightFieldSample",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldSample"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxHeightField_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a height field and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxHeightField_saveCells",
      "comment": {
        "summary": {
          "b": [
            "Writes out the sample data array."
          ]
        },
        "additional": {
          "b": [
            "The user provides destBufferSize bytes storage at destBuffer.",
            "The data is formatted and arranged as PxHeightFieldDesc.samples.",
            "",
            "The number of bytes written."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "saveCells",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "destBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "destBufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxHeightField_modifySamples_mut",
      "comment": {
        "summary": {
          "b": [
            "Replaces a rectangular subfield in the sample data array."
          ]
        },
        "additional": {
          "b": [
            "The user provides the description of a rectangular subfield in subfieldDesc.",
            "The data is formatted and arranged as PxHeightFieldDesc.samples.",
            "",
            "True on success, false on failure. Failure can occur due to format mismatch.",
            "",
            "Modified samples are constrained to the same height quantization range as the original heightfield.",
            "Source samples that are out of range of target heightfield will be clipped with no error.",
            "PhysX does not keep a mapping from the heightfield to heightfield shapes that reference it.",
            "Call PxShape::setGeometry on each shape which references the height field, to ensure that internal data structures are updated to reflect the new geometry.",
            "Please note that PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "modifySamples",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "startCol",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "startRow",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "subfieldDesc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldDesc"
                }
              }
            }
          }
        },
        {
          "name": "shrinkBounds",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxHeightField_getNbRows",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the number of sample rows in the samples array."
          ]
        },
        "additional": {
          "b": [
            "The number of sample rows in the samples array."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbRows",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxHeightField_getNbColumns",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the number of sample columns in the samples array."
          ]
        },
        "additional": {
          "b": [
            "The number of sample columns in the samples array."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbColumns",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxHeightField_getFormat",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the format of the sample data."
          ]
        },
        "additional": {
          "b": [
            "The format of the sample data."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFormat",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxHeightFieldFormat",
          "cxx_qt": "PxHeightFieldFormat::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxHeightField_getSampleStride",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the offset in bytes between consecutive samples in the array."
          ]
        },
        "additional": {
          "b": [
            "The offset in bytes between consecutive samples in the array."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSampleStride",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxHeightField_getConvexEdgeThreshold",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the convex edge threshold."
          ]
        },
        "additional": {
          "b": [
            "The convex edge threshold."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConvexEdgeThreshold",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxHeightField_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the flags bits, combined from values of the enum ::PxHeightFieldFlag."
          ]
        },
        "additional": {
          "b": [
            "The flags bits, combined from values of the enum ::PxHeightFieldFlag."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxHeightFieldFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxHeightField_getHeight",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the height at the given coordinates in grid space."
          ]
        },
        "additional": {
          "b": [
            "The height at the given coordinates or 0 if the coordinates are out of range."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHeight",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "x",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "z",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxHeightField_getTriangleMaterialIndex",
      "comment": {
        "summary": {
          "b": [
            "Returns material table index of given triangle"
          ]
        },
        "additional": {
          "b": [
            "This function takes a post cooking triangle index.",
            "",
            "Material table index, or 0xffff if no per-triangle materials are used"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangleMaterialIndex",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "triangleIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxHeightField_getTriangleNormal",
      "comment": {
        "summary": {
          "b": [
            "Returns a triangle face normal for a given triangle index"
          ]
        },
        "additional": {
          "b": [
            "This function takes a post cooking triangle index.",
            "",
            "Triangle normal for a given triangle index"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangleNormal",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "triangleIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxHeightField_getSample",
      "comment": {
        "summary": {
          "b": [
            "Returns heightfield sample of given row and column"
          ]
        },
        "additional": {
          "b": [
            "Heightfield sample"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSample",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        },
        {
          "name": "row",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "column",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxHeightFieldSample"
            }
          }
        }
      }
    },
    {
      "name": "PxHeightField_getTimestamp",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of times the heightfield data has been modified"
          ]
        },
        "additional": {
          "b": [
            "This method returns the number of times modifySamples has been called on this heightfield, so that code that has",
            "retained state that depends on the heightfield can efficiently determine whether it has been modified.",
            "",
            "the number of times the heightfield sample data has been modified."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTimestamp",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxHeightField_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxHeightField",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightField"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxHeightFieldDesc_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxHeightFieldDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxHeightFieldDesc"
        }
      }
    },
    {
      "name": "PxHeightFieldDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxHeightFieldDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxHeightFieldDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxHeightFieldDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMeshQuery_getTriangle",
      "comment": {
        "summary": {
          "b": [
            "Retrieves triangle data from a triangle ID."
          ]
        },
        "additional": {
          "b": [
            "This function can be used together with #findOverlapTriangleMesh() to retrieve triangle properties.",
            "",
            "This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getTriangle",
            "class_name": "PxMeshQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "triGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshGeometry"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "triangleIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "triangle",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "vertexIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "adjacencyIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMeshQuery_getTriangle_1",
      "comment": {
        "summary": {
          "b": [
            "Retrieves triangle data from a triangle ID."
          ]
        },
        "additional": {
          "b": [
            "This function can be used together with #findOverlapHeightField() to retrieve triangle properties.",
            "",
            "This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true.",
            "",
            "TriangleIndex is an index used in internal format, which does have an index out of the bounds in last row.",
            "To traverse all tri indices in the HF, the following code can be applied:",
            "for (PxU32 row = 0; row",
            "<",
            "(nbRows - 1); row++)",
            "{",
            "for (PxU32 col = 0; col",
            "<",
            "(nbCols - 1); col++)",
            "{",
            "for (PxU32 k = 0; k",
            "<",
            "2; k++)",
            "{",
            "const PxU32 triIndex = 2 * (row*nbCols + col) + k;",
            "....",
            "}",
            "}",
            "}"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getTriangle",
            "class_name": "PxMeshQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "hfGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldGeometry"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "triangleIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "triangle",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "vertexIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "adjacencyIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMeshQuery_findOverlapTriangleMesh",
      "comment": {
        "summary": {
          "b": [
            "Find the mesh triangles which touch the specified geometry object."
          ]
        },
        "additional": {
          "b": [
            "For mesh-vs-mesh overlap tests, please use the specialized function below.",
            "",
            "Returned triangle indices can be used with #getTriangle() to retrieve the triangle properties.",
            "",
            "Number of overlaps found, i.e. number of elements written to the results buffer"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "findOverlapTriangleMesh",
            "class_name": "PxMeshQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "meshGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshGeometry"
                }
              }
            }
          }
        },
        {
          "name": "meshPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "maxResults",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "overflow",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Bool"
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxMeshQuery_findOverlapHeightField",
      "comment": {
        "summary": {
          "b": [
            "Find the height field triangles which touch the specified geometry object."
          ]
        },
        "additional": {
          "b": [
            "Returned triangle indices can be used with #getTriangle() to retrieve the triangle properties.",
            "",
            "Number of overlaps found, i.e. number of elements written to the results buffer"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "findOverlapHeightField",
            "class_name": "PxMeshQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "hfGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldGeometry"
                }
              }
            }
          }
        },
        {
          "name": "hfPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "maxResults",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "overflow",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Bool"
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxMeshQuery_sweep",
      "comment": {
        "summary": {
          "b": [
            "Sweep a specified geometry object in space and test for collision with a set of given triangles."
          ]
        },
        "additional": {
          "b": [
            "This function simply sweeps input geometry against each input triangle, in the order they are given.",
            "This is an O(N) operation with N = number of input triangles. It does not use any particular acceleration structure.",
            "",
            "True if the swept geometry object hits the specified triangles",
            "",
            "Only the following geometry types are currently supported: PxSphereGeometry, PxCapsuleGeometry, PxBoxGeometry",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.",
            "",
            "This function returns a single closest hit across all the input triangles. Multiple hits are not supported.",
            "",
            "Supported hitFlags are PxHitFlag::eDEFAULT, PxHitFlag::eASSUME_NO_INITIAL_OVERLAP, PxHitFlag::ePRECISE_SWEEP, PxHitFlag::eMESH_BOTH_SIDES, PxHitFlag::eMESH_ANY.",
            "",
            "ePOSITION is only defined when there is no initial overlap (sweepHit.hadInitialOverlap() == false)",
            "",
            "The returned normal for initially overlapping sweeps is set to -unitDir.",
            "",
            "Otherwise the returned normal is the front normal of the triangle even if PxHitFlag::eMESH_BOTH_SIDES is set.",
            "",
            "The returned PxGeomSweepHit::faceIndex parameter will hold the index of the hit triangle in input array, i.e. the range is [0; triangleCount). For initially overlapping sweeps, this is the index of overlapping triangle.",
            "",
            "The inflation parameter is not compatible with PxHitFlag::ePRECISE_SWEEP."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxMeshQuery",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "triangleCount",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "triangles",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "sweepHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxGeomSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "cachedIndex",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "doubleSided",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSimpleTriangleMesh_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSimpleTriangleMesh"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSimpleTriangleMesh"
        }
      }
    },
    {
      "name": "PxSimpleTriangleMesh_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxSimpleTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimpleTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimpleTriangleMesh_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if the current settings are valid"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSimpleTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimpleTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTriangle_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxTriangle"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTriangle"
            }
          }
        }
      }
    },
    {
      "name": "PxTriangle_new_alloc_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxTriangle"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTriangle"
            }
          }
        }
      }
    },
    {
      "name": "PxTriangle_delete",
      "comment": {
        "summary": {
          "b": [
            "Destructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxTriangle"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangle_normal",
      "comment": {
        "summary": {
          "b": [
            "Compute the normal of the Triangle."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normal",
            "class_name": "PxTriangle",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "_normal",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangle_denormalizedNormal",
      "comment": {
        "summary": {
          "b": [
            "Compute the unnormalized normal of the triangle."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "denormalizedNormal",
            "class_name": "PxTriangle",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "_normal",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangle_area",
      "comment": {
        "summary": {
          "b": [
            "Compute the area of the triangle."
          ]
        },
        "additional": {
          "b": [
            "Area of the triangle."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "area",
            "class_name": "PxTriangle",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxTriangle_pointFromUV",
      "comment": {
        "summary": {
          "b": [
            "Computes a point on the triangle from u and v barycentric coordinates."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "pointFromUV",
            "class_name": "PxTriangle",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangle"
                }
              }
            }
          }
        },
        {
          "name": "u",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "v",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxTrianglePadded_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxTrianglePadded"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTrianglePadded"
            }
          }
        }
      }
    },
    {
      "name": "PxTrianglePadded_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxTrianglePadded"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTrianglePadded"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangleMesh_getNbVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of vertices."
          ]
        },
        "additional": {
          "b": [
            "number of vertices"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbVertices",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTriangleMesh_getVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the vertices."
          ]
        },
        "additional": {
          "b": [
            "array of vertices"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVertices",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxTriangleMesh_getVerticesForModification_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns all mesh vertices for modification."
          ]
        },
        "additional": {
          "b": [
            "This function will return the vertices of the mesh so that their positions can be changed in place.",
            "After modifying the vertices you must call refitBVH for the refitting to actually take place.",
            "This function maintains the old mesh topology (triangle indices).",
            "",
            "inplace vertex coordinates for each existing mesh vertex.",
            "",
            "It is recommended to use this feature for scene queries only.",
            "",
            "Size of array returned is equal to the number returned by getNbVertices().",
            "",
            "This function operates on cooked vertex indices.",
            "",
            "This means the index mapping and vertex count can be different from what was provided as an input to the cooking routine.",
            "",
            "To achieve unchanged 1-to-1 index mapping with orignal mesh data (before cooking) please use the following cooking flags:",
            "",
            "eWELD_VERTICES = 0, eDISABLE_CLEAN_MESH = 1.",
            "",
            "It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVerticesForModification",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxTriangleMesh_refitBVH_mut",
      "comment": {
        "summary": {
          "b": [
            "Refits BVH for mesh vertices."
          ]
        },
        "additional": {
          "b": [
            "This function will refit the mesh BVH to correctly enclose the new positions updated by getVerticesForModification.",
            "Mesh BVH will not be reoptimized by this function so significantly different new positions will cause significantly reduced performance.",
            "",
            "New bounds for the entire mesh.",
            "",
            "For PxMeshMidPhase::eBVH34 trees the refit operation is only available on non-quantized trees (see PxBVH34MidphaseDesc::quantized)",
            "",
            "PhysX does not keep a mapping from the mesh to mesh shapes that reference it.",
            "",
            "Call PxShape::setGeometry on each shape which references the mesh, to ensure that internal data structures are updated to reflect the new geometry.",
            "",
            "PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.",
            "",
            "It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled.",
            "",
            "Active edges information will be lost during refit, the rigid body mesh contact generation might not perform as expected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "refitBVH",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxTriangleMesh_getNbTriangles",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of triangles."
          ]
        },
        "additional": {
          "b": [
            "number of triangles"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTriangles",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTriangleMesh_getTriangles",
      "comment": {
        "summary": {
          "b": [
            "Returns the triangle indices."
          ]
        },
        "additional": {
          "b": [
            "The indices can be 16 or 32bit depending on the number of triangles in the mesh.",
            "Call getTriangleMeshFlags() to know if the indices are 16 or 32 bits.",
            "",
            "The number of indices is the number of triangles * 3.",
            "",
            "array of triangles"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangles",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxTriangleMesh_getTriangleMeshFlags",
      "comment": {
        "summary": {
          "b": [
            "Reads the PxTriangleMesh flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxTriangleMeshFlag",
            "",
            "The values of the PxTriangleMesh flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangleMeshFlags",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxTriangleMeshFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxTriangleMesh_getTrianglesRemap",
      "comment": {
        "summary": {
          "b": [
            "Returns the triangle remapping table."
          ]
        },
        "additional": {
          "b": [
            "The triangles are internally sorted according to various criteria. Hence the internal triangle order",
            "does not always match the original (user-defined) order. The remapping table helps finding the old",
            "indices knowing the new ones:",
            "",
            "remapTable[ internalTriangleIndex ] = originalTriangleIndex",
            "",
            "the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTrianglesRemap",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxTriangleMesh_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a triangle mesh and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangleMesh_getTriangleMaterialIndex",
      "comment": {
        "summary": {
          "b": [
            "Returns material table index of given triangle"
          ]
        },
        "additional": {
          "b": [
            "This function takes a post cooking triangle index.",
            "",
            "Material table index, or 0xffff if no per-triangle materials are used"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangleMaterialIndex",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "triangleIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxTriangleMesh_getLocalBounds",
      "comment": {
        "summary": {
          "b": [
            "Returns the local-space (vertex space) AABB from the triangle mesh."
          ]
        },
        "additional": {
          "b": [
            "local-space bounds"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalBounds",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxTriangleMesh_getSDF",
      "comment": {
        "summary": {
          "b": [
            "Returns the local-space Signed Distance Field for this mesh if it has one."
          ]
        },
        "additional": {
          "b": [
            "local-space SDF."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSDF",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Float"
          }
        }
      }
    },
    {
      "name": "PxTriangleMesh_getSDFDimensions",
      "comment": {
        "summary": {
          "b": [
            "Returns the resolution of the local-space dense SDF."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSDFDimensions",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "numX",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "numY",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "numZ",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangleMesh_setPreferSDFProjection_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets whether this mesh should be preferred for SDF projection."
          ]
        },
        "additional": {
          "b": [
            "By default, meshes are flagged as preferring projection and the decisions on which mesh to project is based on the triangle and vertex",
            "count. The model with the fewer triangles is projected onto the SDF of the more detailed mesh.",
            "If one of the meshes is set to prefer SDF projection (default) and the other is set to not prefer SDF projection, model flagged as",
            "preferring SDF projection will be projected onto the model flagged as not preferring, regardless of the detail of the respective meshes.",
            "Where both models are flagged as preferring no projection, the less detailed model will be projected as before."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPreferSDFProjection",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "preferProjection",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangleMesh_getPreferSDFProjection",
      "comment": {
        "summary": {
          "b": [
            "Returns whether this mesh prefers SDF projection."
          ]
        },
        "additional": {
          "b": [
            "whether this mesh prefers SDF projection."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPreferSDFProjection",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTriangleMesh_getMassInformation",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass properties of the mesh assuming unit density."
          ]
        },
        "additional": {
          "b": [
            "The following relationship holds between mass and volume:",
            "",
            "mass = volume * density",
            "",
            "The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.",
            "",
            "Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the",
            "localInertia of the unit density mesh by d."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMassInformation",
            "class_name": "PxTriangleMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "mass",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "localInertia",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "localCenterOfMass",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTetrahedron_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxTetrahedron"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedron"
            }
          }
        }
      }
    },
    {
      "name": "PxTetrahedron_new_alloc_1",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxTetrahedron"
        }
      },
      "params": [
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p3",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedron"
            }
          }
        }
      }
    },
    {
      "name": "PxTetrahedron_delete",
      "comment": {
        "summary": {
          "b": [
            "Destructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxTetrahedron"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedron"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSoftBodyAuxData_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxSoftBodyAuxData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyAuxData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTetrahedronMesh_getNbVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of vertices."
          ]
        },
        "additional": {
          "b": [
            "number of vertices"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbVertices",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTetrahedronMesh_getVertices",
      "comment": {
        "summary": {
          "b": [
            "Returns the vertices"
          ]
        },
        "additional": {
          "b": [
            "array of vertices"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVertices",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxTetrahedronMesh_getNbTetrahedrons",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of tetrahedrons."
          ]
        },
        "additional": {
          "b": [
            "number of tetrahedrons"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTetrahedrons",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxTetrahedronMesh_getTetrahedrons",
      "comment": {
        "summary": {
          "b": [
            "Returns the tetrahedron indices."
          ]
        },
        "additional": {
          "b": [
            "The indices can be 16 or 32bit depending on the number of tetrahedrons in the mesh.",
            "Call getTetrahedronMeshFlags() to know if the indices are 16 or 32 bits.",
            "",
            "The number of indices is the number of tetrahedrons * 4.",
            "",
            "array of tetrahedrons"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTetrahedrons",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": true,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxTetrahedronMesh_getTetrahedronMeshFlags",
      "comment": {
        "summary": {
          "b": [
            "Reads the PxTetrahedronMesh flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxTetrahedronMeshFlags",
            "",
            "The values of the PxTetrahedronMesh flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTetrahedronMeshFlags",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxTetrahedronMeshFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxTetrahedronMesh_getTetrahedraRemap",
      "comment": {
        "summary": {
          "b": [
            "Returns the tetrahedra remapping table."
          ]
        },
        "additional": {
          "b": [
            "The tetrahedra are internally sorted according to various criteria. Hence the internal tetrahedron order",
            "does not always match the original (user-defined) order. The remapping table helps finding the old",
            "indices knowing the new ones:",
            "",
            "remapTable[ internalTetrahedronIndex ] = originalTetrahedronIndex",
            "",
            "the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTetrahedraRemap",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxTetrahedronMesh_getLocalBounds",
      "comment": {
        "summary": {
          "b": [
            "Returns the local-space (vertex space) AABB from the tetrahedron mesh."
          ]
        },
        "additional": {
          "b": [
            "local-space bounds"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalBounds",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxTetrahedronMesh_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxTetrahedronMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSoftBodyMesh_getCollisionMesh",
      "comment": {
        "summary": {
          "b": [
            "Const accecssor to the softbody's collision mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCollisionMesh",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_getCollisionMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Accecssor to the softbody's collision mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCollisionMesh",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_getSimulationMesh",
      "comment": {
        "summary": {
          "b": [
            "Const accessor to the softbody's simulation mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSimulationMesh",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_getSimulationMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Accecssor to the softbody's simulation mesh."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSimulationMesh",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_getSoftBodyAuxData",
      "comment": {
        "summary": {
          "b": [
            "Const accessor to the softbodies simulation state."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSoftBodyAuxData",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodyAuxData"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_getSoftBodyAuxData_mut",
      "comment": {
        "summary": {
          "b": [
            "Accessor to the softbody's auxilary data like mass and rest pose information"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSoftBodyAuxData",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodyAuxData"
            }
          }
        }
      }
    },
    {
      "name": "PxSoftBodyMesh_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxSoftBodyMesh",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodyMesh"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollisionMeshMappingData_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxCollisionMeshMappingData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionMeshMappingData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCollisionTetrahedronMeshData_getMesh",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMesh",
            "class_name": "PxCollisionTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMeshData"
            }
          }
        }
      }
    },
    {
      "name": "PxCollisionTetrahedronMeshData_getMesh_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMesh",
            "class_name": "PxCollisionTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMeshData"
            }
          }
        }
      }
    },
    {
      "name": "PxCollisionTetrahedronMeshData_getData",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getData",
            "class_name": "PxCollisionTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodyCollisionData"
            }
          }
        }
      }
    },
    {
      "name": "PxCollisionTetrahedronMeshData_getData_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getData",
            "class_name": "PxCollisionTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodyCollisionData"
            }
          }
        }
      }
    },
    {
      "name": "PxCollisionTetrahedronMeshData_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxCollisionTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollisionTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationTetrahedronMeshData_getMesh_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMesh",
            "class_name": "PxSimulationTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMeshData"
            }
          }
        }
      }
    },
    {
      "name": "PxSimulationTetrahedronMeshData_getData_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getData",
            "class_name": "PxSimulationTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodySimulationData"
            }
          }
        }
      }
    },
    {
      "name": "PxSimulationTetrahedronMeshData_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxSimulationTetrahedronMeshData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationTetrahedronMeshData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the actor."
          ]
        },
        "additional": {
          "b": [
            "Do not keep a reference to the deleted instance.",
            "",
            "If the actor belongs to a #PxAggregate object, it is automatically removed from the aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_getType",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the type of actor."
          ]
        },
        "additional": {
          "b": [
            "The actor type of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxActorType",
          "cxx_qt": "PxActorType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxActor_getScene",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene which this actor belongs to."
          ]
        },
        "additional": {
          "b": [
            "Owner Scene. NULL if not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxActor_setName_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a name string for the object that can be retrieved with getName()."
          ]
        },
        "additional": {
          "b": [
            "This is for debugging and is not used by the SDK. The string is not copied by the SDK,",
            "only the pointer is stored.",
            "",
            "Default:",
            "NULL"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setName",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_getName",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the name string set with setName()."
          ]
        },
        "additional": {
          "b": [
            "Name string associated with object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getName",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxActor_getWorldBounds",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the axis aligned bounding box enclosing the actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "The actor's bounding box."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWorldBounds",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxActor_setActorFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Raises or clears a particular actor flag."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxActorFlag",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setActorFlag",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxActorFlag",
              "cxx_qt": "PxActorFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_setActorFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the actor flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxActorFlag"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setActorFlags",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "inFlags",
          "kind": {
            "Flags": {
              "name": "PxActorFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_getActorFlags",
      "comment": {
        "summary": {
          "b": [
            "Reads the PxActor flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxActorFlag",
            "",
            "The values of the PxActor flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActorFlags",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxActorFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxActor_setDominanceGroup_mut",
      "comment": {
        "summary": {
          "b": [
            "Assigns dynamic actors a dominance group identifier."
          ]
        },
        "additional": {
          "b": [
            "PxDominanceGroup is a 5 bit group identifier (legal range from 0 to 31).",
            "",
            "The PxScene::setDominanceGroupPair() lets you set certain behaviors for pairs of dominance groups.",
            "By default every dynamic actor is created in group 0.",
            "",
            "Default:",
            "0",
            "",
            "Sleeping:",
            "Changing the dominance group does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDominanceGroup",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "dominanceGroup",
          "kind": {
            "Builtin": "UChar"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_getDominanceGroup",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the value set with setDominanceGroup()."
          ]
        },
        "additional": {
          "b": [
            "The dominance group of this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDominanceGroup",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UChar"
      }
    },
    {
      "name": "PxActor_setOwnerClient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the owner client of an actor."
          ]
        },
        "additional": {
          "b": [
            "This cannot be done once the actor has been placed into a scene.",
            "",
            "Default:",
            "PX_DEFAULT_CLIENT"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setOwnerClient",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "inClient",
          "kind": {
            "Builtin": "UChar"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxActor_getOwnerClient",
      "comment": {
        "summary": {
          "b": [
            "Returns the owner client that was specified at creation time."
          ]
        },
        "additional": {
          "b": [
            "This value cannot be changed once the object is placed into the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getOwnerClient",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UChar"
      }
    },
    {
      "name": "PxActor_getAggregate",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the aggregate the actor might be a part of."
          ]
        },
        "additional": {
          "b": [
            "The aggregate the actor is a part of, or NULL if the actor does not belong to an aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAggregate",
            "class_name": "PxActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAggregate"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetAggregateFilterHint",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetAggregateFilterHint",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxAggregateType",
              "cxx_qt": "PxAggregateType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "enableSelfCollision",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxGetAggregateSelfCollisionBit",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetAggregateSelfCollisionBit",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "hint",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxGetAggregateType",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetAggregateType",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "hint",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxAggregateType",
          "cxx_qt": "PxAggregateType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxAggregate_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the aggregate object."
          ]
        },
        "additional": {
          "b": [
            "Deleting the PxAggregate object does not delete the aggregated actors. If the PxAggregate object",
            "belongs to a scene, the aggregated actors are automatically re-inserted in that scene. If you intend",
            "to delete both the PxAggregate and its actors, it is best to release the actors first, then release",
            "the PxAggregate when it is empty."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAggregate_addActor_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an actor to the aggregate object."
          ]
        },
        "additional": {
          "b": [
            "A warning is output if the total number of actors is reached, or if the incoming actor already belongs",
            "to an aggregate.",
            "",
            "If the aggregate belongs to a scene, adding an actor to the aggregate also adds the actor to that scene.",
            "",
            "If the actor already belongs to a scene, a warning is output and the call is ignored. You need to remove",
            "the actor from the scene first, before adding it to the aggregate.",
            "",
            "When a BVH is provided the actor shapes are grouped together.",
            "The scene query pruning structure inside PhysX SDK will store/update one",
            "bound per actor. The scene queries against such an actor will query actor",
            "bounds and then make a local space query against the provided BVH, which is in actor's local space."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addActor",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "bvh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxAggregate_removeActor_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an actor from the aggregate object."
          ]
        },
        "additional": {
          "b": [
            "A warning is output if the incoming actor does not belong to the aggregate. Otherwise the actor is",
            "removed from the aggregate. If the aggregate belongs to a scene, the actor is reinserted in that",
            "scene. If you intend to delete the actor, it is best to call #PxActor::release() directly. That way",
            "the actor will be automatically removed from its aggregate (if any) and not reinserted in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeActor",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxAggregate_addArticulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an articulation to the aggregate object."
          ]
        },
        "additional": {
          "b": [
            "A warning is output if the total number of actors is reached (every articulation link counts as an actor),",
            "or if the incoming articulation already belongs to an aggregate.",
            "",
            "If the aggregate belongs to a scene, adding an articulation to the aggregate also adds the articulation to that scene.",
            "",
            "If the articulation already belongs to a scene, a warning is output and the call is ignored. You need to remove",
            "the articulation from the scene first, before adding it to the aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addArticulation",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "articulation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxAggregate_removeArticulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an articulation from the aggregate object."
          ]
        },
        "additional": {
          "b": [
            "A warning is output if the incoming articulation does not belong to the aggregate. Otherwise the articulation is",
            "removed from the aggregate. If the aggregate belongs to a scene, the articulation is reinserted in that",
            "scene. If you intend to delete the articulation, it is best to call #PxArticulationReducedCoordinate::release() directly. That way",
            "the articulation will be automatically removed from its aggregate (if any) and not reinserted in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeArticulation",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "articulation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxAggregate_getNbActors",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of actors contained in the aggregate."
          ]
        },
        "additional": {
          "b": [
            "You can use #getActors() to retrieve the actor pointers.",
            "",
            "Number of actors contained in the aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbActors",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxAggregate_getMaxNbShapes",
      "comment": {
        "summary": {
          "b": [
            "Retrieves max amount of shapes that can be contained in the aggregate."
          ]
        },
        "additional": {
          "b": [
            "Max shape size."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxNbShapes",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxAggregate_getActors",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all actors contained in the aggregate."
          ]
        },
        "additional": {
          "b": [
            "You can retrieve the number of actor pointers by calling #getNbActors()",
            "",
            "Number of actor pointers written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActors",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": true,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxAggregate_getScene_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene which this aggregate belongs to."
          ]
        },
        "additional": {
          "b": [
            "Owner Scene. NULL if not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxAggregate_getSelfCollision",
      "comment": {
        "summary": {
          "b": [
            "Retrieves aggregate's self-collision flag."
          ]
        },
        "additional": {
          "b": [
            "self-collision flag"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSelfCollision",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxAggregate_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxAggregate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxConstraintInvMassScale_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxConstraintInvMassScale"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxConstraintInvMassScale"
        }
      }
    },
    {
      "name": "PxConstraintInvMassScale_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxConstraintInvMassScale"
        }
      },
      "params": [
        {
          "name": "lin0",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ang0",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "lin1",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "ang1",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxConstraintInvMassScale"
        }
      }
    },
    {
      "name": "PxConstraintVisualizer_visualizeJointFrames_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize joint frames"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeJointFrames",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "parent",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "child",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintVisualizer_visualizeLinearLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize joint linear limit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeLinearLimit",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "t0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "t1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "active",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintVisualizer_visualizeAngularLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize joint angular limit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeAngularLimit",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "t0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "lower",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "upper",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "active",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintVisualizer_visualizeLimitCone_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize limit cone"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeLimitCone",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "tanQSwingY",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "tanQSwingZ",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "active",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintVisualizer_visualizeDoubleCone_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize joint double cone"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeDoubleCone",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "angle",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "active",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintVisualizer_visualizeLine_mut",
      "comment": {
        "summary": {
          "b": [
            "Visualize line"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "visualizeLine",
            "class_name": "PxConstraintVisualizer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintVisualizer"
                }
              }
            }
          }
        },
        {
          "name": "p0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "p1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "color",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintConnector_prepareData_mut",
      "comment": {
        "summary": {
          "b": [
            "Pre-simulation data preparation",
            "when the constraint is marked dirty, this function is called at the start of the simulation",
            "step for the SDK to copy the constraint data block."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "prepareData",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxConstraintConnector_onConstraintRelease_mut",
      "comment": {
        "summary": {
          "b": [
            "Constraint release callback"
          ]
        },
        "additional": {
          "b": [
            "When the SDK deletes a PxConstraint object this function is called by the SDK. In general",
            "custom constraints should not be deleted directly by applications: rather, the constraint",
            "should respond to a release() request by calling PxConstraint::release(), then wait for",
            "this call to release its own resources.",
            "",
            "This function is also called when a PxConstraint object is deleted on cleanup due to",
            "destruction of the PxPhysics object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onConstraintRelease",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintConnector_onComShift_mut",
      "comment": {
        "summary": {
          "b": [
            "Center-of-mass shift callback"
          ]
        },
        "additional": {
          "b": [
            "This function is called by the SDK when the CoM of one of the actors is moved. Since the",
            "API specifies constraint positions relative to actors, and the constraint shader functions",
            "are supplied with coordinates relative to bodies, some synchronization is usually required",
            "when the application moves an object's center of mass."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onComShift",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintConnector_onOriginShift_mut",
      "comment": {
        "summary": {
          "b": [
            "Origin shift callback"
          ]
        },
        "additional": {
          "b": [
            "This function is called by the SDK when the scene origin gets shifted and allows to adjust",
            "custom data which contains world space transforms.",
            "",
            "If the adjustments affect constraint shader data, it is necessary to call PxConstraint::markDirty()",
            "to make sure that the data gets synced at the beginning of the next simulation step."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onOriginShift",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        },
        {
          "name": "shift",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintConnector_getSerializable_mut",
      "comment": {
        "summary": {
          "b": [
            "Obtain a reference to a PxBase interface if the constraint has one."
          ]
        },
        "additional": {
          "b": [
            "If the constraint does not implement the PxBase interface, it should return NULL."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSerializable",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBase"
            }
          }
        }
      }
    },
    {
      "name": "PxConstraintConnector_getConstantBlock",
      "comment": {
        "summary": {
          "b": [
            "Obtain the pointer to the constraint's constant data"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConstantBlock",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxConstraintConnector_connectToConstraint_mut",
      "comment": {
        "summary": {
          "b": [
            "Let the connector know it has been connected to a constraint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "connectToConstraint",
            "class_name": "PxConstraintConnector",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintConnector_delete",
      "comment": {
        "summary": {
          "b": [
            "virtual destructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxConstraintConnector"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSolverBody_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxSolverBody"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSolverBody"
        }
      }
    },
    {
      "name": "PxSolverBodyData_projectVelocity",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "projectVelocity",
            "class_name": "PxSolverBodyData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSolverBodyData"
                }
              }
            }
          }
        },
        {
          "name": "lin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "ang",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxSolverConstraintPrepDesc_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSolverConstraintPrepDesc"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSolverConstraintPrepDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraintAllocator_reserveConstraintData_mut",
      "comment": {
        "summary": {
          "b": [
            "Allocates constraint data. It is the application's responsibility to release this memory after PxSolveConstraints has completed."
          ]
        },
        "additional": {
          "b": [
            "The allocated memory. This address must be 16-byte aligned."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reserveConstraintData",
            "class_name": "PxConstraintAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintAllocator"
                }
              }
            }
          }
        },
        {
          "name": "byteSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UChar"
          }
        }
      }
    },
    {
      "name": "PxConstraintAllocator_reserveFrictionData_mut",
      "comment": {
        "summary": {
          "b": [
            "Allocates friction data. Friction data can be retained by the application for a given pair and provided as an input to PxSolverContactDesc to improve simulation stability.",
            "It is the application's responsibility to release this memory. If this memory is released, the application should ensure it does not pass pointers to this memory to PxSolverContactDesc."
          ]
        },
        "additional": {
          "b": [
            "The allocated memory. This address must be 4-byte aligned."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reserveFrictionData",
            "class_name": "PxConstraintAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintAllocator"
                }
              }
            }
          }
        },
        {
          "name": "byteSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UChar"
          }
        }
      }
    },
    {
      "name": "PxConstraintAllocator_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxConstraintAllocator"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintAllocator"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationLimit_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxArticulationLimit"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxArticulationLimit"
        }
      }
    },
    {
      "name": "PxArticulationLimit_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxArticulationLimit"
        }
      },
      "params": [
        {
          "name": "low_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "high_",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationLimit"
        }
      }
    },
    {
      "name": "PxArticulationDrive_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxArticulationDrive"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxArticulationDrive"
        }
      }
    },
    {
      "name": "PxArticulationDrive_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxArticulationDrive"
        }
      },
      "params": [
        {
          "name": "stiffness_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "damping_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "maxForce_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "driveType_",
          "kind": {
            "Enum": {
              "name": "PxArticulationDriveType",
              "cxx_qt": "PxArticulationDriveType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationDrive"
        }
      }
    },
    {
      "name": "PxTGSSolverBodyVel_projectVelocity",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "projectVelocity",
            "class_name": "PxTGSSolverBodyVel",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTGSSolverBodyVel"
                }
              }
            }
          }
        },
        {
          "name": "lin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "ang",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxTGSSolverBodyData_projectVelocity",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "projectVelocity",
            "class_name": "PxTGSSolverBodyData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTGSSolverBodyData"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angular",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxTGSSolverConstraintPrepDesc_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxTGSSolverConstraintPrepDesc"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTGSSolverConstraintPrepDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_setRestLength_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the spring rest length for the sub-tendon from the root to this leaf attachment."
          ]
        },
        "additional": {
          "b": [
            "Setting this on non-leaf attachments has no effect."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestLength",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        },
        {
          "name": "restLength",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_getRestLength",
      "comment": {
        "summary": {
          "b": [
            "Gets the spring rest length for the sub-tendon from the root to this leaf attachment."
          ]
        },
        "additional": {
          "b": [
            "The rest length."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestLength",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationAttachment_setLimitParameters_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the low and high limit on the length of the sub-tendon from the root to this leaf attachment."
          ]
        },
        "additional": {
          "b": [
            "Setting this on non-leaf attachments has no effect."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimitParameters",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        },
        {
          "name": "parameters",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonLimit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_getLimitParameters",
      "comment": {
        "summary": {
          "b": [
            "Gets the low and high limit on the length of the sub-tendon from the root to this leaf attachment."
          ]
        },
        "additional": {
          "b": [
            "Struct with the low and high limit."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimitParameters",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationTendonLimit"
        }
      }
    },
    {
      "name": "PxArticulationAttachment_setRelativeOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the attachment's relative offset in the link actor frame."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRelativeOffset",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_getRelativeOffset",
      "comment": {
        "summary": {
          "b": [
            "Gets the attachment's relative offset in the link actor frame."
          ]
        },
        "additional": {
          "b": [
            "The relative offset in the link actor frame."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRelativeOffset",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxArticulationAttachment_setCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the attachment coefficient."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCoefficient",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_getCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Gets the attachment coefficient."
          ]
        },
        "additional": {
          "b": [
            "The scale that the distance between this attachment and its parent is multiplied by when summing up the spatial tendon's length."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCoefficient",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationAttachment_getLink",
      "comment": {
        "summary": {
          "b": [
            "Gets the articulation link."
          ]
        },
        "additional": {
          "b": [
            "The articulation link that this attachment is attached to."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLink",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationAttachment_getParent",
      "comment": {
        "summary": {
          "b": [
            "Gets the parent attachment."
          ]
        },
        "additional": {
          "b": [
            "The parent attachment."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getParent",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationAttachment"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationAttachment_isLeaf",
      "comment": {
        "summary": {
          "b": [
            "Indicates that this attachment is a leaf, and thus defines a sub-tendon from the root to this attachment."
          ]
        },
        "additional": {
          "b": [
            "True: This attachment is a leaf and has zero children; False: Not a leaf."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isLeaf",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxArticulationAttachment_getTendon",
      "comment": {
        "summary": {
          "b": [
            "Gets the spatial tendon that the attachment is a part of."
          ]
        },
        "additional": {
          "b": [
            "The tendon."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTendon",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationSpatialTendon"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationAttachment_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the attachment."
          ]
        },
        "additional": {
          "b": [
            "Releasing the attachment is not allowed while the articulation is in a scene. In order to",
            "release the attachment, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationAttachment_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationAttachment",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationTendonJoint_setCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the tendon joint coefficient."
          ]
        },
        "additional": {
          "b": [
            "RecipCoefficient is commonly expected to be 1/coefficient, but it can be set to different values to tune behavior; for example, zero can be used to",
            "have a joint axis only participate in the length computation of the tendon, but not have any tendon force applied to it."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCoefficient",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "recipCoefficient",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendonJoint_getCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Gets the tendon joint coefficient."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCoefficient",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Enum": {
                  "name": "PxArticulationAxis",
                  "cxx_qt": "PxArticulationAxis::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "recipCoefficient",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendonJoint_getLink",
      "comment": {
        "summary": {
          "b": [
            "Gets the articulation link."
          ]
        },
        "additional": {
          "b": [
            "The articulation link (and its incoming joint in particular) that this tendon joint is associated with."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLink",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationTendonJoint_getParent",
      "comment": {
        "summary": {
          "b": [
            "Gets the parent tendon joint."
          ]
        },
        "additional": {
          "b": [
            "The parent tendon joint."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getParent",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationTendonJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationTendonJoint_getTendon",
      "comment": {
        "summary": {
          "b": [
            "Gets the tendon that the joint is a part of."
          ]
        },
        "additional": {
          "b": [
            "The tendon."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTendon",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationFixedTendon"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationTendonJoint_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases a tendon joint."
          ]
        },
        "additional": {
          "b": [
            "Releasing a tendon joint is not allowed while the articulation is in a scene. In order to",
            "release the joint, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendonJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationTendonJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationTendon_setStiffness_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the spring stiffness term acting on the tendon length."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStiffness",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        },
        {
          "name": "stiffness",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendon_getStiffness",
      "comment": {
        "summary": {
          "b": [
            "Gets the spring stiffness of the tendon."
          ]
        },
        "additional": {
          "b": [
            "The spring stiffness."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStiffness",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationTendon_setDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the damping term acting both on the tendon length and tendon-length limits."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDamping",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        },
        {
          "name": "damping",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendon_getDamping",
      "comment": {
        "summary": {
          "b": [
            "Gets the damping term acting both on the tendon length and tendon-length limits."
          ]
        },
        "additional": {
          "b": [
            "The damping term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDamping",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationTendon_setLimitStiffness_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the limit stiffness term acting on the tendon's length limits."
          ]
        },
        "additional": {
          "b": [
            "For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimitStiffness",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        },
        {
          "name": "stiffness",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendon_getLimitStiffness",
      "comment": {
        "summary": {
          "b": [
            "Gets the limit stiffness term acting on the tendon's length limits."
          ]
        },
        "additional": {
          "b": [
            "For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons.",
            "",
            "The limit stiffness term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimitStiffness",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationTendon_setOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the length offset term for the tendon."
          ]
        },
        "additional": {
          "b": [
            "An offset defines an amount to be added to the accumulated length computed for the tendon. It allows the",
            "application to actuate the tendon by shortening or lengthening it."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setOffset",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationTendon_getOffset",
      "comment": {
        "summary": {
          "b": [
            "Gets the length offset term for the tendon."
          ]
        },
        "additional": {
          "b": [
            "The offset term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getOffset",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationTendon_getArticulation",
      "comment": {
        "summary": {
          "b": [
            "Gets the articulation that the tendon is a part of."
          ]
        },
        "additional": {
          "b": [
            "The articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArticulation",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationReducedCoordinate"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationTendon_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases a tendon to remove it from the articulation and free its associated memory."
          ]
        },
        "additional": {
          "b": [
            "When an articulation is released, its attached tendons are automatically released.",
            "",
            "Releasing a tendon is not allowed while the articulation is in a scene. In order to",
            "release the tendon, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendon"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationSpatialTendon_createAttachment_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates an articulation attachment and adds it to the list of children in the parent attachment."
          ]
        },
        "additional": {
          "b": [
            "Creating an attachment is not allowed while the articulation is in a scene. In order to",
            "add the attachment, remove and then re-add the articulation to the scene.",
            "",
            "The newly-created attachment if creation was successful, otherwise a null pointer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createAttachment",
            "class_name": "PxArticulationSpatialTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSpatialTendon"
                }
              }
            }
          }
        },
        {
          "name": "parent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationAttachment"
                }
              }
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "relativeOffset",
          "kind": {
            "Builtin": "Vec3"
          }
        },
        {
          "name": "link",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationAttachment"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationSpatialTendon_getAttachments",
      "comment": {
        "summary": {
          "b": [
            "Fills a user-provided buffer of attachment pointers with the set of attachments."
          ]
        },
        "additional": {
          "b": [
            "The number of attachments that were filled into the user buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAttachments",
            "class_name": "PxArticulationSpatialTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSpatialTendon"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationAttachment"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationSpatialTendon_getNbAttachments",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of attachments in the tendon."
          ]
        },
        "additional": {
          "b": [
            "The number of attachments."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbAttachments",
            "class_name": "PxArticulationSpatialTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSpatialTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationSpatialTendon_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationSpatialTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSpatialTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationFixedTendon_createTendonJoint_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates an articulation tendon joint and adds it to the list of children in the parent tendon joint."
          ]
        },
        "additional": {
          "b": [
            "Creating a tendon joint is not allowed while the articulation is in a scene. In order to",
            "add the joint, remove and then re-add the articulation to the scene.",
            "",
            "The newly-created tendon joint if creation was successful, otherwise a null pointer.",
            "",
            "- The axis motion must not be configured as PxArticulationMotion::eLOCKED.",
            "- The axis cannot be part of a fixed joint, i.e. joint configured as PxArticulationJointType::eFIX."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createTendonJoint",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        },
        {
          "name": "parent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonJoint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "recipCoefficient",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "link",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationTendonJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationFixedTendon_getTendonJoints",
      "comment": {
        "summary": {
          "b": [
            "Fills a user-provided buffer of tendon-joint pointers with the set of tendon joints."
          ]
        },
        "additional": {
          "b": [
            "The number of tendon joints filled into the user buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTendonJoints",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationTendonJoint"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationFixedTendon_getNbTendonJoints",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of tendon joints in the tendon."
          ]
        },
        "additional": {
          "b": [
            "The number of tendon joints."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTendonJoints",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationFixedTendon_setRestLength_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the spring rest length of the tendon."
          ]
        },
        "additional": {
          "b": [
            "The accumulated \"length\" of a fixed tendon is a linear combination of the joint axis positions that the tendon is",
            "associated with, scaled by the respective tendon joints' coefficients. As such, when the joint positions of all",
            "joints are zero, the accumulated length of a fixed tendon is zero.",
            "",
            "The spring of the tendon is not exerting any force on the articulation when the rest length is equal to the",
            "tendon's accumulated length plus the tendon offset."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestLength",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        },
        {
          "name": "restLength",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationFixedTendon_getRestLength",
      "comment": {
        "summary": {
          "b": [
            "Gets the spring rest length of the tendon."
          ]
        },
        "additional": {
          "b": [
            "The spring rest length of the tendon."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestLength",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationFixedTendon_setLimitParameters_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the low and high limit on the length of the tendon."
          ]
        },
        "additional": {
          "b": [
            "The limits, together with the damping and limit stiffness parameters, act on the accumulated length of the tendon."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimitParameters",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        },
        {
          "name": "parameter",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxArticulationTendonLimit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationFixedTendon_getLimitParameters",
      "comment": {
        "summary": {
          "b": [
            "Gets the low and high limit on the length of the tendon."
          ]
        },
        "additional": {
          "b": [
            "Struct with the low and high limit."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimitParameters",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationTendonLimit"
        }
      }
    },
    {
      "name": "PxArticulationFixedTendon_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationFixedTendon",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationFixedTendon"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationCache_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxArticulationCache"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxArticulationCache"
        }
      }
    },
    {
      "name": "PxArticulationCache_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases an articulation cache."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationCache",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationSensor_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the sensor."
          ]
        },
        "additional": {
          "b": [
            "Releasing a sensor is not allowed while the articulation is in a scene. In order to",
            "release a sensor, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationSensor_getForces",
      "comment": {
        "summary": {
          "b": [
            "Returns the spatial force in the local frame of the sensor."
          ]
        },
        "additional": {
          "b": [
            "The spatial force.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getForces",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSpatialForce"
        }
      }
    },
    {
      "name": "PxArticulationSensor_getRelativePose",
      "comment": {
        "summary": {
          "b": [
            "Returns the relative pose between this sensor and the body frame of the link that the sensor is attached to."
          ]
        },
        "additional": {
          "b": [
            "The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.",
            "",
            "The transform link body frame -> sensor frame."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRelativePose",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxArticulationSensor_setRelativePose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the relative pose between this sensor and the body frame of the link that the sensor is attached to."
          ]
        },
        "additional": {
          "b": [
            "The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.",
            "",
            "Setting the sensor relative pose is not allowed while the articulation is in a scene. In order to",
            "set the pose, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRelativePose",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationSensor_getLink",
      "comment": {
        "summary": {
          "b": [
            "Returns the link that this sensor is attached to."
          ]
        },
        "additional": {
          "b": [
            "A pointer to the link."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLink",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationSensor_getIndex",
      "comment": {
        "summary": {
          "b": [
            "Returns the index of this sensor inside the articulation."
          ]
        },
        "additional": {
          "b": [
            "The return value is only valid for sensors attached to articulations that are in a scene.",
            "",
            "The low-level index, or 0xFFFFFFFF if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getIndex",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationSensor_getArticulation",
      "comment": {
        "summary": {
          "b": [
            "Returns the articulation that this sensor is part of."
          ]
        },
        "additional": {
          "b": [
            "A pointer to the articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArticulation",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationReducedCoordinate"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationSensor_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Returns the sensor's flags."
          ]
        },
        "additional": {
          "b": [
            "The current set of flags of the sensor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxArticulationSensorFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxArticulationSensor_setFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a flag of the sensor."
          ]
        },
        "additional": {
          "b": [
            "Setting the sensor flags is not allowed while the articulation is in a scene. In order to",
            "set the flags, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlag",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxArticulationSensorFlag",
              "cxx_qt": "PxArticulationSensorFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "enabled",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationSensor_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationSensor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationSensor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getScene",
      "comment": {
        "summary": {
          "b": [
            "Returns the scene which this articulation belongs to."
          ]
        },
        "additional": {
          "b": [
            "Owner Scene. NULL if not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setSolverIterationCounts_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the solver iteration counts for the articulation."
          ]
        },
        "additional": {
          "b": [
            "The solver iteration count determines how accurately contacts, drives, and limits are resolved.",
            "Setting a higher position iteration count may therefore help in scenarios where the articulation",
            "is subject to many constraints; for example, a manipulator articulation with drives and joint limits",
            "that is grasping objects, or several such articulations interacting through contacts. Other situations",
            "where higher position iterations may improve simulation fidelity are: large mass ratios within the",
            "articulation or between the articulation and an object in contact with it; or strong drives in the",
            "articulation being used to manipulate a light object.",
            "",
            "If intersecting bodies are being depenetrated too violently, increase the number of velocity",
            "iterations. More velocity iterations will drive the relative exit velocity of the intersecting",
            "objects closer to the correct value given the restitution.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSolverIterationCounts",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "minPositionIters",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "minVelocityIters",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getSolverIterationCounts",
      "comment": {
        "summary": {
          "b": [
            "Returns the solver iteration counts."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSolverIterationCounts",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "minPositionIters",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "minVelocityIters",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_isSleeping",
      "comment": {
        "summary": {
          "b": [
            "Returns true if this articulation is sleeping."
          ]
        },
        "additional": {
          "b": [
            "When an actor does not move for a period of time, it is no longer simulated in order to save time. This state",
            "is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,",
            "or a sleep-affecting property is changed by the user, the entire sleep mechanism should be transparent to the user.",
            "",
            "An articulation can only go to sleep if all links are ready for sleeping. An articulation is guaranteed to be awake",
            "if at least one of the following holds:",
            "",
            "The wake counter is positive (see #setWakeCounter()).",
            "",
            "The linear or angular velocity of any link is non-zero.",
            "",
            "A non-zero force or torque has been applied to the articulation or any of its links.",
            "",
            "If an articulation is sleeping, the following state is guaranteed:",
            "",
            "The wake counter is zero.",
            "",
            "The linear and angular velocity of all links is zero.",
            "",
            "There is no force update pending.",
            "",
            "When an articulation gets inserted into a scene, it will be considered asleep if all the points above hold, else it will",
            "be treated as awake.",
            "",
            "If an articulation is asleep after the call to #PxScene::fetchResults() returns, it is guaranteed that the poses of the",
            "links were not changed. You can use this information to avoid updating the transforms of associated objects.",
            "",
            "True if the articulation is sleeping.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation,",
            "except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSleeping",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setSleepThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the mass-normalized energy threshold below which the articulation may go to sleep."
          ]
        },
        "additional": {
          "b": [
            "The articulation will sleep if the energy of each link is below this threshold.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSleepThreshold",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getSleepThreshold",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass-normalized energy below which the articulation may go to sleep."
          ]
        },
        "additional": {
          "b": [
            "The energy threshold for sleeping."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSleepThreshold",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setStabilizationThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the mass-normalized kinetic energy threshold below which the articulation may participate in stabilization."
          ]
        },
        "additional": {
          "b": [
            "Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.",
            "",
            "This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.",
            "",
            "Default:",
            "0.01 * PxTolerancesScale::speed * PxTolerancesScale::speed",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStabilizationThreshold",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getStabilizationThreshold",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass-normalized kinetic energy below which the articulation may participate in stabilization."
          ]
        },
        "additional": {
          "b": [
            "Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.",
            "",
            "The energy threshold for participating in stabilization."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStabilizationThreshold",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setWakeCounter_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the wake counter for the articulation in seconds."
          ]
        },
        "additional": {
          "b": [
            "- The wake counter value determines the minimum amount of time until the articulation can be put to sleep.",
            "- An articulation will not be put to sleep if the energy is above the specified threshold (see #setSleepThreshold())",
            "or if other awake objects are touching it.",
            "- Passing in a positive value will wake up the articulation automatically.",
            "",
            "Default:",
            "0.4s (which corresponds to 20 frames for a time step of 0.02s)",
            "",
            "This call may not be made during simulation, except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setWakeCounter",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "wakeCounterValue",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getWakeCounter",
      "comment": {
        "summary": {
          "b": [
            "Returns the wake counter of the articulation in seconds."
          ]
        },
        "additional": {
          "b": [
            "The wake counter of the articulation in seconds.",
            "",
            "This call may not be made during simulation, except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWakeCounter",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_wakeUp_mut",
      "comment": {
        "summary": {
          "b": [
            "Wakes up the articulation if it is sleeping."
          ]
        },
        "additional": {
          "b": [
            "- The articulation will get woken up and might cause other touching objects to wake up as well during the next simulation step.",
            "- This will set the wake counter of the articulation to the value specified in #PxSceneDesc::wakeCounterResetValue.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation,",
            "except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "wakeUp",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_putToSleep_mut",
      "comment": {
        "summary": {
          "b": [
            "Forces the articulation to sleep."
          ]
        },
        "additional": {
          "b": [
            "- The articulation will stay asleep during the next simulation step if not touched by another non-sleeping actor.",
            "- This will set any applied force, the velocity, and the wake counter of all bodies in the articulation to zero.",
            "",
            "This call may not be made during simulation, and may only be made on articulations that are in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "putToSleep",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_setMaxCOMLinearVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the limit on the magnitude of the linear velocity of the articulation's center of mass."
          ]
        },
        "additional": {
          "b": [
            "- The limit acts on the linear velocity of the entire articulation. The velocity is calculated from the total momentum",
            "and the spatial inertia of the articulation.",
            "- The limit only applies to floating-base articulations.",
            "- A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual",
            "artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom",
            "limits may still help avoid numerical issues.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxCOMLinearVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "maxLinearVelocity",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getMaxCOMLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the limit on the magnitude of the linear velocity of the articulation's center of mass."
          ]
        },
        "additional": {
          "b": [
            "The maximal linear velocity magnitude."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxCOMLinearVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setMaxCOMAngularVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the limit on the magnitude of the angular velocity at the articulation's center of mass."
          ]
        },
        "additional": {
          "b": [
            "- The limit acts on the angular velocity of the entire articulation. The velocity is calculated from the total momentum",
            "and the spatial inertia of the articulation.",
            "- The limit only applies to floating-base articulations.",
            "- A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual",
            "artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom",
            "limits may still help avoid numerical issues.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxCOMAngularVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "maxAngularVelocity",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getMaxCOMAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the limit on the magnitude of the angular velocity at the articulation's center of mass."
          ]
        },
        "additional": {
          "b": [
            "The maximal angular velocity magnitude."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxCOMAngularVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_createLink_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a link to the articulation with default attribute values."
          ]
        },
        "additional": {
          "b": [
            "The new link, or NULL if the link cannot be created.",
            "",
            "Creating a link is not allowed while the articulation is in a scene. In order to add a link,",
            "remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createLink",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "parent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the articulation, and all its links and corresponding joints."
          ]
        },
        "additional": {
          "b": [
            "Attached sensors and tendons are released automatically when the articulation is released.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbLinks",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of links in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of links."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbLinks",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getLinks",
      "comment": {
        "summary": {
          "b": [
            "Returns the set of links in the articulation in the order that they were added to the articulation using createLink."
          ]
        },
        "additional": {
          "b": [
            "The number of links written into the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinks",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationLink"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbShapes",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of shapes in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of shapes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbShapes",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setName_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a name string for the articulation that can be retrieved with getName()."
          ]
        },
        "additional": {
          "b": [
            "This is for debugging and is not used by the SDK. The string is not copied by the SDK,",
            "only the pointer is stored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setName",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getName",
      "comment": {
        "summary": {
          "b": [
            "Returns the name string set with setName()."
          ]
        },
        "additional": {
          "b": [
            "Name string associated with the articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getName",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getWorldBounds",
      "comment": {
        "summary": {
          "b": [
            "Returns the axis-aligned bounding box enclosing the articulation."
          ]
        },
        "additional": {
          "b": [
            "The articulation's bounding box.",
            "",
            "It is not allowed to use this method while the simulation is running, except in a split simulation",
            "during #PxScene::collide() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWorldBounds",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getAggregate",
      "comment": {
        "summary": {
          "b": [
            "Returns the aggregate the articulation might be a part of."
          ]
        },
        "additional": {
          "b": [
            "The aggregate the articulation is a part of, or NULL if the articulation does not belong to an aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAggregate",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAggregate"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setArticulationFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets flags on the articulation."
          ]
        },
        "additional": {
          "b": [
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setArticulationFlags",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxArticulationFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_setArticulationFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Raises or clears a flag on the articulation."
          ]
        },
        "additional": {
          "b": [
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setArticulationFlag",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxArticulationFlag",
              "cxx_qt": "PxArticulationFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getArticulationFlags",
      "comment": {
        "summary": {
          "b": [
            "Returns the articulation's flags."
          ]
        },
        "additional": {
          "b": [
            "The flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArticulationFlags",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxArticulationFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getDofs",
      "comment": {
        "summary": {
          "b": [
            "Returns the total number of joint degrees-of-freedom (DOFs) of the articulation."
          ]
        },
        "additional": {
          "b": [
            "- The six DOFs of the base of a floating-base articulation are not included in this count.",
            "- Example: Both a fixed-base and a floating-base double-pendulum with two revolute joints will have getDofs() == 2.",
            "- The return value is only valid for articulations that are in a scene.",
            "",
            "The number of joint DOFs, or 0xFFFFFFFF if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDofs",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_createCache",
      "comment": {
        "summary": {
          "b": [
            "Creates an articulation cache that can be used to read and write internal articulation data."
          ]
        },
        "additional": {
          "b": [
            "- When the structure of the articulation changes (e.g. adding a link or sensor) after the cache was created,",
            "the cache needs to be released and recreated.",
            "- Free the memory allocated for the cache by calling the release() method on the cache.",
            "- Caches can only be created by articulations that are in a scene.",
            "",
            "The cache, or NULL if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createCache",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationCache"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getCacheDataSize",
      "comment": {
        "summary": {
          "b": [
            "Returns the size of the articulation cache in bytes."
          ]
        },
        "additional": {
          "b": [
            "- The size does not include: the user-allocated memory for the coefficient matrix or lambda values;",
            "the scratch-related memory/members; and the cache version. See comment in #PxArticulationCache.",
            "- The return value is only valid for articulations that are in a scene.",
            "",
            "The byte size of the cache, or 0xFFFFFFFF if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCacheDataSize",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_zeroCache",
      "comment": {
        "summary": {
          "b": [
            "Zeroes all data in the articulation cache, except user-provided and scratch memory, and cache version."
          ]
        },
        "additional": {
          "b": [
            "This call may only be made on articulations that are in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "zeroCache",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_applyCache_mut",
      "comment": {
        "summary": {
          "b": [
            "Applies the data in the cache to the articulation."
          ]
        },
        "additional": {
          "b": [
            "This call wakes the articulation if it is sleeping, and the autowake parameter is true (default) or:",
            "- a nonzero joint velocity is applied or",
            "- a nonzero joint force is applied or",
            "- a nonzero root velocity is applied",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "applyCache",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxArticulationCacheFlags",
              "repr": "UInt"
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_copyInternalStateToCache",
      "comment": {
        "summary": {
          "b": [
            "Copies internal data of the articulation to the cache."
          ]
        },
        "additional": {
          "b": [
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "copyInternalStateToCache",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxArticulationCacheFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_packJointData",
      "comment": {
        "summary": {
          "b": [
            "Converts maximal-coordinate joint DOF data to reduced coordinates."
          ]
        },
        "additional": {
          "b": [
            "- Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included).",
            "- The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.",
            "",
            "The articulation must be in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "packJointData",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "maximum",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "reduced",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_unpackJointData",
      "comment": {
        "summary": {
          "b": [
            "Converts reduced-coordinate joint DOF data to maximal coordinates."
          ]
        },
        "additional": {
          "b": [
            "- Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included).",
            "- The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.",
            "",
            "The articulation must be in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unpackJointData",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "reduced",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "maximum",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_commonInit",
      "comment": {
        "summary": {
          "b": [
            "Prepares common articulation data based on articulation pose for inverse dynamics calculations."
          ]
        },
        "additional": {
          "b": [
            "Usage:",
            "1. Set articulation pose (joint positions and base transform) via articulation cache and applyCache().",
            "1. Call commonInit.",
            "1. Call inverse dynamics computation method.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "commonInit",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeGeneralizedGravityForce",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - Articulation pose (joint positions + base transform).",
            "- Outputs - Joint forces to counteract gravity (in cache).",
            "",
            "- The joint forces returned are determined purely by gravity for the articulation in the current joint and base pose, and joints at rest;",
            "i.e. external forces, joint velocities, and joint accelerations are set to zero. Joint drives are also not considered in the computation.",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeGeneralizedGravityForce",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint DOF forces required to counteract Coriolis and centrifugal forces for the given articulation state."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - Articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).",
            "- Outputs - Joint forces to counteract Coriolis and centrifugal forces (in cache).",
            "",
            "- The joint forces returned are determined purely by the articulation's state; i.e. external forces, gravity, and joint accelerations are set to zero.",
            "Joint drives and potential damping terms, such as link angular or linear damping, or joint friction, are also not considered in the computation.",
            "- Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeCoriolisAndCentrifugalForce",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeGeneralizedExternalForce",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint DOF forces required to counteract external spatial forces applied to articulation links."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - External forces on links (in cache), articulation pose (joint positions + base transform).",
            "- Outputs - Joint forces to counteract the external forces (in cache).",
            "",
            "- Only the external spatial forces provided in the cache and the articulation pose are considered in the computation.",
            "- The external spatial forces are with respect to the links' centers of mass, and not the actor's origin.",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeGeneralizedExternalForce",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeJointAcceleration",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint accelerations for the given articulation state and joint forces."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - Joint forces (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).",
            "- Outputs - Joint accelerations (in cache).",
            "",
            "- The computation includes Coriolis terms and gravity. However, joint drives and potential damping terms are not considered in the computation",
            "(for example, linear link damping or joint friction).",
            "- Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeJointAcceleration",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeJointForce",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint forces for the given articulation state and joint accelerations, not considering gravity."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - Joint accelerations (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).",
            "- Outputs - Joint forces (in cache).",
            "",
            "- The computation includes Coriolis terms. However, joint drives and potential damping terms are not considered in the computation",
            "(for example, linear link damping or joint friction).",
            "- Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeJointForce",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeDenseJacobian",
      "comment": {
        "summary": {
          "b": [
            "Compute the dense Jacobian for the articulation in world space, including the DOFs of a potentially floating base."
          ]
        },
        "additional": {
          "b": [
            "This computes the dense representation of an inherently sparse matrix. Multiplication with this matrix maps",
            "joint space velocities to world-space linear and angular (i.e. spatial) velocities of the centers of mass of the links.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeDenseJacobian",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        },
        {
          "name": "nRows",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "nCols",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeCoefficientMatrix",
      "comment": {
        "summary": {
          "b": [
            "Computes the coefficient matrix for contact forces."
          ]
        },
        "additional": {
          "b": [
            "- The matrix dimension is getCoefficientMatrixSize() = getDofs() * getNbLoopJoints(), and the DOF (column) indexing follows the internal DOF order, see PxArticulationCache::jointVelocity.",
            "- Each column in the matrix is the joint forces effected by a contact based on impulse strength 1.",
            "- The user must allocate memory for PxArticulationCache::coefficientMatrix where the required size of the PxReal array is equal to getCoefficientMatrixSize().",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeCoefficientMatrix",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_computeLambda",
      "comment": {
        "summary": {
          "b": [
            "Computes the lambda values when the test impulse is 1."
          ]
        },
        "additional": {
          "b": [
            "- The user must allocate memory for PxArticulationCache::lambda where the required size of the PxReal array is equal to getNbLoopJoints().",
            "- commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "True if convergence was achieved within maxIter; False if convergence was not achieved or the operation failed otherwise.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeLambda",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        },
        {
          "name": "initialState",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        },
        {
          "name": "jointTorque",
          "kind": {
            "Pointer": {
              "is_const": true,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "maxIter",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_computeGeneralizedMassMatrix",
      "comment": {
        "summary": {
          "b": [
            "Compute the joint-space inertia matrix that maps joint accelerations to joint forces: forces = M * accelerations."
          ]
        },
        "additional": {
          "b": [
            "- Inputs - Articulation pose (joint positions and base transform).",
            "- Outputs - Mass matrix (in cache).",
            "",
            "commonInit() must be called before the computation, and after setting the articulation pose via applyCache().",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeGeneralizedMassMatrix",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationCache"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_addLoopJoint_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a loop joint to the articulation system for inverse dynamics."
          ]
        },
        "additional": {
          "b": [
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addLoopJoint",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "joint",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_removeLoopJoint_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a loop joint from the articulation for inverse dynamics."
          ]
        },
        "additional": {
          "b": [
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeLoopJoint",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "joint",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbLoopJoints",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of loop joints in the articulation for inverse dynamics."
          ]
        },
        "additional": {
          "b": [
            "The number of loop joints."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbLoopJoints",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getLoopJoints",
      "comment": {
        "summary": {
          "b": [
            "Returns the set of loop constraints (i.e. joints) in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of constraints written into the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLoopJoints",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxConstraint"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getCoefficientMatrixSize",
      "comment": {
        "summary": {
          "b": [
            "Returns the required size of the coefficient matrix in the articulation."
          ]
        },
        "additional": {
          "b": [
            "Size of the coefficient matrix (equal to getDofs() * getNbLoopJoints()).",
            "",
            "This call may only be made on articulations that are in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCoefficientMatrixSize",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setRootGlobalPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the root link transform (world to actor frame)."
          ]
        },
        "additional": {
          "b": [
            "- For performance, prefer PxArticulationCache::rootLinkData to set the root link transform in a batch articulation state update.",
            "- Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,",
            "in order to update link states for the next simulation frame or querying.",
            "",
            "This call may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRootGlobalPose",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getRootGlobalPose",
      "comment": {
        "summary": {
          "b": [
            "Returns the root link transform (world to actor frame)."
          ]
        },
        "additional": {
          "b": [
            "For performance, prefer PxArticulationCache::rootLinkData to get the root link transform in a batch query.",
            "",
            "The root link transform.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRootGlobalPose",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setRootLinearVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the root link linear center-of-mass velocity."
          ]
        },
        "additional": {
          "b": [
            "- The linear velocity is with respect to the link's center of mass and not the actor frame origin.",
            "- For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update.",
            "- The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene.",
            "- Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,",
            "in order to update link states for the next simulation frame or querying.",
            "",
            "This call may not be made during simulation, except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRootLinearVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "linearVelocity",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getRootLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the root link center-of-mass linear velocity."
          ]
        },
        "additional": {
          "b": [
            "- The linear velocity is with respect to the link's center of mass and not the actor frame origin.",
            "- For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.",
            "",
            "The root link center-of-mass linear velocity.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRootLinearVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_setRootAngularVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the root link angular velocity."
          ]
        },
        "additional": {
          "b": [
            "- For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update.",
            "- The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene.",
            "- Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,",
            "in order to update link states for the next simulation frame or querying.",
            "",
            "This call may not be made during simulation, except in a split simulation in-between #PxScene::fetchCollision and #PxScene::advance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRootAngularVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "angularVelocity",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationReducedCoordinate_getRootAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the root link angular velocity."
          ]
        },
        "additional": {
          "b": [
            "For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.",
            "",
            "The root link angular velocity.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRootAngularVelocity",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getLinkAcceleration_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the (classical) link acceleration in world space for the given low-level link index."
          ]
        },
        "additional": {
          "b": [
            "- The returned acceleration is not a spatial, but a classical, i.e. body-fixed acceleration (https://en.wikipedia.org/wiki/Spatial_acceleration).",
            "- The (linear) acceleration is with respect to the link's center of mass and not the actor frame origin.",
            "",
            "The link's center-of-mass classical acceleration, or 0 if the call is made before the articulation participated in a first simulation step.",
            "",
            "This call may only be made on articulations that are in a scene, and it is not allowed to use this method while the simulation",
            "is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinkAcceleration",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "linkId",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSpatialVelocity"
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getGpuArticulationIndex_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the GPU articulation index."
          ]
        },
        "additional": {
          "b": [
            "The GPU index, or 0xFFFFFFFF if the articulation is not in a scene or PxSceneFlag::eSUPPRESS_READBACK is not set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGpuArticulationIndex",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_createSpatialTendon_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a spatial tendon to attach to the articulation with default attribute values."
          ]
        },
        "additional": {
          "b": [
            "The new spatial tendon.",
            "",
            "Creating a spatial tendon is not allowed while the articulation is in a scene. In order to",
            "add the tendon, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createSpatialTendon",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationSpatialTendon"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_createFixedTendon_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a fixed tendon to attach to the articulation with default attribute values."
          ]
        },
        "additional": {
          "b": [
            "The new fixed tendon.",
            "",
            "Creating a fixed tendon is not allowed while the articulation is in a scene. In order to",
            "add the tendon, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createFixedTendon",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationFixedTendon"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_createSensor_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a force sensor attached to a link of the articulation."
          ]
        },
        "additional": {
          "b": [
            "The new sensor.",
            "",
            "Creating a sensor is not allowed while the articulation is in a scene. In order to",
            "add the sensor, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createSensor",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "link",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        },
        {
          "name": "relativePose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationSensor"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getSpatialTendons",
      "comment": {
        "summary": {
          "b": [
            "Returns the spatial tendons attached to the articulation."
          ]
        },
        "additional": {
          "b": [
            "The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.",
            "",
            "The number of tendons written into the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSpatialTendons",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationSpatialTendon"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbSpatialTendons_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of spatial tendons in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of tendons."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbSpatialTendons",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getFixedTendons",
      "comment": {
        "summary": {
          "b": [
            "Returns the fixed tendons attached to the articulation."
          ]
        },
        "additional": {
          "b": [
            "The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.",
            "",
            "The number of tendons written into the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFixedTendons",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationFixedTendon"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbFixedTendons_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of fixed tendons in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of tendons."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbFixedTendons",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getSensors",
      "comment": {
        "summary": {
          "b": [
            "Returns the sensors attached to the articulation."
          ]
        },
        "additional": {
          "b": [
            "The order of the sensors in the buffer is not necessarily identical to the order in which the sensors were added to the articulation.",
            "",
            "The number of sensors written into the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSensors",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationSensor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_getNbSensors_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of sensors in the articulation."
          ]
        },
        "additional": {
          "b": [
            "The number of sensors."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbSensors",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationReducedCoordinate_updateKinematic_mut",
      "comment": {
        "summary": {
          "b": [
            "Update link velocities and/or positions in the articulation."
          ]
        },
        "additional": {
          "b": [
            "For performance, prefer the PxArticulationCache API that performs batch articulation state updates.",
            "",
            "If the application updates the root state (position and velocity) or joint state via any combination of",
            "the non-cache API calls",
            "",
            "- setRootGlobalPose(), setRootLinearVelocity(), setRootAngularVelocity()",
            "- PxArticulationJointReducedCoordinate::setJointPosition(), PxArticulationJointReducedCoordinate::setJointVelocity()",
            "",
            "the application needs to call this method after the state setting in order to update the link states for",
            "the next simulation frame or querying.",
            "",
            "Use",
            "- PxArticulationKinematicFlag::ePOSITION after any changes to the articulation root or joint positions using non-cache API calls. Updates links' positions and velocities.",
            "- PxArticulationKinematicFlag::eVELOCITY after velocity-only changes to the articulation root or joints using non-cache API calls. Updates links' velocities only.",
            "",
            "This call may only be made on articulations that are in a scene, and may not be made during simulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateKinematic",
            "class_name": "PxArticulationReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxArticulationKinematicFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getParentArticulationLink",
      "comment": {
        "summary": {
          "b": [
            "Gets the parent articulation link of this joint."
          ]
        },
        "additional": {
          "b": [
            "The parent link."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getParentArticulationLink",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setParentPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint pose in the parent link actor frame."
          ]
        },
        "additional": {
          "b": [
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setParentPose",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getParentPose",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint pose in the parent link actor frame."
          ]
        },
        "additional": {
          "b": [
            "The joint pose."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getParentPose",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getChildArticulationLink",
      "comment": {
        "summary": {
          "b": [
            "Gets the child articulation link of this joint."
          ]
        },
        "additional": {
          "b": [
            "The child link."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getChildArticulationLink",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationLink"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setChildPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint pose in the child link actor frame."
          ]
        },
        "additional": {
          "b": [
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setChildPose",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getChildPose",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint pose in the child link actor frame."
          ]
        },
        "additional": {
          "b": [
            "The joint pose."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getChildPose",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setJointType_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint type (e.g. revolute)."
          ]
        },
        "additional": {
          "b": [
            "Setting the joint type is not allowed while the articulation is in a scene.",
            "In order to set the joint type, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setJointType",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "jointType",
          "kind": {
            "Enum": {
              "name": "PxArticulationJointType",
              "cxx_qt": "PxArticulationJointType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getJointType",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint type."
          ]
        },
        "additional": {
          "b": [
            "The joint type."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getJointType",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxArticulationJointType",
          "cxx_qt": "PxArticulationJointType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setMotion_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint motion for a given axis."
          ]
        },
        "additional": {
          "b": [
            "Setting the motion of joint axes is not allowed while the articulation is in a scene.",
            "In order to set the motion, remove and then re-add the articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMotion",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "motion",
          "kind": {
            "Enum": {
              "name": "PxArticulationMotion",
              "cxx_qt": "PxArticulationMotion::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getMotion",
      "comment": {
        "summary": {
          "b": [
            "Returns the joint motion for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The joint motion of the given axis."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMotion",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxArticulationMotion",
          "cxx_qt": "PxArticulationMotion::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setLimitParams_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint limits for a given axis."
          ]
        },
        "additional": {
          "b": [
            "- The motion of the corresponding axis should be set to PxArticulationMotion::eLIMITED in order for the limits to be enforced.",
            "- The lower limit should be strictly smaller than the higher limit. If the limits should be equal, use PxArticulationMotion::eLOCKED",
            "and an appropriate offset in the parent/child joint frames.",
            "",
            "This call is not allowed while the simulation is running.",
            "",
            "For spherical joints, limit.min and limit.max must both be in range [-Pi, Pi]."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimitParams",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLimit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getLimitParams",
      "comment": {
        "summary": {
          "b": [
            "Returns the joint limits for a given axis."
          ]
        },
        "additional": {
          "b": [
            "The joint limits."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimitParams",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationLimit"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setDriveParams_mut",
      "comment": {
        "summary": {
          "b": [
            "Configures a joint drive for the given axis."
          ]
        },
        "additional": {
          "b": [
            "See PxArticulationDrive for parameter details; and the manual for further information, and the drives' implicit spring-damper (i.e. PD control) implementation in particular.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveParams",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "drive",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxArticulationDrive"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getDriveParams",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint drive configuration for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The drive parameters."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveParams",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxArticulationDrive"
        }
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setDriveTarget_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint drive position target for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The target units are linear units (equivalent to scene units) for a translational axis, or rad for a rotational axis.",
            "",
            "This call is not allowed while the simulation is running.",
            "",
            "For spherical joints, target must be in range [-Pi, Pi].",
            "",
            "The target is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the joint will drive the parent and child links to poses that obey Gp * Lp * J = Gc * Lc. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistTarget, swing1Target, swing2Target))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(XTarget, YTarget, ZTarget), PxQuat(PxIdentity)).",
            "",
            "For spherical joints with more than 1 degree of freedom, the joint target angles taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint drive target is not the shortest path rotation.  The joint pose J that is the outcome after driving to the target pose will always be the equivalent of the shortest path rotation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveTarget",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "target",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getDriveTarget",
      "comment": {
        "summary": {
          "b": [
            "Returns the joint drive position target for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The target position."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveTarget",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setDriveVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint drive velocity target for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The target units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "targetVel",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getDriveVelocity",
      "comment": {
        "summary": {
          "b": [
            "Returns the joint drive velocity target for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The target velocity."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setArmature_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint armature for the given axis."
          ]
        },
        "additional": {
          "b": [
            "- The armature is directly added to the joint-space spatial inertia of the corresponding axis.",
            "- The armature is in mass units for a prismatic (i.e. linear) joint, and in mass units * (scene linear units)^2 for a rotational joint.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setArmature",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "armature",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getArmature",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint armature for the given axis."
          ]
        },
        "additional": {
          "b": [
            "The armature set on the given axis."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArmature",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setFrictionCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint friction coefficient, which applies to all joint axes."
          ]
        },
        "additional": {
          "b": [
            "- The joint friction is unitless and relates the magnitude of the spatial force [F_trans, T_trans] transmitted from parent to child link to",
            "the maximal friction force F_resist that may be applied by the solver to resist joint motion, per axis; i.e. |F_resist|",
            "<",
            "= coefficient * (|F_trans| + |T_trans|),",
            "where F_resist may refer to a linear force or torque depending on the joint axis.",
            "- The simulated friction effect is therefore similar to static and Coulomb friction. In order to simulate dynamic joint friction, use a joint drive with",
            "zero stiffness and zero velocity target, and an appropriately dimensioned damping parameter.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFrictionCoefficient",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "coefficient",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getFrictionCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint friction coefficient."
          ]
        },
        "additional": {
          "b": [
            "The joint friction coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFrictionCoefficient",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setMaxJointVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the maximal joint velocity enforced for all axes."
          ]
        },
        "additional": {
          "b": [
            "- The solver will apply appropriate joint-space impulses in order to enforce the per-axis joint-velocity limit.",
            "- The velocity units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxJointVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "maxJointV",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getMaxJointVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the maximal joint velocity enforced for all axes."
          ]
        },
        "additional": {
          "b": [
            "The maximal per-axis joint velocity."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxJointVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setJointPosition_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint position for the given axis."
          ]
        },
        "additional": {
          "b": [
            "- For performance, prefer PxArticulationCache::jointPosition to set joint positions in a batch articulation state update.",
            "- Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method,",
            "in order to update link states for the next simulation frame or querying.",
            "",
            "This call is not allowed while the simulation is running.",
            "",
            "For spherical joints, jointPos must be in range [-Pi, Pi].",
            "",
            "Joint position is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the parent and child links will be given poses that obey Gp * Lp * J = Gc * Lc with J denoting the joint pose. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistPos, swing1Pos, swing2Pos))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(xPos, yPos, zPos), PxQuat(PxIdentity)).",
            "",
            "For spherical joints with more than 1 degree of freedom, the input joint positions taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint positions is not the shortest path rotation.  The joint pose J that is the outcome of setting and applying the joint positions will always be the equivalent of the shortest path rotation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setJointPosition",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "jointPos",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getJointPosition",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint position for the given axis, i.e. joint degree of freedom (DOF)."
          ]
        },
        "additional": {
          "b": [
            "For performance, prefer PxArticulationCache::jointPosition to get joint positions in a batch query.",
            "",
            "The joint position in linear units (equivalent to scene units) for a translational axis, or radians for a rotational axis.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getJointPosition",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_setJointVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the joint velocity for the given axis."
          ]
        },
        "additional": {
          "b": [
            "- For performance, prefer PxArticulationCache::jointVelocity to set joint velocities in a batch articulation state update.",
            "- Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method,",
            "in order to update link states for the next simulation frame or querying.",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setJointVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "jointVel",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getJointVelocity",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint velocity for the given axis."
          ]
        },
        "additional": {
          "b": [
            "For performance, prefer PxArticulationCache::jointVelocity to get joint velocities in a batch query.",
            "",
            "The joint velocity in linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getJointVelocity",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxArticulationAxis",
              "cxx_qt": "PxArticulationAxis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationJointReducedCoordinate_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationJointReducedCoordinate",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationJointReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxShape_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of a shape and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": [
            "Note that in releases prior to PhysX 3.3 this method did not have reference counting semantics and was used to destroy a shape",
            "created with PxActor::createShape(). In PhysX 3.3 and above, this usage is deprecated, instead, use PxRigidActor::detachShape() to detach",
            "a shape from an actor. If the shape to be detached was created with PxActor::createShape(), the actor holds the only counted reference,",
            "and so when the shape is detached it will also be destroyed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_setGeometry_mut",
      "comment": {
        "summary": {
          "b": [
            "Adjust the geometry of the shape."
          ]
        },
        "additional": {
          "b": [
            "The type of the passed in geometry must match the geometry type of the shape.",
            "",
            "It is not allowed to change the geometry type of a shape.",
            "",
            "This function does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setGeometry",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getGeometry",
      "comment": {
        "summary": {
          "b": [
            "Retrieve a reference to the shape's geometry."
          ]
        },
        "additional": {
          "b": [
            "The returned reference has the same lifetime as the PxShape it comes from.",
            "",
            "Reference to internal PxGeometry object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGeometry",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxGeometry"
            }
          }
        }
      }
    },
    {
      "name": "PxShape_getActor",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the actor which this shape is associated with."
          ]
        },
        "additional": {
          "b": [
            "The actor this shape is associated with, if it is an exclusive shape, else NULL"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActor",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidActor"
            }
          }
        }
      }
    },
    {
      "name": "PxShape_setLocalPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the pose of the shape in actor space, i.e. relative to the actors to which they are attached."
          ]
        },
        "additional": {
          "b": [
            "This transformation is identity by default.",
            "",
            "The local pose is an attribute of the shape, and so will apply to all actors to which the shape is attached.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the associated actor up automatically.",
            "",
            "Note:",
            "Does not automatically update the inertia properties of the owning actor (if applicable); use the",
            "PhysX extensions method #PxRigidBodyExt::updateMassAndInertia() to do this.",
            "",
            "Default:",
            "the identity transform"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLocalPose",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getLocalPose",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the pose of the shape in actor space, i.e. relative to the actor they are owned by."
          ]
        },
        "additional": {
          "b": [
            "This transformation is identity by default.",
            "",
            "Pose of shape relative to the actor's frame."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalPose",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxShape_setSimulationFilterData_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the user definable collision filter data."
          ]
        },
        "additional": {
          "b": [
            "Sleeping:",
            "Does wake up the actor if the filter data change causes a formerly suppressed",
            "collision pair to be enabled.",
            "",
            "Default:",
            "(0,0,0,0)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSimulationFilterData",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getSimulationFilterData",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the shape's collision filter data."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSimulationFilterData",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxFilterData"
        }
      }
    },
    {
      "name": "PxShape_setQueryFilterData_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the user definable query filter data."
          ]
        },
        "additional": {
          "b": [
            "Default:",
            "(0,0,0,0)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setQueryFilterData",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getQueryFilterData",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the shape's Query filter data."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getQueryFilterData",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxFilterData"
        }
      }
    },
    {
      "name": "PxShape_setMaterials_mut",
      "comment": {
        "summary": {
          "b": [
            "Assigns material(s) to the shape. Will remove existing materials from the shape."
          ]
        },
        "additional": {
          "b": [
            "Sleeping:",
            "Does",
            "NOT",
            "wake the associated actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaterials",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "materials",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxMaterial"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "materialCount",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getNbMaterials",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of materials assigned to the shape."
          ]
        },
        "additional": {
          "b": [
            "You can use #getMaterials() to retrieve the material pointers.",
            "",
            "Number of materials associated with this shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbMaterials",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxShape_getMaterials",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the material pointers associated with the shape."
          ]
        },
        "additional": {
          "b": [
            "You can retrieve the number of material pointers by calling #getNbMaterials()",
            "",
            "Note: The returned data may contain invalid pointers if you release materials using #PxMaterial::release().",
            "",
            "Number of material pointers written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterials",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxMaterial"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxShape_getMaterialFromInternalFaceIndex",
      "comment": {
        "summary": {
          "b": [
            "Retrieve material from given triangle index."
          ]
        },
        "additional": {
          "b": [
            "The input index is the internal triangle index as used inside the SDK. This is the index",
            "returned to users by various SDK functions such as raycasts.",
            "",
            "This function is only useful for triangle meshes or heightfields, which have per-triangle",
            "materials. For other shapes or SDF triangle meshes, the function returns the single material",
            "associated with the shape, regardless of the index.",
            "",
            "Material from input triangle",
            "",
            "If faceIndex value of 0xFFFFffff is passed as an input for mesh and heightfield shapes, this function will issue a warning and return NULL.",
            "",
            "Scene queries set the value of PxQueryHit::faceIndex to 0xFFFFffff whenever it is undefined or does not apply."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterialFromInternalFaceIndex",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "faceIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBaseMaterial"
            }
          }
        }
      }
    },
    {
      "name": "PxShape_setContactOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the contact offset."
          ]
        },
        "additional": {
          "b": [
            "Shapes whose distance is less than the sum of their contactOffset values will generate contacts. The contact offset must be positive and",
            "greater than the rest offset. Having a contactOffset greater than than the restOffset allows the collision detection system to",
            "predictively enforce the contact constraint even when the objects are slightly separated. This prevents jitter that would occur",
            "if the constraint were enforced only when shapes were within the rest distance.",
            "",
            "Default:",
            "0.02f * PxTolerancesScale::length",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the associated actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactOffset",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "contactOffset",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getContactOffset",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the contact offset."
          ]
        },
        "additional": {
          "b": [
            "The contact offset of the shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactOffset",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxShape_setRestOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the rest offset."
          ]
        },
        "additional": {
          "b": [
            "Two shapes will come to rest at a distance equal to the sum of their restOffset values. If the restOffset is 0, they should converge to touching",
            "exactly.  Having a restOffset greater than zero is useful to have objects slide smoothly, so that they do not get hung up on irregularities of",
            "each others' surfaces.",
            "",
            "Default:",
            "0.0f",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the associated actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestOffset",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "restOffset",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getRestOffset",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the rest offset."
          ]
        },
        "additional": {
          "b": [
            "The rest offset of the shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestOffset",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxShape_setDensityForFluid_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the density used to interact with fluids."
          ]
        },
        "additional": {
          "b": [
            "To be physically accurate, the density of a rigid body should be computed as its mass divided by its volume. To",
            "simplify tuning the interaction of fluid and rigid bodies, the density for fluid can differ from the real density. This",
            "allows to create floating bodies, even if they are supposed to sink with their mass and volume.",
            "",
            "Default:",
            "800.0f"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDensityForFluid",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "densityForFluid",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getDensityForFluid",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the density used to interact with fluids."
          ]
        },
        "additional": {
          "b": [
            "The density of the body when interacting with fluid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDensityForFluid",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxShape_setTorsionalPatchRadius_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets torsional patch radius."
          ]
        },
        "additional": {
          "b": [
            "This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction",
            "will be applied. If the radius is > 0, some torsional friction will be applied. This is proportional to the penetration depth",
            "so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate",
            "rotational friction introduced by the compression of contacting surfaces.",
            "",
            "Default:",
            "0.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTorsionalPatchRadius",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "radius",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getTorsionalPatchRadius",
      "comment": {
        "summary": {
          "b": [
            "Gets torsional patch radius."
          ]
        },
        "additional": {
          "b": [
            "This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction",
            "will be applied. If the radius is > 0, some torsional friction will be applied. This is proportional to the penetration depth",
            "so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate",
            "rotational friction introduced by the compression of contacting surfaces.",
            "",
            "The torsional patch radius of the shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTorsionalPatchRadius",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxShape_setMinTorsionalPatchRadius_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets minimum torsional patch radius."
          ]
        },
        "additional": {
          "b": [
            "This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction",
            "that will be applied will be entirely dependent on the value of torsionalPatchRadius.",
            "",
            "If the radius is > 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.",
            "",
            "Default:",
            "0.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMinTorsionalPatchRadius",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "radius",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getMinTorsionalPatchRadius",
      "comment": {
        "summary": {
          "b": [
            "Gets minimum torsional patch radius."
          ]
        },
        "additional": {
          "b": [
            "This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction",
            "that will be applied will be entirely dependent on the value of torsionalPatchRadius.",
            "",
            "If the radius is > 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.",
            "",
            "The minimum torsional patch radius of the shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMinTorsionalPatchRadius",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxShape_setFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets shape flags"
          ]
        },
        "additional": {
          "b": [
            "Sleeping:",
            "Does",
            "NOT",
            "wake the associated actor up automatically.",
            "",
            "Default:",
            "PxShapeFlag::eVISUALIZATION | PxShapeFlag::eSIMULATION_SHAPE | PxShapeFlag::eSCENE_QUERY_SHAPE"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlag",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxShapeFlag",
              "cxx_qt": "PxShapeFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_setFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets shape flags"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlags",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "inFlags",
          "kind": {
            "Flags": {
              "name": "PxShapeFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Retrieves shape flags."
          ]
        },
        "additional": {
          "b": [
            "The values of the shape flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxShapeFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxShape_isExclusive",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the shape is exclusive to an actor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isExclusive",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxShape_setName_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a name string for the object that can be retrieved with #getName()."
          ]
        },
        "additional": {
          "b": [
            "This is for debugging and is not used by the SDK.",
            "The string is not copied by the SDK, only the pointer is stored.",
            "",
            "Default:",
            "NULL"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setName",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxShape_getName",
      "comment": {
        "summary": {
          "b": [
            "retrieves the name string set with setName()."
          ]
        },
        "additional": {
          "b": [
            "The name associated with the shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getName",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxShape_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxShape",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxRigidActor_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the rigid actor object."
          ]
        },
        "additional": {
          "b": [
            "Also releases any shapes associated with the actor.",
            "",
            "Releasing an actor will affect any objects that are connected to the actor (constraint shaders like joints etc.).",
            "Such connected objects will be deleted upon scene deletion, or explicitly by the user by calling release()",
            "on these objects. It is recommended to always remove all objects that reference actors before the actors",
            "themselves are removed. It is not possible to retrieve list of dead connected objects.",
            "",
            "Sleeping:",
            "This call will awaken any sleeping actors contacting the deleted actor (directly or indirectly).",
            "",
            "Calls #PxActor::release() so you might want to check the documentation of that method as well."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidActor_getInternalActorIndex",
      "comment": {
        "summary": {
          "b": [
            "Returns the internal actor index."
          ]
        },
        "additional": {
          "b": [
            "This is only defined for actors that have been added to a scene.",
            "",
            "The internal actor index, or 0xffffffff if the actor is not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInternalActorIndex",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRigidActor_getGlobalPose",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the actors world space transform."
          ]
        },
        "additional": {
          "b": [
            "The getGlobalPose() method retrieves the actor's current actor space to world space transformation.",
            "",
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "Global pose of object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGlobalPose",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxRigidActor_setGlobalPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Method for setting an actor's pose in the world."
          ]
        },
        "additional": {
          "b": [
            "This method instantaneously changes the actor space to world space transformation.",
            "",
            "This method is mainly for dynamic rigid bodies (see #PxRigidDynamic). Calling this method on static actors is",
            "likely to result in a performance penalty, since internal optimization structures for static actors may need to be",
            "recomputed. In addition, moving static actors will not interact correctly with dynamic actors or joints.",
            "",
            "To directly control an actor's position and have it correctly interact with dynamic bodies and joints, create a dynamic",
            "body with the PxRigidBodyFlag::eKINEMATIC flag, then use the setKinematicTarget() commands to define its path.",
            "",
            "Even when moving dynamic actors, exercise restraint in making use of this method. Where possible, avoid:",
            "",
            "moving actors into other actors, thus causing overlap (an invalid physical state)",
            "",
            "moving an actor that is connected by a joint to another away from the other (thus causing joint error)",
            "",
            "Sleeping:",
            "This call wakes dynamic actors if they are sleeping and the autowake parameter is true (default)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setGlobalPose",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidActor_attachShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Attach a shape to an actor"
          ]
        },
        "additional": {
          "b": [
            "This call will increment the reference count of the shape.",
            "",
            "Mass properties of dynamic rigid actors will not automatically be recomputed",
            "to reflect the new mass distribution implied by the shape. Follow this call with a call to",
            "the PhysX extensions method #PxRigidBodyExt::updateMassAndInertia() to do that.",
            "",
            "Attaching a triangle mesh, heightfield or plane geometry shape configured as eSIMULATION_SHAPE is not supported for",
            "non-kinematic PxRigidDynamic instances.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically.",
            "",
            "True if success."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "attachShape",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidActor_detachShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Detach a shape from an actor."
          ]
        },
        "additional": {
          "b": [
            "This will also decrement the reference count of the PxShape, and if the reference count is zero, will cause it to be deleted.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "detachShape",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "wakeOnLostTouch",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidActor_getNbShapes",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of shapes assigned to the actor."
          ]
        },
        "additional": {
          "b": [
            "You can use #getShapes() to retrieve the shape pointers.",
            "",
            "Number of shapes associated with this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbShapes",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRigidActor_getShapes",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the shape pointers belonging to the actor."
          ]
        },
        "additional": {
          "b": [
            "These are the shapes used by the actor for collision detection.",
            "",
            "You can retrieve the number of shape pointers by calling #getNbShapes()",
            "",
            "Note: Removing shapes with #PxShape::release() will invalidate the pointer of the released shape.",
            "",
            "Number of shape pointers written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getShapes",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxShape"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRigidActor_getNbConstraints",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of constraint shaders attached to the actor."
          ]
        },
        "additional": {
          "b": [
            "You can use #getConstraints() to retrieve the constraint shader pointers.",
            "",
            "Number of constraint shaders attached to this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbConstraints",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxRigidActor_getConstraints",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the constraint shader pointers belonging to the actor."
          ]
        },
        "additional": {
          "b": [
            "You can retrieve the number of constraint shader pointers by calling #getNbConstraints()",
            "",
            "Note: Removing constraint shaders with #PxConstraint::release() will invalidate the pointer of the released constraint.",
            "",
            "Number of constraint shader pointers written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConstraints",
            "class_name": "PxRigidActor",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxConstraint"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxNodeIndex_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxNodeIndex"
        }
      },
      "params": [
        {
          "name": "id",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "articLinkId",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxNodeIndex"
        }
      }
    },
    {
      "name": "PxNodeIndex_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxNodeIndex"
        }
      },
      "params": [
        {
          "name": "id",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxNodeIndex"
        }
      }
    },
    {
      "name": "PxNodeIndex_index",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "index",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxNodeIndex_articulationLinkId",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "articulationLinkId",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxNodeIndex_isArticulation",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isArticulation",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxNodeIndex_isStaticBody",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isStaticBody",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxNodeIndex_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxNodeIndex_setIndices_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setIndices",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "articLinkId",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxNodeIndex_setIndices_mut_1",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setIndices",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxNodeIndex_getInd",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInd",
            "class_name": "PxNodeIndex",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxNodeIndex"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxRigidBody_setCMassLocalPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the pose of the center of mass relative to the actor."
          ]
        },
        "additional": {
          "b": [
            "Changing this transform will not move the actor in the world!",
            "",
            "Setting an unrealistic center of mass which is a long way from the body can make it difficult for",
            "the SDK to solve constraints. Perhaps leading to instability and jittering bodies.",
            "",
            "Default:",
            "the identity transform"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCMassLocalPose",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getCMassLocalPose",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the center of mass pose relative to the actor frame."
          ]
        },
        "additional": {
          "b": [
            "The center of mass pose relative to the actor frame."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCMassLocalPose",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxRigidBody_setMass_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the mass of a dynamic actor."
          ]
        },
        "additional": {
          "b": [
            "The mass must be non-negative.",
            "",
            "setMass() does not update the inertial properties of the body, to change the inertia tensor",
            "use setMassSpaceInertiaTensor() or the PhysX extensions method #PxRigidBodyExt::updateMassAndInertia().",
            "",
            "A value of 0 is interpreted as infinite mass.",
            "",
            "Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.",
            "",
            "Default:",
            "1.0",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMass",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "mass",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMass",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the mass of the actor."
          ]
        },
        "additional": {
          "b": [
            "A value of 0 is interpreted as infinite mass.",
            "",
            "The mass of this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMass",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_getInvMass",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the inverse mass of the actor."
          ]
        },
        "additional": {
          "b": [
            "The inverse mass of this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMass",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setMassSpaceInertiaTensor_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the inertia tensor, using a parameter specified in mass space coordinates."
          ]
        },
        "additional": {
          "b": [
            "Note that such matrices are diagonal -- the passed vector is the diagonal.",
            "",
            "If you have a non diagonal world/actor space inertia tensor(3x3 matrix). Then you need to",
            "diagonalize it and set an appropriate mass space transform. See #setCMassLocalPose().",
            "",
            "The inertia tensor elements must be non-negative.",
            "",
            "A value of 0 in an element is interpreted as infinite inertia along that axis.",
            "",
            "Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.",
            "",
            "Default:",
            "(1.0, 1.0, 1.0)",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMassSpaceInertiaTensor",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "m",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMassSpaceInertiaTensor",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the diagonal inertia tensor of the actor relative to the mass coordinate frame."
          ]
        },
        "additional": {
          "b": [
            "This method retrieves a mass frame inertia vector.",
            "",
            "The mass space inertia tensor of this actor.",
            "",
            "A value of 0 in an element is interpreted as infinite inertia along that axis."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMassSpaceInertiaTensor",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBody_getMassSpaceInvInertiaTensor",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the diagonal inverse inertia tensor of the actor relative to the mass coordinate frame."
          ]
        },
        "additional": {
          "b": [
            "This method retrieves a mass frame inverse inertia vector.",
            "",
            "A value of 0 in an element is interpreted as infinite inertia along that axis.",
            "",
            "The mass space inverse inertia tensor of this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMassSpaceInvInertiaTensor",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBody_setLinearDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the linear damping coefficient."
          ]
        },
        "additional": {
          "b": [
            "Zero represents no damping. The damping coefficient must be nonnegative.",
            "",
            "Default:",
            "0.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLinearDamping",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "linDamp",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getLinearDamping",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the linear damping coefficient."
          ]
        },
        "additional": {
          "b": [
            "The linear damping coefficient associated with this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinearDamping",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setAngularDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the angular damping coefficient."
          ]
        },
        "additional": {
          "b": [
            "Zero represents no damping.",
            "",
            "The angular damping coefficient must be nonnegative.",
            "",
            "Default:",
            "0.05"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setAngularDamping",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "angDamp",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getAngularDamping",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the angular damping coefficient."
          ]
        },
        "additional": {
          "b": [
            "The angular damping coefficient associated with this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngularDamping",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_getLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the linear velocity of an actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "The linear velocity of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinearVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBody_getAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the angular velocity of the actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "The angular velocity of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngularVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBody_setMaxLinearVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Lets you set the maximum linear velocity permitted for this actor."
          ]
        },
        "additional": {
          "b": [
            "With this function, you can set the  maximum linear velocity permitted for this rigid body.",
            "Higher angular velocities are clamped to this value.",
            "",
            "Note: The angular velocity is clamped to the set value",
            "before",
            "the solver, which means that",
            "the limit may still be momentarily exceeded.",
            "",
            "Default:",
            "PX_MAX_F32"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxLinearVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "maxLinVel",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMaxLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the maximum angular velocity permitted for this actor."
          ]
        },
        "additional": {
          "b": [
            "The maximum allowed angular velocity for this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxLinearVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setMaxAngularVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Lets you set the maximum angular velocity permitted for this actor."
          ]
        },
        "additional": {
          "b": [
            "For various internal computations, very quickly rotating actors introduce error",
            "into the simulation, which leads to undesired results.",
            "",
            "With this function, you can set the  maximum angular velocity permitted for this rigid body.",
            "Higher angular velocities are clamped to this value.",
            "",
            "Note: The angular velocity is clamped to the set value",
            "before",
            "the solver, which means that",
            "the limit may still be momentarily exceeded.",
            "",
            "Default:",
            "100.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxAngularVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "maxAngVel",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMaxAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the maximum angular velocity permitted for this actor."
          ]
        },
        "additional": {
          "b": [
            "The maximum allowed angular velocity for this actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxAngularVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_addForce_mut",
      "comment": {
        "summary": {
          "b": [
            "Applies a force (or impulse) defined in the global coordinate frame to the actor at its center of mass."
          ]
        },
        "additional": {
          "b": [
            "This will not induce a torque",
            ".",
            "",
            "::PxForceMode determines if the force is to be conventional or impulsive.",
            "",
            "Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION",
            "and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same",
            "accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using PxForceMode::eACCELERATION and",
            "PxForceMode::eVELOCITY_CHANGE respectively.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.",
            "",
            "if this is called on an articulation link, only the link is updated, not the entire articulation.",
            "",
            "see #PxRigidBodyExt::computeVelocityDeltaFromImpulse for details of how to compute the change in linear velocity that",
            "will arise from the application of an impulsive force, where an impulsive force is applied force multiplied by a timestep.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the force is non-zero."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addForce",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_addTorque_mut",
      "comment": {
        "summary": {
          "b": [
            "Applies an impulsive torque defined in the global coordinate frame to the actor."
          ]
        },
        "additional": {
          "b": [
            "::PxForceMode determines if the torque is to be conventional or impulsive.",
            "",
            "Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes",
            "PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE",
            "also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then",
            "using PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.",
            "",
            "if this called on an articulation link, only the link is updated, not the entire articulation.",
            "",
            "see #PxRigidBodyExt::computeVelocityDeltaFromImpulse for details of how to compute the change in angular velocity that",
            "will arise from the application of an impulsive torque, where an impulsive torque is an applied torque multiplied by a timestep.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the torque is non-zero."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addTorque",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "torque",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_clearForce_mut",
      "comment": {
        "summary": {
          "b": [
            "Clears the accumulated forces (sets the accumulated force back to zero)."
          ]
        },
        "additional": {
          "b": [
            "Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION",
            "and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same",
            "accumulators (see PxRigidBody::addForce() for details); therefore the effect of calling clearForce(PxForceMode::eFORCE) is equivalent to calling",
            "clearForce(PxForceMode::eACCELERATION), and the effect of calling clearForce(PxForceMode::eIMPULSE) is equivalent to calling",
            "clearForce(PxForceMode::eVELOCITY_CHANGE).",
            "",
            "::PxForceMode determines if the cleared force is to be conventional or impulsive.",
            "",
            "The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "clearForce",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_clearTorque_mut",
      "comment": {
        "summary": {
          "b": [
            "Clears the impulsive torque defined in the global coordinate frame to the actor."
          ]
        },
        "additional": {
          "b": [
            "::PxForceMode determines if the cleared torque is to be conventional or impulsive.",
            "",
            "Each actor has an angular acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION",
            "and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same",
            "accumulators (see PxRigidBody::addTorque() for details); therefore the effect of calling clearTorque(PxForceMode::eFORCE) is equivalent to calling",
            "clearTorque(PxForceMode::eACCELERATION), and the effect of calling clearTorque(PxForceMode::eIMPULSE) is equivalent to calling",
            "clearTorque(PxForceMode::eVELOCITY_CHANGE).",
            "",
            "The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "clearTorque",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_setForceAndTorque_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the impulsive force and torque defined in the global coordinate frame to the actor."
          ]
        },
        "additional": {
          "b": [
            "::PxForceMode determines if the cleared torque is to be conventional or impulsive.",
            "",
            "The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setForceAndTorque",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "torque",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_setRigidBodyFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Raises or clears a particular rigid body flag."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxRigidBodyFlag",
            "",
            "Default:",
            "no flags are set",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRigidBodyFlag",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxRigidBodyFlag",
              "cxx_qt": "PxRigidBodyFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_setRigidBodyFlags_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRigidBodyFlags",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "inFlags",
          "kind": {
            "Flags": {
              "name": "PxRigidBodyFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getRigidBodyFlags",
      "comment": {
        "summary": {
          "b": [
            "Reads the PxRigidBody flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxRigidBodyFlag",
            "",
            "The values of the PxRigidBody flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRigidBodyFlags",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxRigidBodyFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxRigidBody_setMinCCDAdvanceCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the CCD minimum advance coefficient."
          ]
        },
        "additional": {
          "b": [
            "The CCD minimum advance coefficient is a value in the range [0, 1] that is used to control the minimum amount of time a body is integrated when",
            "it has a CCD contact. The actual minimum amount of time that is integrated depends on various properties, including the relative speed and collision shapes",
            "of the bodies involved in the contact. From these properties, a numeric value is calculated that determines the maximum distance (and therefore maximum time)",
            "which these bodies could be integrated forwards that would ensure that these bodies did not pass through each-other. This value is then scaled by CCD minimum advance",
            "coefficient to determine the amount of time that will be consumed in the CCD pass.",
            "",
            "Things to consider:",
            "A large value (approaching 1) ensures that the objects will always advance some time. However, larger values increase the chances of objects gently drifting through each-other in",
            "scenes which the constraint solver can't converge, e.g. scenes where an object is being dragged through a wall with a constraint.",
            "A value of 0 ensures that the pair of objects stop at the exact time-of-impact and will not gently drift through each-other. However, with very small/thin objects initially in",
            "contact, this can lead to a large amount of time being dropped and increases the chances of jamming. Jamming occurs when the an object is persistently in contact with an object",
            "such that the time-of-impact is 0, which results in no time being advanced for those objects in that CCD pass.",
            "",
            "The chances of jamming can be reduced by increasing the number of CCD mass"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMinCCDAdvanceCoefficient",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "advanceCoefficient",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMinCCDAdvanceCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Gets the CCD minimum advance coefficient."
          ]
        },
        "additional": {
          "b": [
            "The value of the CCD min advance coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMinCCDAdvanceCoefficient",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setMaxDepenetrationVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the maximum depenetration velocity permitted to be introduced by the solver.",
            "This value controls how much velocity the solver can introduce to correct for penetrations in contacts."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxDepenetrationVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "biasClamp",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMaxDepenetrationVelocity",
      "comment": {
        "summary": {
          "b": [
            "Returns the maximum depenetration velocity the solver is permitted to introduced.",
            "This value controls how much velocity the solver can introduce to correct for penetrations in contacts."
          ]
        },
        "additional": {
          "b": [
            "The maximum penetration bias applied by the solver."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxDepenetrationVelocity",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setMaxContactImpulse_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a limit on the impulse that may be applied at a contact. The maximum impulse at a contact between two dynamic or kinematic",
            "bodies will be the minimum of the two limit values. For a collision between a static and a dynamic body, the impulse is limited",
            "by the value for the dynamic body."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxContactImpulse",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "maxImpulse",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getMaxContactImpulse",
      "comment": {
        "summary": {
          "b": [
            "Returns the maximum impulse that may be applied at a contact."
          ]
        },
        "additional": {
          "b": [
            "The maximum impulse that may be applied at a contact"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxContactImpulse",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_setContactSlopCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a distance scale whereby the angular influence of a contact on the normal constraint in a contact is",
            "zeroed if normal.cross(offset) falls below this tolerance. Rather than acting as an absolute value, this tolerance",
            "is scaled by the ratio rXn.dot(angVel)/normal.dot(linVel) such that contacts that have relatively larger angular velocity",
            "than linear normal velocity (e.g. rolling wheels) achieve larger slop values as the angular velocity increases."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactSlopCoefficient",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "slopCoefficient",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBody_getContactSlopCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Returns the contact slop coefficient."
          ]
        },
        "additional": {
          "b": [
            "The contact slop coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactSlopCoefficient",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidBody_getInternalIslandNodeIndex",
      "comment": {
        "summary": {
          "b": [
            "Returns the island node index"
          ]
        },
        "additional": {
          "b": [
            "The island node index."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInternalIslandNodeIndex",
            "class_name": "PxRigidBody",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxNodeIndex"
        }
      }
    },
    {
      "name": "PxArticulationLink_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the link from the articulation."
          ]
        },
        "additional": {
          "b": [
            "Only a leaf articulation link can be released.",
            "",
            "Releasing a link is not allowed while the articulation link is in a scene. In order to release a link,",
            "remove and then re-add the corresponding articulation to the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationLink_getArticulation",
      "comment": {
        "summary": {
          "b": [
            "Gets the articulation that the link is a part of."
          ]
        },
        "additional": {
          "b": [
            "The articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArticulation",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationReducedCoordinate"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationLink_getInboundJoint",
      "comment": {
        "summary": {
          "b": [
            "Gets the joint which connects this link to its parent."
          ]
        },
        "additional": {
          "b": [
            "The joint connecting the link to the parent. NULL for the root link."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInboundJoint",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationJointReducedCoordinate"
            }
          }
        }
      }
    },
    {
      "name": "PxArticulationLink_getInboundJointDof",
      "comment": {
        "summary": {
          "b": [
            "Gets the number of degrees of freedom of the joint which connects this link to its parent."
          ]
        },
        "additional": {
          "b": [
            "- The root link DOF-count is defined to be 0 regardless of PxArticulationFlag::eFIX_BASE.",
            "- The return value is only valid for articulations that are in a scene.",
            "",
            "The number of degrees of freedom, or 0xFFFFFFFF if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInboundJointDof",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationLink_getNbChildren",
      "comment": {
        "summary": {
          "b": [
            "Gets the number of child links."
          ]
        },
        "additional": {
          "b": [
            "The number of child links."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbChildren",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationLink_getLinkIndex",
      "comment": {
        "summary": {
          "b": [
            "Gets the low-level link index that may be used to index into members of PxArticulationCache."
          ]
        },
        "additional": {
          "b": [
            "The return value is only valid for articulations that are in a scene.",
            "",
            "The low-level index, or 0xFFFFFFFF if the articulation is not in a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinkIndex",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationLink_getChildren",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the child links."
          ]
        },
        "additional": {
          "b": [
            "The number of articulation links written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getChildren",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationLink"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxArticulationLink_setCfmScale_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the constraint-force-mixing scale term."
          ]
        },
        "additional": {
          "b": [
            "The cfm scale term is a stabilization term that helps avoid instabilities with over-constrained",
            "configurations. It should be a small value that is multiplied by 1/mass internally to produce",
            "an additional bias added to the unit response term in the solver.",
            "",
            "Default:",
            "0.025",
            "Range:",
            "[0, 1]",
            "",
            "This call is not allowed while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCfmScale",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        },
        {
          "name": "cfm",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxArticulationLink_getCfmScale",
      "comment": {
        "summary": {
          "b": [
            "Get the constraint-force-mixing scale term."
          ]
        },
        "additional": {
          "b": [
            "The constraint-force-mixing scale term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCfmScale",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxArticulationLink_getLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Get the linear velocity of the link."
          ]
        },
        "additional": {
          "b": [
            "- The linear velocity is with respect to the link's center of mass and not the actor frame origin.",
            "- For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query.",
            "- When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.",
            "",
            "The linear velocity of the link.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinearVelocity",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxArticulationLink_getAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Get the angular velocity of the link."
          ]
        },
        "additional": {
          "b": [
            "- For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query.",
            "- When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.",
            "",
            "The angular velocity of the link.",
            "",
            "This call is not allowed while the simulation is running except in a split simulation during #PxScene::collide() and up to #PxScene::advance(),",
            "and in PxContactModifyCallback or in contact report callbacks."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngularVelocity",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxArticulationLink_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns the string name of the dynamic type."
          ]
        },
        "additional": {
          "b": [
            "The string name."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxArticulationLink",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationLink"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxConeLimitedConstraint_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxConeLimitedConstraint"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxConeLimitedConstraint"
        }
      }
    },
    {
      "name": "PxConstraint_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases a PxConstraint instance."
          ]
        },
        "additional": {
          "b": [
            "This call does not wake up the connected rigid bodies."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getScene",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene which this constraint belongs to."
          ]
        },
        "additional": {
          "b": [
            "Owner Scene. NULL if not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxConstraint_getActors",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the actors for this constraint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActors",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_setActors_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the actors for this constraint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setActors",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_markDirty_mut",
      "comment": {
        "summary": {
          "b": [
            "Notify the scene that the constraint shader data has been updated by the application"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "markDirty",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the flags for this constraint"
          ]
        },
        "additional": {
          "b": [
            "the constraint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxConstraintFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxConstraint_setFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the flags for this constraint"
          ]
        },
        "additional": {
          "b": [
            "default: PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlags",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxConstraintFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_setFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Set a flag for this constraint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlag",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxConstraintFlag",
              "cxx_qt": "PxConstraintFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getForce",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the constraint force most recently applied to maintain this constraint."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getForce",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angular",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_isValid",
      "comment": {
        "summary": {
          "b": [
            "whether the constraint is valid."
          ]
        },
        "additional": {
          "b": [
            "A constraint is valid if it has at least one dynamic rigid body or articulation link. A constraint that",
            "is not valid may not be inserted into a scene, and therefore a static actor to which an invalid constraint",
            "is attached may not be inserted into a scene.",
            "",
            "Invalid constraints arise only when an actor to which the constraint is attached has been deleted."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxConstraint_setBreakForce_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the break force and torque thresholds for this constraint."
          ]
        },
        "additional": {
          "b": [
            "If either the force or torque measured at the constraint exceed these thresholds the constraint will break."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBreakForce",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "angular",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getBreakForce",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the constraint break force and torque thresholds"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBreakForce",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "angular",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_setMinResponseThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the minimum response threshold for a constraint row"
          ]
        },
        "additional": {
          "b": [
            "When using mass modification for a joint or infinite inertia for a jointed body, very stiff solver constraints can be generated which",
            "can destabilize simulation. Setting this value to a small positive value (e.g. 1e-8) will cause constraint rows to be ignored if very",
            "large changes in impulses will generate only small changes in velocity. When setting this value, also set",
            "PxConstraintFlag::eDISABLE_PREPROCESSING. The solver accuracy for this joint may be reduced."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMinResponseThreshold",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getMinResponseThreshold",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the constraint break force and torque thresholds"
          ]
        },
        "additional": {
          "b": [
            "the minimum response threshold for a constraint row"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMinResponseThreshold",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxConstraint_getExternalReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Fetch external owner of the constraint."
          ]
        },
        "additional": {
          "b": [
            "Provides a reference to the external owner of a constraint and a unique owner type ID.",
            "",
            "Reference to the external object which owns the constraint."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getExternalReference",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "typeID",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxConstraint_setConstraintFunctions_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the constraint functions for this constraint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setConstraintFunctions",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "connector",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        },
        {
          "name": "shaders",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConstraintShaderTable"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConstraint_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxConstraint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxContactStreamIterator_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxContactStreamIterator"
        }
      },
      "params": [
        {
          "name": "contactPatches",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        },
        {
          "name": "contactPoints",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        },
        {
          "name": "contactFaceIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "nbPatches",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbContacts",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxContactStreamIterator"
        }
      }
    },
    {
      "name": "PxContactStreamIterator_hasNextPatch",
      "comment": {
        "summary": {
          "b": [
            "Returns whether there are more patches in this stream."
          ]
        },
        "additional": {
          "b": [
            "Whether there are more patches in this stream."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hasNextPatch",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxContactStreamIterator_getTotalContactCount",
      "comment": {
        "summary": {
          "b": [
            "Returns the total contact count."
          ]
        },
        "additional": {
          "b": [
            "Total contact count."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTotalContactCount",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactStreamIterator_getTotalPatchCount",
      "comment": {
        "summary": {
          "b": [
            "Returns the total patch count."
          ]
        },
        "additional": {
          "b": [
            "Total patch count."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTotalPatchCount",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactStreamIterator_nextPatch_mut",
      "comment": {
        "summary": {
          "b": [
            "Advances iterator to next contact patch."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "nextPatch",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactStreamIterator_hasNextContact",
      "comment": {
        "summary": {
          "b": [
            "Returns if the current patch has more contacts."
          ]
        },
        "additional": {
          "b": [
            "If there are more contacts in the current patch."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "hasNextContact",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxContactStreamIterator_nextContact_mut",
      "comment": {
        "summary": {
          "b": [
            "Advances to the next contact in the patch."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "nextContact",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactStreamIterator_getContactNormal",
      "comment": {
        "summary": {
          "b": [
            "Gets the current contact's normal"
          ]
        },
        "additional": {
          "b": [
            "The current contact's normal."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactNormal",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactStreamIterator_getInvMassScale0",
      "comment": {
        "summary": {
          "b": [
            "Gets the inverse mass scale for body 0."
          ]
        },
        "additional": {
          "b": [
            "The inverse mass scale for body 0."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale0",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getInvMassScale1",
      "comment": {
        "summary": {
          "b": [
            "Gets the inverse mass scale for body 1."
          ]
        },
        "additional": {
          "b": [
            "The inverse mass scale for body 1."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale1",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getInvInertiaScale0",
      "comment": {
        "summary": {
          "b": [
            "Gets the inverse inertia scale for body 0."
          ]
        },
        "additional": {
          "b": [
            "The inverse inertia scale for body 0."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale0",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getInvInertiaScale1",
      "comment": {
        "summary": {
          "b": [
            "Gets the inverse inertia scale for body 1."
          ]
        },
        "additional": {
          "b": [
            "The inverse inertia scale for body 1."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale1",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getMaxImpulse",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's max impulse."
          ]
        },
        "additional": {
          "b": [
            "The contact's max impulse."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxImpulse",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getTargetVel",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's target velocity."
          ]
        },
        "additional": {
          "b": [
            "The contact's target velocity."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTargetVel",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactStreamIterator_getContactPoint",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's contact point."
          ]
        },
        "additional": {
          "b": [
            "The contact's contact point."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactPoint",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactStreamIterator_getSeparation",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's separation."
          ]
        },
        "additional": {
          "b": [
            "The contact's separation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSeparation",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getFaceIndex0",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's face index for shape 0."
          ]
        },
        "additional": {
          "b": [
            "The contact's face index for shape 0."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFaceIndex0",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactStreamIterator_getFaceIndex1",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's face index for shape 1."
          ]
        },
        "additional": {
          "b": [
            "The contact's face index for shape 1."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFaceIndex1",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactStreamIterator_getStaticFriction",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's static friction coefficient."
          ]
        },
        "additional": {
          "b": [
            "The contact's static friction coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticFriction",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getDynamicFriction",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's dynamic friction coefficient."
          ]
        },
        "additional": {
          "b": [
            "The contact's dynamic friction coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicFriction",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getRestitution",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's restitution coefficient."
          ]
        },
        "additional": {
          "b": [
            "The contact's restitution coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestitution",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getDamping",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's damping value."
          ]
        },
        "additional": {
          "b": [
            "The contact's damping value."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDamping",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactStreamIterator_getMaterialFlags",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's material flags."
          ]
        },
        "additional": {
          "b": [
            "The contact's material flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterialFlags",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactStreamIterator_getMaterialIndex0",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's material index for shape 0."
          ]
        },
        "additional": {
          "b": [
            "The contact's material index for shape 0."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterialIndex0",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxContactStreamIterator_getMaterialIndex1",
      "comment": {
        "summary": {
          "b": [
            "Gets the contact's material index for shape 1."
          ]
        },
        "additional": {
          "b": [
            "The contact's material index for shape 1."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterialIndex1",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "PxContactStreamIterator_advanceToIndex_mut",
      "comment": {
        "summary": {
          "b": [
            "Advances the contact stream iterator to a specific contact index."
          ]
        },
        "additional": {
          "b": [
            "True if advancing was possible"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "advanceToIndex",
            "class_name": "PxContactStreamIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactStreamIterator"
                }
              }
            }
          }
        },
        {
          "name": "initialIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxContactSet_getPoint",
      "comment": {
        "summary": {
          "b": [
            "Get the position of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "Position to the requested point in world space"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPoint",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactSet_setPoint_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the position of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPoint",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getNormal",
      "comment": {
        "summary": {
          "b": [
            "Get the contact normal of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The requested normal in world space"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNormal",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactSet_setNormal_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the contact normal of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "Changing the normal can cause contact points to be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setNormal",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "n",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getSeparation",
      "comment": {
        "summary": {
          "b": [
            "Get the separation distance of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The separation. Negative implies penetration."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSeparation",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setSeparation_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the separation of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSeparation",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "s",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getTargetVelocity",
      "comment": {
        "summary": {
          "b": [
            "Get the target velocity of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The target velocity in world frame"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTargetVelocity",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Builtin": "Vec3"
          }
        }
      }
    },
    {
      "name": "PxContactSet_setTargetVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the target velocity of a specific contact point in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTargetVelocity",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getInternalFaceIndex0",
      "comment": {
        "summary": {
          "b": [
            "Get the face index with respect to the first shape of the pair for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The face index of the first shape",
            "",
            "At the moment, the first shape is never a tri-mesh, therefore this function always returns PXC_CONTACT_NO_FACE_INDEX"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInternalFaceIndex0",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactSet_getInternalFaceIndex1",
      "comment": {
        "summary": {
          "b": [
            "Get the face index with respect to the second shape of the pair for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The face index of the second shape"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInternalFaceIndex1",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactSet_getMaxImpulse",
      "comment": {
        "summary": {
          "b": [
            "Get the maximum impulse for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The maximum impulse"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxImpulse",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setMaxImpulse_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the maximum impulse for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "Must be nonnegative. If set to zero, the contact point will be ignored"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxImpulse",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "s",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getRestitution",
      "comment": {
        "summary": {
          "b": [
            "Get the restitution coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The restitution coefficient"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestitution",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setRestitution_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the restitution coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "Valid ranges [0,1]"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestitution",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "r",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getStaticFriction",
      "comment": {
        "summary": {
          "b": [
            "Get the static friction coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The friction coefficient (dimensionless)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticFriction",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setStaticFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the static friction coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStaticFriction",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "f",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_getDynamicFriction",
      "comment": {
        "summary": {
          "b": [
            "Get the static friction coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": [
            "The friction coefficient"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicFriction",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setDynamicFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Alter the static dynamic coefficient for a specific contact point in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDynamicFriction",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "f",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_ignore_mut",
      "comment": {
        "summary": {
          "b": [
            "Ignore the contact point."
          ]
        },
        "additional": {
          "b": [
            "If a contact point is ignored then no force will get applied at this point. This can be used to disable collision in certain areas of a shape, for example."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "ignore",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_size",
      "comment": {
        "summary": {
          "b": [
            "The number of contact points in the set."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "size",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactSet_getInvMassScale0",
      "comment": {
        "summary": {
          "b": [
            "Returns the invMassScale of body 0"
          ]
        },
        "additional": {
          "b": [
            "A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact",
            "treat the body as if it had infinite mass. Any value > 1.f makes this contact treat the body as if it had smaller mass."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale0",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_getInvMassScale1",
      "comment": {
        "summary": {
          "b": [
            "Returns the invMassScale of body 1"
          ]
        },
        "additional": {
          "b": [
            "A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact",
            "treat the body as if it had infinite mass. Any value > 1.f makes this contact treat the body as if it had smaller mass."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale1",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_getInvInertiaScale0",
      "comment": {
        "summary": {
          "b": [
            "Returns the invInertiaScale of body 0"
          ]
        },
        "additional": {
          "b": [
            "A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact",
            "treat the body as if it had infinite inertia. Any value > 1.f makes this contact treat the body as if it had smaller inertia."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale0",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_getInvInertiaScale1",
      "comment": {
        "summary": {
          "b": [
            "Returns the invInertiaScale of body 1"
          ]
        },
        "additional": {
          "b": [
            "A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact",
            "treat the body as if it had infinite inertia. Any value > 1.f makes this contact treat the body as if it had smaller inertia."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale1",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactSet_setInvMassScale0_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the invMassScale of body 0"
          ]
        },
        "additional": {
          "b": [
            "This can be set to any value in the range [0, PX_MAX_F32). A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact",
            "treat the body as if it had infinite mass. Any value > 1.f makes this contact treat the body as if it had smaller mass."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvMassScale0",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_setInvMassScale1_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the invMassScale of body 1"
          ]
        },
        "additional": {
          "b": [
            "This can be set to any value in the range [0, PX_MAX_F32). A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact",
            "treat the body as if it had infinite mass. Any value > 1.f makes this contact treat the body as if it had smaller mass."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvMassScale1",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_setInvInertiaScale0_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the invInertiaScale of body 0"
          ]
        },
        "additional": {
          "b": [
            "This can be set to any value in the range [0, PX_MAX_F32). A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact",
            "treat the body as if it had infinite inertia. Any value > 1.f makes this contact treat the body as if it had smaller inertia."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvInertiaScale0",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactSet_setInvInertiaScale1_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the invInertiaScale of body 1"
          ]
        },
        "additional": {
          "b": [
            "This can be set to any value in the range [0, PX_MAX_F32). A value",
            "<",
            "1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact",
            "treat the body as if it had infinite inertia. Any value > 1.f makes this contact treat the body as if it had smaller inertia."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvInertiaScale1",
            "class_name": "PxContactSet",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactSet"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactModifyCallback_onContactModify_mut",
      "comment": {
        "summary": {
          "b": [
            "Passes modifiable arrays of contacts to the application."
          ]
        },
        "additional": {
          "b": [
            "The initial contacts are regenerated from scratch each frame by collision detection.",
            "",
            "The number of contacts can not be changed, so you cannot add your own contacts.  You may however",
            "disable contacts using PxContactSet::ignore()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onContactModify",
            "class_name": "PxContactModifyCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactModifyCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairs",
          "kind": {
            "Pointer": {
              "is_const": true,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactModifyPair"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCCDContactModifyCallback_onCCDContactModify_mut",
      "comment": {
        "summary": {
          "b": [
            "Passes modifiable arrays of contacts to the application."
          ]
        },
        "additional": {
          "b": [
            "The initial contacts are regenerated from scratch each frame by collision detection.",
            "",
            "The number of contacts can not be changed, so you cannot add your own contacts.  You may however",
            "disable contacts using PxContactSet::ignore()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onCCDContactModify",
            "class_name": "PxCCDContactModifyCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCCDContactModifyCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairs",
          "kind": {
            "Pointer": {
              "is_const": true,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactModifyPair"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDeletionListener_onRelease_mut",
      "comment": {
        "summary": {
          "b": [
            "Notification if an object or its memory gets released"
          ]
        },
        "additional": {
          "b": [
            "If release() gets called on a PxBase object, an eUSER_RELEASE event will get fired immediately. The object state can be queried in the callback but",
            "it is not allowed to change the state. Furthermore, when reading from the object it is the user's responsibility to make sure that no other thread",
            "is writing at the same time to the object (this includes the simulation itself, i.e., #PxScene::fetchResults() must not get called at the same time).",
            "",
            "Calling release() on a PxBase object does not necessarily trigger its destructor immediately. For example, the object can be shared and might still",
            "be referenced by other objects or the simulation might still be running and accessing the object state. In such cases the destructor will be called",
            "as soon as it is safe to do so. After the destruction of the object and its memory, an eMEMORY_RELEASE event will get fired. In this case it is not",
            "allowed to dereference the object pointer in the callback."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onRelease",
            "class_name": "PxDeletionListener",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDeletionListener"
                }
              }
            }
          }
        },
        {
          "name": "observed",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "userData",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "deletionEvent",
          "kind": {
            "Enum": {
              "name": "PxDeletionEventFlag",
              "cxx_qt": "PxDeletionEventFlag::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBaseMaterial_isKindOf",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isKindOf",
            "class_name": "PxBaseMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseMaterial"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxFEMMaterial_setYoungsModulus_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets young's modulus which defines the body's stiffness"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setYoungsModulus",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        },
        {
          "name": "young",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFEMMaterial_getYoungsModulus",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the young's modulus value."
          ]
        },
        "additional": {
          "b": [
            "The young's modulus value."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getYoungsModulus",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxFEMMaterial_setPoissons_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the Poisson's ratio which defines the body's volume preservation. Completely incompressible materials have a poisson ratio of 0.5. Its value should not be set to exactly 0.5 because this leads to numerical problems."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPoissons",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        },
        {
          "name": "poisson",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFEMMaterial_getPoissons",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the Poisson's ratio."
          ]
        },
        "additional": {
          "b": [
            "The Poisson's ratio."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPoissons",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxFEMMaterial_setDynamicFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the dynamic friction value which defines the strength of resistance when two objects slide relative to each other while in contact."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDynamicFriction",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        },
        {
          "name": "dynamicFriction",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFEMMaterial_getDynamicFriction",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the dynamic friction value"
          ]
        },
        "additional": {
          "b": [
            "The dynamic friction value"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicFriction",
            "class_name": "PxFEMMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFEMMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxFilterData_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxFilterData"
        }
      },
      "params": [
        {
          "name": "anon_param0",
          "kind": {
            "Enum": {
              "name": "PxEMPTY",
              "cxx_qt": "PxEMPTY",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxFilterData"
        }
      }
    },
    {
      "name": "PxFilterData_new_1",
      "comment": {
        "summary": {
          "b": [
            "Default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxFilterData"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxFilterData"
        }
      }
    },
    {
      "name": "PxFilterData_new_2",
      "comment": {
        "summary": {
          "b": [
            "Constructor to set filter data initially."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxFilterData"
        }
      },
      "params": [
        {
          "name": "w0",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "w1",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "w2",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "w3",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxFilterData"
        }
      }
    },
    {
      "name": "PxFilterData_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxFilterData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetFilterObjectType",
      "comment": {
        "summary": {
          "b": [
            "Extract filter object type from the filter attributes of a collision pair object"
          ]
        },
        "additional": {
          "b": [
            "The type of the collision pair object."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetFilterObjectType",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "attr",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxFilterObjectType",
          "cxx_qt": "PxFilterObjectType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "phys_PxFilterObjectIsKinematic",
      "comment": {
        "summary": {
          "b": [
            "Specifies whether the collision object belongs to a kinematic rigid body"
          ]
        },
        "additional": {
          "b": [
            "True if the object belongs to a kinematic rigid body, else false"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxFilterObjectIsKinematic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "attr",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxFilterObjectIsTrigger",
      "comment": {
        "summary": {
          "b": [
            "Specifies whether the collision object is a trigger shape"
          ]
        },
        "additional": {
          "b": [
            "True if the object is a trigger shape, else false"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxFilterObjectIsTrigger",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "attr",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSimulationFilterCallback_pairFound_mut",
      "comment": {
        "summary": {
          "b": [
            "Filter method to specify how a pair of potentially colliding objects should be processed."
          ]
        },
        "additional": {
          "b": [
            "This method gets called when the filter flags returned by the filter shader (see #PxSimulationFilterShader)",
            "indicate that the filter callback should be invoked (#PxFilterFlag::eCALLBACK or #PxFilterFlag::eNOTIFY set).",
            "Return the PxFilterFlag flags and set the PxPairFlag flags to define what the simulation should do with the given",
            "collision pair.",
            "",
            "Filter flags defining whether the pair should be discarded, temporarily ignored or processed and whether the pair",
            "should be tracked and send a report on pair deletion through the filter callback"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "pairFound",
            "class_name": "PxSimulationFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairID",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "attributes0",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData0",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "a0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "s0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "attributes1",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData1",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "a1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "s1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "pairFlags",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Flags": {
                  "name": "PxPairFlags",
                  "repr": "UShort"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxFilterFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxSimulationFilterCallback_pairLost_mut",
      "comment": {
        "summary": {
          "b": [
            "Callback to inform that a tracked collision pair is gone."
          ]
        },
        "additional": {
          "b": [
            "This method gets called when a collision pair disappears or gets re-filtered. Only applies to",
            "collision pairs which have been marked as filter callback pairs (#PxFilterFlag::eNOTIFY set in #pairFound())."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "pairLost",
            "class_name": "PxSimulationFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairID",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "attributes0",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData0",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "attributes1",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData1",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "objectRemoved",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationFilterCallback_statusChange_mut",
      "comment": {
        "summary": {
          "b": [
            "Callback to give the opportunity to change the filter state of a tracked collision pair."
          ]
        },
        "additional": {
          "b": [
            "This method gets called once per simulation step to let the application change the filter and pair",
            "flags of a collision pair that has been reported in #pairFound() and requested callbacks by",
            "setting #PxFilterFlag::eNOTIFY. To request a change of filter status, the target pair has to be",
            "specified by its ID, the new filter and pair flags have to be provided and the method should return true.",
            "",
            "If this method changes the filter status of a collision pair and the pair should keep being tracked",
            "by the filter callbacks then #PxFilterFlag::eNOTIFY has to be set.",
            "",
            "The application is responsible to ensure that this method does not get called for pairs that have been",
            "reported as lost, see #pairLost().",
            "",
            "True if the changes should be applied. In this case the method will get called again. False if",
            "no more status changes should be done in the current simulation step. In that case the provided flags will be discarded."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "statusChange",
            "class_name": "PxSimulationFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairID",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "pairFlags",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Flags": {
                  "name": "PxPairFlags",
                  "repr": "UShort"
                }
              }
            }
          }
        },
        {
          "name": "filterFlags",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Flags": {
                  "name": "PxFilterFlags",
                  "repr": "UShort"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxLockedData_getDataAccessFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Any combination of PxDataAccessFlag::eREADABLE and PxDataAccessFlag::eWRITABLE"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDataAccessFlags",
            "class_name": "PxLockedData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLockedData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxDataAccessFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxLockedData_unlock_mut",
      "comment": {
        "summary": {
          "b": [
            "Unlocks the bulk data."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlock",
            "class_name": "PxLockedData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLockedData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxLockedData_delete",
      "comment": {
        "summary": {
          "b": [
            "virtual destructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxLockedData"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxLockedData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_setDynamicFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the coefficient of dynamic friction."
          ]
        },
        "additional": {
          "b": [
            "The coefficient of dynamic friction should be in [0, PX_MAX_F32). If set to greater than staticFriction, the effective value of staticFriction will be increased to match.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDynamicFriction",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "coef",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getDynamicFriction",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the DynamicFriction value."
          ]
        },
        "additional": {
          "b": [
            "The coefficient of dynamic friction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicFriction",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMaterial_setStaticFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the coefficient of static friction"
          ]
        },
        "additional": {
          "b": [
            "The coefficient of static friction should be in the range [0, PX_MAX_F32)",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStaticFriction",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "coef",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getStaticFriction",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the coefficient of static friction."
          ]
        },
        "additional": {
          "b": [
            "The coefficient of static friction."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticFriction",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMaterial_setRestitution_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the coefficient of restitution"
          ]
        },
        "additional": {
          "b": [
            "A coefficient of 0 makes the object bounce as little as possible, higher values up to 1.0 result in more bounce.",
            "",
            "This property is overloaded when PxMaterialFlag::eCOMPLIANT_CONTACT flag is enabled. This permits negative values for restitution to be provided.",
            "The negative values are converted into spring stiffness terms for an implicit spring simulated at the contact site, with the spring positional error defined by",
            "the contact separation value. Higher stiffness terms produce stiffer springs that behave more like a rigid contact.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestitution",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "rest",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getRestitution",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the coefficient of restitution."
          ]
        },
        "additional": {
          "b": [
            "See #setRestitution.",
            "",
            "The coefficient of restitution."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestitution",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMaterial_setDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the coefficient of damping"
          ]
        },
        "additional": {
          "b": [
            "This property only affects the simulation if PxMaterialFlag::eCOMPLIANT_CONTACT is raised.",
            "Damping works together with spring stiffness (set through a negative restitution value). Spring stiffness corrects positional error while",
            "damping resists relative velocity. Setting a high damping coefficient can produce spongy contacts.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDamping",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "damping",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getDamping",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the coefficient of damping."
          ]
        },
        "additional": {
          "b": [
            "See #setDamping.",
            "",
            "The coefficient of damping."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDamping",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxMaterial_setFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Raises or clears a particular material flag."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxMaterialFlag",
            "",
            "Default:",
            "eIMPROVED_PATCH_FRICTION",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlag",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxMaterialFlag",
              "cxx_qt": "PxMaterialFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_setFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "sets all the material flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxMaterialFlag",
            "",
            "Default:",
            "eIMPROVED_PATCH_FRICTION",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlags",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxMaterialFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the flags. See #PxMaterialFlag."
          ]
        },
        "additional": {
          "b": [
            "The material flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxMaterialFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxMaterial_setFrictionCombineMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the friction combine mode."
          ]
        },
        "additional": {
          "b": [
            "See the enum ::PxCombineMode .",
            "",
            "Default:",
            "PxCombineMode::eAVERAGE",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFrictionCombineMode",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "combMode",
          "kind": {
            "Enum": {
              "name": "PxCombineMode",
              "cxx_qt": "PxCombineMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getFrictionCombineMode",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the friction combine mode."
          ]
        },
        "additional": {
          "b": [
            "See #setFrictionCombineMode.",
            "",
            "The friction combine mode for this material."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFrictionCombineMode",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxCombineMode",
          "cxx_qt": "PxCombineMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxMaterial_setRestitutionCombineMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the restitution combine mode."
          ]
        },
        "additional": {
          "b": [
            "See the enum ::PxCombineMode .",
            "",
            "Default:",
            "PxCombineMode::eAVERAGE",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake any actors which may be affected."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestitutionCombineMode",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "combMode",
          "kind": {
            "Enum": {
              "name": "PxCombineMode",
              "cxx_qt": "PxCombineMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMaterial_getRestitutionCombineMode",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the restitution combine mode."
          ]
        },
        "additional": {
          "b": [
            "See #setRestitutionCombineMode.",
            "",
            "The coefficient of restitution combine mode for this material."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestitutionCombineMode",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxCombineMode",
          "cxx_qt": "PxCombineMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxMaterial_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxDiffuseParticleParams_new",
      "comment": {
        "summary": {
          "b": [
            "Construct parameters with default values."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxDiffuseParticleParams"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxDiffuseParticleParams"
        }
      }
    },
    {
      "name": "PxDiffuseParticleParams_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxDiffuseParticleParams",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDiffuseParticleParams"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_setFriction_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets friction"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFriction",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        },
        {
          "name": "friction",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_getFriction",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the friction value."
          ]
        },
        "additional": {
          "b": [
            "The friction value."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFriction",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxParticleMaterial_setDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets velocity damping term"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDamping",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        },
        {
          "name": "damping",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_getDamping",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the velocity damping term"
          ]
        },
        "additional": {
          "b": [
            "The velocity damping term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDamping",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxParticleMaterial_setAdhesion_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets adhesion term"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setAdhesion",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        },
        {
          "name": "adhesion",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_getAdhesion",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the adhesion term"
          ]
        },
        "additional": {
          "b": [
            "The adhesion term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAdhesion",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxParticleMaterial_setGravityScale_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets gravity scale term"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setGravityScale",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_getGravityScale",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the gravity scale term"
          ]
        },
        "additional": {
          "b": [
            "The gravity scale term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGravityScale",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxParticleMaterial_setAdhesionRadiusScale_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets material adhesion radius scale. This is multiplied by the particle rest offset to compute the fall-off distance",
            "at which point adhesion ceases to operate."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setAdhesionRadiusScale",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxParticleMaterial_getAdhesionRadiusScale",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the adhesion radius scale."
          ]
        },
        "additional": {
          "b": [
            "The adhesion radius scale."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAdhesionRadiusScale",
            "class_name": "PxParticleMaterial",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxParticleMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxPhysics_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Destroys the instance it is called on."
          ]
        },
        "additional": {
          "b": [
            "Use this release method to destroy an instance of this class. Be sure",
            "to not keep a reference to this object after calling release.",
            "Avoid release calls while a scene is simulating (in between simulate() and fetchResults() calls).",
            "",
            "Note that this must be called once for each prior call to PxCreatePhysics, as",
            "there is a reference counter. Also note that you mustn't destroy the PxFoundation instance (holding the allocator, error callback etc.)",
            "until after the reference count reaches 0 and the SDK is actually removed.",
            "",
            "Releasing an SDK will also release any objects created through it (scenes, triangle meshes, convex meshes, heightfields, shapes etc.),",
            "provided the user hasn't already done so.",
            "",
            "Releasing the PxPhysics instance is a prerequisite to releasing the PxFoundation instance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPhysics_getFoundation_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the Foundation instance."
          ]
        },
        "additional": {
          "b": [
            "A reference to the Foundation object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFoundation",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxFoundation"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createAggregate_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates an aggregate with the specified maximum size and filtering hint."
          ]
        },
        "additional": {
          "b": [
            "The previous API used \"bool enableSelfCollision\" which should now silently evaluates",
            "to a PxAggregateType::eGENERIC aggregate with its self-collision bit.",
            "",
            "Use PxAggregateType::eSTATIC or PxAggregateType::eKINEMATIC for aggregates that will",
            "only contain static or kinematic actors. This provides faster filtering when used in",
            "combination with PxPairFilteringMode.",
            "",
            "The new aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createAggregate",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "maxActor",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxShape",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterHint",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAggregate"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getTolerancesScale",
      "comment": {
        "summary": {
          "b": [
            "Returns the simulation tolerance parameters."
          ]
        },
        "additional": {
          "b": [
            "The current simulation tolerance parameters."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTolerancesScale",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxTolerancesScale"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createTriangleMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a triangle mesh object."
          ]
        },
        "additional": {
          "b": [
            "This can then be instanced into #PxShape objects.",
            "",
            "The new triangle mesh."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createTriangleMesh",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTriangleMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbTriangleMeshes",
      "comment": {
        "summary": {
          "b": [
            "Return the number of triangle meshes that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of triangle meshes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTriangleMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getTriangleMeshes",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of triangle mesh pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the triangle meshes in the array is not specified.",
            "",
            "The number of triangle mesh pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTriangleMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxTriangleMesh"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createTetrahedronMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a tetrahedron mesh object."
          ]
        },
        "additional": {
          "b": [
            "This can then be instanced into #PxShape objects.",
            "",
            "The new tetrahedron mesh."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createTetrahedronMesh",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTetrahedronMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createSoftBodyMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a softbody mesh object."
          ]
        },
        "additional": {
          "b": [
            "The new softbody mesh."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createSoftBodyMesh",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSoftBodyMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbTetrahedronMeshes",
      "comment": {
        "summary": {
          "b": [
            "Return the number of tetrahedron meshes that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of tetrahedron meshes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbTetrahedronMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getTetrahedronMeshes",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of tetrahedron mesh pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the tetrahedron meshes in the array is not specified.",
            "",
            "The number of tetrahedron mesh pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTetrahedronMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxTetrahedronMesh"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createHeightField_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a heightfield object from previously cooked stream."
          ]
        },
        "additional": {
          "b": [
            "This can then be instanced into #PxShape objects.",
            "",
            "The new heightfield."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createHeightField",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxHeightField"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbHeightFields",
      "comment": {
        "summary": {
          "b": [
            "Return the number of heightfields that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of heightfields."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbHeightFields",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getHeightFields",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of heightfield pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the heightfields in the array is not specified.",
            "",
            "The number of heightfield pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHeightFields",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxHeightField"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createConvexMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a convex mesh object."
          ]
        },
        "additional": {
          "b": [
            "This can then be instanced into #PxShape objects.",
            "",
            "The new convex mesh."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createConvexMesh",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxConvexMesh"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbConvexMeshes",
      "comment": {
        "summary": {
          "b": [
            "Return the number of convex meshes that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of convex meshes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbConvexMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getConvexMeshes",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of convex mesh pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the convex meshes in the array is not specified.",
            "",
            "The number of convex mesh pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConvexMeshes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxConvexMesh"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createBVH_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a bounding volume hierarchy."
          ]
        },
        "additional": {
          "b": [
            "The new BVH."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createBVH",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBVH"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbBVHs",
      "comment": {
        "summary": {
          "b": [
            "Return the number of bounding volume hierarchies that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of bounding volume hierarchies."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbBVHs",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getBVHs",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of bounding volume hierarchy pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the BVHs in the array is not specified.",
            "",
            "The number of BVH pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBVHs",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxBVH"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createScene_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a scene."
          ]
        },
        "additional": {
          "b": [
            "Every scene uses a Thread Local Storage slot. This imposes a platform specific limit on the",
            "number of scenes that can be created.",
            "",
            "The new scene object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createScene",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "sceneDesc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSceneDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbScenes",
      "comment": {
        "summary": {
          "b": [
            "Gets number of created scenes."
          ]
        },
        "additional": {
          "b": [
            "The number of scenes created."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbScenes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getScenes",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of scene pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the scene pointers in the array is not specified.",
            "",
            "The number of scene pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScenes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxScene"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createRigidStatic_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a static rigid actor with the specified pose and all other fields initialized",
            "to their default values."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createRigidStatic",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidStatic"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createRigidDynamic_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a dynamic rigid actor with the specified pose and all other fields initialized",
            "to their default values."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createRigidDynamic",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createPruningStructure_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a pruning structure from actors."
          ]
        },
        "additional": {
          "b": [
            "Every provided actor needs at least one shape with the eSCENE_QUERY_SHAPE flag set.",
            "",
            "Both static and dynamic actors can be provided.",
            "",
            "It is not allowed to pass in actors which are already part of a scene.",
            "",
            "Articulation links cannot be provided.",
            "",
            "Pruning structure created from given actors, or NULL if any of the actors did not comply with the above requirements."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createPruningStructure",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actors",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbActors",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPruningStructure"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a shape which may be attached to multiple actors"
          ]
        },
        "additional": {
          "b": [
            "The shape will be created with a reference count of 1.",
            "",
            "The shape",
            "",
            "Shared shapes are not mutable when they are attached to an actor"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createShape",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "isExclusive",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "shapeFlags",
          "kind": {
            "Flags": {
              "name": "PxShapeFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxShape"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createShape_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Creates a shape which may be attached to multiple actors"
          ]
        },
        "additional": {
          "b": [
            "The shape will be created with a reference count of 1.",
            "",
            "The shape",
            "",
            "Shared shapes are not mutable when they are attached to an actor",
            "",
            "Shapes created from *SDF* triangle-mesh geometries do not support more than one material."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createShape",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "materials",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxMaterial"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "materialCount",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "isExclusive",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "shapeFlags",
          "kind": {
            "Flags": {
              "name": "PxShapeFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxShape"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbShapes",
      "comment": {
        "summary": {
          "b": [
            "Return the number of shapes that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of shapes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbShapes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getShapes",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of shape pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the shapes in the array is not specified.",
            "",
            "The number of shape pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getShapes",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxShape"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_createConstraint_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a constraint shader."
          ]
        },
        "additional": {
          "b": [
            "A constraint shader will get added automatically to the scene the two linked actors belong to. Either, but not both, of actor0 and actor1 may",
            "be NULL to denote attachment to the world.",
            "",
            "The new constraint shader."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createConstraint",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "connector",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintConnector"
                }
              }
            }
          }
        },
        {
          "name": "shaders",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConstraintShaderTable"
                }
              }
            }
          }
        },
        {
          "name": "dataSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxConstraint"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createArticulationReducedCoordinate_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a reduced-coordinate articulation with all fields initialized to their default values."
          ]
        },
        "additional": {
          "b": [
            "the new articulation"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createArticulationReducedCoordinate",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxArticulationReducedCoordinate"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_createMaterial_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a new rigid body material with certain default properties."
          ]
        },
        "additional": {
          "b": [
            "The new rigid body material."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createMaterial",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "staticFriction",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "dynamicFriction",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "restitution",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxMaterial"
            }
          }
        }
      }
    },
    {
      "name": "PxPhysics_getNbMaterials",
      "comment": {
        "summary": {
          "b": [
            "Return the number of rigid body materials that currently exist."
          ]
        },
        "additional": {
          "b": [
            "Number of rigid body materials."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbMaterials",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_getMaterials",
      "comment": {
        "summary": {
          "b": [
            "Writes the array of rigid body material pointers to a user buffer."
          ]
        },
        "additional": {
          "b": [
            "Returns the number of pointers written.",
            "",
            "The ordering of the materials in the array is not specified.",
            "",
            "The number of material pointers written to userBuffer, this should be less or equal to bufferSize."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaterials",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxMaterial"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPhysics_registerDeletionListener_mut",
      "comment": {
        "summary": {
          "b": [
            "Register a deletion listener. Listeners will be called whenever an object is deleted."
          ]
        },
        "additional": {
          "b": [
            "It is illegal to register or unregister a deletion listener while deletions are being processed.",
            "",
            "By default a registered listener will receive events from all objects. Set the restrictedObjectSet parameter to true on registration and use #registerDeletionListenerObjects to restrict the received events to specific objects.",
            "",
            "The deletion events are only supported on core PhysX objects. In general, objects in extension modules do not provide this functionality, however, in the case of PxJoint objects, the underlying PxConstraint will send the events."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerDeletionListener",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "observer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxDeletionListener"
                }
              }
            }
          }
        },
        {
          "name": "deletionEvents",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Flags": {
                  "name": "PxDeletionEventFlags",
                  "repr": "UChar"
                }
              }
            }
          }
        },
        {
          "name": "restrictedObjectSet",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPhysics_unregisterDeletionListener_mut",
      "comment": {
        "summary": {
          "b": [
            "Unregister a deletion listener."
          ]
        },
        "additional": {
          "b": [
            "It is illegal to register or unregister a deletion listener while deletions are being processed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unregisterDeletionListener",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "observer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxDeletionListener"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPhysics_registerDeletionListenerObjects_mut",
      "comment": {
        "summary": {
          "b": [
            "Register specific objects for deletion events."
          ]
        },
        "additional": {
          "b": [
            "This method allows for a deletion listener to limit deletion events to specific objects only.",
            "",
            "It is illegal to register or unregister objects while deletions are being processed.",
            "",
            "The deletion listener has to be registered through #registerDeletionListener() and configured to support restricted object sets prior to this method being used."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "registerDeletionListenerObjects",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "observer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxDeletionListener"
                }
              }
            }
          }
        },
        {
          "name": "observables",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxBase"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "observableCount",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPhysics_unregisterDeletionListenerObjects_mut",
      "comment": {
        "summary": {
          "b": [
            "Unregister specific objects for deletion events."
          ]
        },
        "additional": {
          "b": [
            "This method allows to clear previously registered objects for a deletion listener (see #registerDeletionListenerObjects()).",
            "",
            "It is illegal to register or unregister objects while deletions are being processed.",
            "",
            "The deletion listener has to be registered through #registerDeletionListener() and configured to support restricted object sets prior to this method being used."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unregisterDeletionListenerObjects",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "observer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxDeletionListener"
                }
              }
            }
          }
        },
        {
          "name": "observables",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxBase"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "observableCount",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPhysics_getPhysicsInsertionCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Gets PxPhysics object insertion interface."
          ]
        },
        "additional": {
          "b": [
            "The insertion interface is needed for PxCreateTriangleMesh, PxCooking::createTriangleMesh etc., this allows runtime mesh creation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPhysicsInsertionCallback",
            "class_name": "PxPhysics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxInsertionCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreatePhysics",
      "comment": {
        "summary": {
          "b": [
            "Creates an instance of the physics SDK."
          ]
        },
        "additional": {
          "b": [
            "Creates an instance of this class. May not be a class member to avoid name mangling.",
            "Pass the constant #PX_PHYSICS_VERSION as the argument.",
            "There may be only one instance of this class per process. Calling this method after an instance",
            "has been created already will result in an error message and NULL will be returned.",
            "",
            "Calling this will register all optional code modules (Articulations and HeightFields), preparing them for use.",
            "If you do not need some of these modules, consider calling PxCreateBasePhysics() instead and registering needed",
            "modules manually.",
            "",
            "PxPhysics instance on success, NULL if operation failed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreatePhysics",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "version",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "foundation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        },
        {
          "name": "trackOutstandingAllocations",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "pvd",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        },
        {
          "name": "omniPvd",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOmniPvd"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPhysics"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxGetPhysics",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetPhysics",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxPhysics"
            }
          }
        }
      }
    },
    {
      "name": "PxActorShape_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxActorShape"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxActorShape"
        }
      }
    },
    {
      "name": "PxActorShape_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxActorShape"
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "s",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxActorShape"
        }
      }
    },
    {
      "name": "PxQueryCache_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQueryCache"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxQueryCache"
        }
      }
    },
    {
      "name": "PxQueryCache_new_1",
      "comment": {
        "summary": {
          "b": [
            "constructor to set properties"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQueryCache"
        }
      },
      "params": [
        {
          "name": "s",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "findex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQueryCache"
        }
      }
    },
    {
      "name": "PxQueryFilterData_new",
      "comment": {
        "summary": {
          "b": [
            "default constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQueryFilterData"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxQueryFilterData"
        }
      }
    },
    {
      "name": "PxQueryFilterData_new_1",
      "comment": {
        "summary": {
          "b": [
            "constructor to set both filter data and filter flags"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQueryFilterData"
        }
      },
      "params": [
        {
          "name": "fd",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        },
        {
          "name": "f",
          "kind": {
            "Flags": {
              "name": "PxQueryFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQueryFilterData"
        }
      }
    },
    {
      "name": "PxQueryFilterData_new_2",
      "comment": {
        "summary": {
          "b": [
            "constructor to set filter flags only"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxQueryFilterData"
        }
      },
      "params": [
        {
          "name": "f",
          "kind": {
            "Flags": {
              "name": "PxQueryFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxQueryFilterData"
        }
      }
    },
    {
      "name": "PxQueryFilterCallback_preFilter_mut",
      "comment": {
        "summary": {
          "b": [
            "This filter callback is executed before the exact intersection test if PxQueryFlag::ePREFILTER flag was set."
          ]
        },
        "additional": {
          "b": [
            "the updated type for this hit  (see #PxQueryHitType)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "preFilter",
            "class_name": "PxQueryFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Flags": {
                  "name": "PxHitFlags",
                  "repr": "UShort"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxQueryHitType",
          "cxx_qt": "PxQueryHitType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxQueryFilterCallback_postFilter_mut",
      "comment": {
        "summary": {
          "b": [
            "This filter callback is executed if the exact intersection test returned true and PxQueryFlag::ePOSTFILTER flag was set."
          ]
        },
        "additional": {
          "b": [
            "the updated hit type for this hit  (see #PxQueryHitType)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "postFilter",
            "class_name": "PxQueryFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryHit"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxQueryHitType",
          "cxx_qt": "PxQueryHitType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxQueryFilterCallback_delete",
      "comment": {
        "summary": {
          "b": [
            "virtual destructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "IsDelete": "PxQueryFilterCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_setKinematicTarget_mut",
      "comment": {
        "summary": {
          "b": [
            "Moves kinematically controlled dynamic actors through the game world."
          ]
        },
        "additional": {
          "b": [
            "You set a dynamic actor to be kinematic using the PxRigidBodyFlag::eKINEMATIC flag",
            "with setRigidBodyFlag().",
            "",
            "The move command will result in a velocity that will move the body into",
            "the desired pose. After the move is carried out during a single time step,",
            "the velocity is returned to zero. Thus, you must continuously call",
            "this in every time step for kinematic actors so that they move along a path.",
            "",
            "This function simply stores the move destination until the next simulation",
            "step is processed, so consecutive calls will simply overwrite the stored target variable.",
            "",
            "The motion is always fully carried out.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping and will set the wake counter to #PxSceneDesc::wakeCounterResetValue."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setKinematicTarget",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "destination",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getKinematicTarget",
      "comment": {
        "summary": {
          "b": [
            "Get target pose of a kinematically controlled dynamic actor."
          ]
        },
        "additional": {
          "b": [
            "True if the actor is a kinematically controlled dynamic and the target has been set, else False."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getKinematicTarget",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "target",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidDynamic_isSleeping",
      "comment": {
        "summary": {
          "b": [
            "Returns true if this body is sleeping."
          ]
        },
        "additional": {
          "b": [
            "When an actor does not move for a period of time, it is no longer simulated in order to save time. This state",
            "is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,",
            "or one of its properties is changed by the user, the entire sleep mechanism should be transparent to the user.",
            "",
            "In general, a dynamic rigid actor is guaranteed to be awake if at least one of the following holds:",
            "",
            "The wake counter is positive (see #setWakeCounter()).",
            "",
            "The linear or angular velocity is non-zero.",
            "",
            "A non-zero force or torque has been applied.",
            "",
            "If a dynamic rigid actor is sleeping, the following state is guaranteed:",
            "",
            "The wake counter is zero.",
            "",
            "The linear and angular velocity is zero.",
            "",
            "There is no force update pending.",
            "",
            "When an actor gets inserted into a scene, it will be considered asleep if all the points above hold, else it will be treated as awake.",
            "",
            "If an actor is asleep after the call to PxScene::fetchResults() returns, it is guaranteed that the pose of the actor",
            "was not changed. You can use this information to avoid updating the transforms of associated objects.",
            "",
            "A kinematic actor is asleep unless a target pose has been set (in which case it will stay awake until two consecutive",
            "simulation steps without a target pose being set have passed). The wake counter will get set to zero or to the reset value",
            "#PxSceneDesc::wakeCounterResetValue in the case where a target pose has been set to be consistent with the definitions above.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already.",
            "",
            "It is not allowed to use this method while the simulation is running.",
            "",
            "True if the actor is sleeping."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSleeping",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidDynamic_setSleepThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the mass-normalized kinetic energy threshold below which an actor may go to sleep."
          ]
        },
        "additional": {
          "b": [
            "Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.",
            "",
            "Default:",
            "5e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSleepThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getSleepThreshold",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass-normalized kinetic energy below which an actor may go to sleep."
          ]
        },
        "additional": {
          "b": [
            "The energy threshold for sleeping."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSleepThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidDynamic_setStabilizationThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the mass-normalized kinetic energy threshold below which an actor may participate in stabilization."
          ]
        },
        "additional": {
          "b": [
            "Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.",
            "",
            "This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.",
            "",
            "Default:",
            "1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStabilizationThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getStabilizationThreshold",
      "comment": {
        "summary": {
          "b": [
            "Returns the mass-normalized kinetic energy below which an actor may participate in stabilization."
          ]
        },
        "additional": {
          "b": [
            "Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.",
            "",
            "The energy threshold for participating in stabilization."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStabilizationThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidDynamic_getRigidDynamicLockFlags",
      "comment": {
        "summary": {
          "b": [
            "Reads the PxRigidDynamic lock flags."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxRigidDynamicLockFlag",
            "",
            "The values of the PxRigidDynamicLock flags."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRigidDynamicLockFlags",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxRigidDynamicLockFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxRigidDynamic_setRigidDynamicLockFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Raises or clears a particular rigid dynamic lock flag."
          ]
        },
        "additional": {
          "b": [
            "See the list of flags #PxRigidDynamicLockFlag",
            "",
            "Default:",
            "no flags are set"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRigidDynamicLockFlag",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxRigidDynamicLockFlag",
              "cxx_qt": "PxRigidDynamicLockFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_setRigidDynamicLockFlags_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRigidDynamicLockFlags",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxRigidDynamicLockFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the linear velocity of an actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "The linear velocity of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinearVelocity",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidDynamic_setLinearVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the linear velocity of the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if you continuously set the velocity of an actor yourself,",
            "forces such as gravity or friction will not be able to manifest themselves, because forces directly",
            "influence only the velocity/momentum of an actor.",
            "",
            "Default:",
            "(0.0, 0.0, 0.0)",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the",
            "new velocity is non-zero.",
            "",
            "It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLinearVelocity",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "linVel",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the angular velocity of the actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running (except during PxScene::collide(),",
            "in PxContactModifyCallback or in contact report callbacks).",
            "",
            "The angular velocity of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngularVelocity",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidDynamic_setAngularVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the angular velocity of the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if you continuously set the angular velocity of an actor yourself,",
            "forces such as friction will not be able to rotate the actor, because forces directly influence only the velocity/momentum.",
            "",
            "Default:",
            "(0.0, 0.0, 0.0)",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the",
            "new velocity is non-zero.",
            "",
            "It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setAngularVelocity",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "angVel",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_setWakeCounter_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the wake counter for the actor."
          ]
        },
        "additional": {
          "b": [
            "The wake counter value determines the minimum amount of time until the body can be put to sleep. Please note",
            "that a body will not be put to sleep if the energy is above the specified threshold (see #setSleepThreshold())",
            "or if other awake bodies are touching it.",
            "",
            "Passing in a positive value will wake the actor up automatically.",
            "",
            "It is invalid to use this method for kinematic actors since the wake counter for kinematics is defined",
            "based on whether a target pose has been set (see the comment in #isSleeping()).",
            "",
            "It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "Default:",
            "0.4 (which corresponds to 20 frames for a time step of 0.02)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setWakeCounter",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "wakeCounterValue",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getWakeCounter",
      "comment": {
        "summary": {
          "b": [
            "Returns the wake counter of the actor."
          ]
        },
        "additional": {
          "b": [
            "It is not allowed to use this method while the simulation is running.",
            "",
            "The wake counter of the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWakeCounter",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidDynamic_wakeUp_mut",
      "comment": {
        "summary": {
          "b": [
            "Wakes up the actor if it is sleeping."
          ]
        },
        "additional": {
          "b": [
            "The actor will get woken up and might cause other touching actors to wake up as well during the next simulation step.",
            "",
            "This will set the wake counter of the actor to the value specified in #PxSceneDesc::wakeCounterResetValue.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined",
            "based on whether a target pose has been set (see the comment in #isSleeping())."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "wakeUp",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_putToSleep_mut",
      "comment": {
        "summary": {
          "b": [
            "Forces the actor to sleep."
          ]
        },
        "additional": {
          "b": [
            "The actor will stay asleep during the next simulation step if not touched by another non-sleeping actor.",
            "",
            "Any applied force will be cleared and the velocity and the wake counter of the actor will be set to 0.",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined",
            "based on whether a target pose has been set (see the comment in #isSleeping())."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "putToSleep",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_setSolverIterationCounts_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the solver iteration counts for the body."
          ]
        },
        "additional": {
          "b": [
            "The solver iteration count determines how accurately joints and contacts are resolved.",
            "If you are having trouble with jointed bodies oscillating and behaving erratically, then",
            "setting a higher position iteration count may improve their stability.",
            "",
            "If intersecting bodies are being depenetrated too violently, increase the number of velocity",
            "iterations. More velocity iterations will drive the relative exit velocity of the intersecting",
            "objects closer to the correct value given the restitution.",
            "",
            "Default:",
            "4 position iterations, 1 velocity iteration"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSolverIterationCounts",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "minPositionIters",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "minVelocityIters",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getSolverIterationCounts",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the solver iteration counts."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSolverIterationCounts",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "minPositionIters",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "minVelocityIters",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getContactReportThreshold",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the force threshold for contact reports."
          ]
        },
        "additional": {
          "b": [
            "The contact report threshold is a force threshold. If the force between",
            "two actors exceeds this threshold for either of the two actors, a contact report",
            "will be generated according to the contact report threshold flags provided by",
            "the filter shader/callback.",
            "See #PxPairFlag.",
            "",
            "The threshold used for a collision between a dynamic actor and the static environment is",
            "the threshold of the dynamic actor, and all contacts with static actors are summed to find",
            "the total normal force.",
            "",
            "Default:",
            "PX_MAX_F32",
            "",
            "Force threshold for contact reports."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactReportThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRigidDynamic_setContactReportThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the force threshold for contact reports."
          ]
        },
        "additional": {
          "b": [
            "See #getContactReportThreshold()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactReportThreshold",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        },
        {
          "name": "threshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidDynamic_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxRigidDynamic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxRigidStatic_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxRigidStatic",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidStatic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxSceneQueryDesc_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSceneQueryDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSceneQueryDesc"
        }
      }
    },
    {
      "name": "PxSceneQueryDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxSceneQueryDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQueryDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQueryDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSceneQueryDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQueryDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQuerySystemBase_setDynamicTreeRebuildRateHint_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the rebuild rate of the dynamic tree pruning structures."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDynamicTreeRebuildRateHint",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "dynamicTreeRebuildRateHint",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystemBase_getDynamicTreeRebuildRateHint",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the rebuild rate of the dynamic tree pruning structures."
          ]
        },
        "additional": {
          "b": [
            "The rebuild rate of the dynamic tree pruning structures."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicTreeRebuildRateHint",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneQuerySystemBase_forceRebuildDynamicTree_mut",
      "comment": {
        "summary": {
          "b": [
            "Forces dynamic trees to be immediately rebuilt."
          ]
        },
        "additional": {
          "b": [
            "PxScene will call this function with the PX_SCENE_PRUNER_STATIC or PX_SCENE_PRUNER_DYNAMIC value."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "forceRebuildDynamicTree",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystemBase_setUpdateMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets scene query update mode"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setUpdateMode",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "updateMode",
          "kind": {
            "Enum": {
              "name": "PxSceneQueryUpdateMode",
              "cxx_qt": "PxSceneQueryUpdateMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystemBase_getUpdateMode",
      "comment": {
        "summary": {
          "b": [
            "Gets scene query update mode"
          ]
        },
        "additional": {
          "b": [
            "Current scene query update mode."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getUpdateMode",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxSceneQueryUpdateMode",
          "cxx_qt": "PxSceneQueryUpdateMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxSceneQuerySystemBase_getStaticTimestamp",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the system's internal scene query timestamp, increased each time a change to the",
            "static scene query structure is performed."
          ]
        },
        "additional": {
          "b": [
            "scene query static timestamp"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticTimestamp",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneQuerySystemBase_flushUpdates_mut",
      "comment": {
        "summary": {
          "b": [
            "Flushes any changes to the scene query representation."
          ]
        },
        "additional": {
          "b": [
            "This method updates the state of the scene query representation to match changes in the scene state.",
            "",
            "By default, these changes are buffered until the next query is submitted. Calling this function will not change",
            "the results from scene queries, but can be used to ensure that a query will not perform update work in the course of",
            "its execution.",
            "",
            "A thread performing updates will hold a write lock on the query structure, and thus stall other querying threads. In multithread",
            "scenarios it can be useful to explicitly schedule the period where this lock may be held for a significant period, so that",
            "subsequent queries issued from multiple threads will not block."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flushUpdates",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystemBase_raycast",
      "comment": {
        "summary": {
          "b": [
            "Performs a raycast against objects in the scene, returns results in a PxRaycastBuffer object",
            "or via a custom user callback implementation inheriting from PxRaycastCallback."
          ]
        },
        "additional": {
          "b": [
            "Touching hits are not ordered.",
            "",
            "Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in user guide article SceneQuery. User can ignore such objects by employing one of the provided filter mechanisms.",
            "",
            "True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hitCall",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastCallback"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQuerySystemBase_sweep",
      "comment": {
        "summary": {
          "b": [
            "Performs a sweep test against objects in the scene, returns results in a PxSweepBuffer object",
            "or via a custom user callback implementation inheriting from PxSweepCallback."
          ]
        },
        "additional": {
          "b": [
            "Touching hits are not ordered.",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position,",
            "the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.",
            "",
            "True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hitCall",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepCallback"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQuerySystemBase_overlap",
      "comment": {
        "summary": {
          "b": [
            "Performs an overlap test of a given geometry against objects in the scene, returns results in a PxOverlapBuffer object",
            "or via a custom user callback implementation inheriting from PxOverlapCallback."
          ]
        },
        "additional": {
          "b": [
            "Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see #PxQueryHitType).",
            "",
            "True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.",
            "",
            "eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.",
            "",
            "If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxSceneQuerySystemBase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystemBase"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "hitCall",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOverlapCallback"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxGeometryQueryFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneSQSystem_setSceneQueryUpdateMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets scene query update mode"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSceneQueryUpdateMode",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        },
        {
          "name": "updateMode",
          "kind": {
            "Enum": {
              "name": "PxSceneQueryUpdateMode",
              "cxx_qt": "PxSceneQueryUpdateMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneSQSystem_getSceneQueryUpdateMode",
      "comment": {
        "summary": {
          "b": [
            "Gets scene query update mode"
          ]
        },
        "additional": {
          "b": [
            "Current scene query update mode."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSceneQueryUpdateMode",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxSceneQueryUpdateMode",
          "cxx_qt": "PxSceneQueryUpdateMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxSceneSQSystem_getSceneQueryStaticTimestamp",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene's internal scene query timestamp, increased each time a change to the",
            "static scene query structure is performed."
          ]
        },
        "additional": {
          "b": [
            "scene query static timestamp"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSceneQueryStaticTimestamp",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneSQSystem_flushQueryUpdates_mut",
      "comment": {
        "summary": {
          "b": [
            "Flushes any changes to the scene query representation."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flushQueryUpdates",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneSQSystem_forceDynamicTreeRebuild_mut",
      "comment": {
        "summary": {
          "b": [
            "Forces dynamic trees to be immediately rebuilt."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "forceDynamicTreeRebuild",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        },
        {
          "name": "rebuildStaticStructure",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "rebuildDynamicStructure",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneSQSystem_getStaticStructure",
      "comment": {
        "summary": {
          "b": [
            "Return the value of PxSceneQueryDesc::staticStructure that was set when creating the scene with PxPhysics::createScene"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticStructure",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxPruningStructureType",
          "cxx_qt": "PxPruningStructureType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxSceneSQSystem_getDynamicStructure",
      "comment": {
        "summary": {
          "b": [
            "Return the value of PxSceneQueryDesc::dynamicStructure that was set when creating the scene with PxPhysics::createScene"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicStructure",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxPruningStructureType",
          "cxx_qt": "PxPruningStructureType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxSceneSQSystem_sceneQueriesUpdate_mut",
      "comment": {
        "summary": {
          "b": [
            "Executes scene queries update tasks."
          ]
        },
        "additional": {
          "b": [
            "This function will refit dirty shapes within the pruner and will execute a task to build a new AABB tree, which is",
            "build on a different thread. The new AABB tree is built based on the dynamic tree rebuild hint rate. Once",
            "the new tree is ready it will be commited in next fetchQueries call, which must be called after.",
            "",
            "This function is equivalent to the following PxSceneQuerySystem calls:",
            "Synchronous calls:",
            "- PxSceneQuerySystemBase::flushUpdates()",
            "- handle0 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_STATIC)",
            "- handle1 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_DYNAMIC)",
            "Asynchronous calls:",
            "- PxSceneQuerySystem::sceneQueryBuildStep(handle0);",
            "- PxSceneQuerySystem::sceneQueryBuildStep(handle1);",
            "",
            "This function is part of the PxSceneSQSystem interface because it uses the PxScene task system under the hood. But",
            "it calls PxSceneQuerySystem functions, which are independent from this system and could be called in a similar",
            "fashion by a separate, possibly user-defined task manager.",
            "",
            "If PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED is used, it is required to update the scene queries",
            "using this function."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sceneQueriesUpdate",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        },
        {
          "name": "completionTask",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        },
        {
          "name": "controlSimulation",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneSQSystem_checkQueries_mut",
      "comment": {
        "summary": {
          "b": [
            "This checks to see if the scene queries update has completed."
          ]
        },
        "additional": {
          "b": [
            "This does not cause the data available for reading to be updated with the results of the scene queries update, it is simply a status check.",
            "The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true",
            "",
            "True if the results are available."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "checkQueries",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneSQSystem_fetchQueries_mut",
      "comment": {
        "summary": {
          "b": [
            "This method must be called after sceneQueriesUpdate. It will wait for the scene queries update to finish. If the user makes an illegal scene queries update call,",
            "the SDK will issue an error message."
          ]
        },
        "additional": {
          "b": [
            "If a new AABB tree build finished, then during fetchQueries the current tree within the pruning structure is swapped with the new tree."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchQueries",
            "class_name": "PxSceneSQSystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneSQSystem"
                }
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQuerySystem_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Decrements the reference count of the object and releases it if the new reference count is zero."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_acquireReference_mut",
      "comment": {
        "summary": {
          "b": [
            "Acquires a counted reference to this object."
          ]
        },
        "additional": {
          "b": [
            "This method increases the reference count of the object by 1. Decrement the reference count by calling release()"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "acquireReference",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_preallocate_mut",
      "comment": {
        "summary": {
          "b": [
            "Preallocates internal arrays to minimize the amount of reallocations."
          ]
        },
        "additional": {
          "b": [
            "The system does not prevent more allocations than given numbers. It is legal to not call this function at all,",
            "or to add more shapes to the system than the preallocated amounts."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "preallocate",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbShapes",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_flushMemory_mut",
      "comment": {
        "summary": {
          "b": [
            "Frees internal memory that may not be in-use anymore."
          ]
        },
        "additional": {
          "b": [
            "This is an entry point for reclaiming transient memory allocated at some point by the SQ system,",
            "but which wasn't been immediately freed for performance reason. Calling this function might free",
            "some memory, but it might also produce a new set of allocations in the next frame."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flushMemory",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_addSQShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a shape to the SQ system."
          ]
        },
        "additional": {
          "b": [
            "The same function is used to add either a regular shape, or a SQ compound shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addSQShape",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "compoundHandle",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "hasPruningStructure",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_removeSQShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a shape from the SQ system."
          ]
        },
        "additional": {
          "b": [
            "The same function is used to remove either a regular shape, or a SQ compound shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeSQShape",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_updateSQShape_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates a shape in the SQ system."
          ]
        },
        "additional": {
          "b": [
            "The same function is used to update either a regular shape, or a SQ compound shape.",
            "",
            "The transforms are eager-evaluated, but the bounds are lazy-evaluated. This means that",
            "the updated transform has to be passed to the update function, while the bounds are automatically",
            "recomputed by the system whenever needed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateSQShape",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_addSQCompound_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a compound to the SQ system."
          ]
        },
        "additional": {
          "b": [
            "SQ compound handle"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addSQCompound",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shapes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxShape"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bvh",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        },
        {
          "name": "transforms",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneQuerySystem_removeSQCompound_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a compound from the SQ system."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeSQCompound",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "compoundHandle",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_updateSQCompound_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates a compound in the SQ system."
          ]
        },
        "additional": {
          "b": [
            "The compound structures are immediately updated when the call occurs."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateSQCompound",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "compoundHandle",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "compoundTransform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_shiftOrigin_mut",
      "comment": {
        "summary": {
          "b": [
            "Shift the data structures' origin by the specified vector."
          ]
        },
        "additional": {
          "b": [
            "Please refer to the notes of the similar function in PxScene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "shiftOrigin",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "shift",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_merge_mut",
      "comment": {
        "summary": {
          "b": [
            "Merges a pruning structure with the SQ system's internal pruners."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "merge",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "pruningStructure",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_getHandle",
      "comment": {
        "summary": {
          "b": [
            "Shape to SQ-pruner-handle mapping function."
          ]
        },
        "additional": {
          "b": [
            "This function finds and returns the SQ pruner handle associated with a given (actor/shape) couple",
            "that was previously added to the system. This is needed for the sync function.",
            "",
            "Associated SQ pruner handle."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHandle",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneQuerySystem_sync_mut",
      "comment": {
        "summary": {
          "b": [
            "Synchronizes the scene-query system with another system that references the same objects."
          ]
        },
        "additional": {
          "b": [
            "This function is used when the scene-query objects also exist in another system that can also update them. For example the scene-query objects",
            "(used for raycast, overlap or sweep queries) might be driven by equivalent objects in an external rigid-body simulation engine. In this case",
            "the rigid-body simulation engine computes the new poses and transforms, and passes them to the scene-query system using this function. It is",
            "more efficient than calling updateSQShape on each object individually, since updateSQShape would end up recomputing the bounds already available",
            "in the rigid-body engine."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sync",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "handles",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "transforms",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransformPadded"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "ignoredIndices",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBitMap"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_finalizeUpdates_mut",
      "comment": {
        "summary": {
          "b": [
            "Finalizes updates made to the SQ system."
          ]
        },
        "additional": {
          "b": [
            "This function should be called after updates have been made to the SQ system, to fully reflect the changes",
            "inside the internal pruners. In particular it should be called:",
            "- after calls to updateSQShape",
            "- after calls to sync",
            "",
            "This function:",
            "- recomputes bounds of manually updated shapes (i.e. either regular or SQ compound shapes modified by updateSQShape)",
            "- updates dynamic pruners (refit operations)",
            "- incrementally rebuilds AABB-trees",
            "",
            "The amount of work performed in this function depends on PxSceneQueryUpdateMode."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "finalizeUpdates",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneQuerySystem_prepareSceneQueryBuildStep_mut",
      "comment": {
        "summary": {
          "b": [
            "Prepares asynchronous build step."
          ]
        },
        "additional": {
          "b": [
            "This is directly called (synchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.",
            "",
            "This function is called to let the system execute any necessary synchronous operation before the",
            "asynchronous sceneQueryBuildStep() function is called.",
            "",
            "If there is any work to do for the specific pruner, the function returns a pruner-specific handle that",
            "will be passed to the corresponding, asynchronous sceneQueryBuildStep function.",
            "",
            "A pruner-specific handle that will be sent to sceneQueryBuildStep if there is any work to do, i.e. to execute the corresponding sceneQueryBuildStep() call.",
            "",
            "Null if there is no work to do, otherwise a pruner-specific handle."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "prepareSceneQueryBuildStep",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxSceneQuerySystem_sceneQueryBuildStep_mut",
      "comment": {
        "summary": {
          "b": [
            "Executes asynchronous build step."
          ]
        },
        "additional": {
          "b": [
            "This is directly called (asynchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.",
            "",
            "This function incrementally builds the internal trees/pruners. It is called asynchronously, i.e. this can be",
            "called from different threads for building multiple trees at the same time."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sceneQueryBuildStep",
            "class_name": "PxSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhaseDesc_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBroadPhaseDesc"
        }
      },
      "params": [
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxBroadPhaseType",
              "cxx_qt": "PxBroadPhaseType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBroadPhaseDesc"
        }
      }
    },
    {
      "name": "PxBroadPhaseDesc_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBroadPhaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxGetBroadPhaseStaticFilterGroup",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the filter group for static objects."
          ]
        },
        "additional": {
          "b": [
            "Mark static objects with this group when adding them to the broadphase.",
            "Overlaps between static objects will not be detected. All static objects",
            "should have the same group.",
            "",
            "Filter group for static objects."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetBroadPhaseStaticFilterGroup",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxGetBroadPhaseDynamicFilterGroup",
      "comment": {
        "summary": {
          "b": [
            "Retrieves a filter group for dynamic objects."
          ]
        },
        "additional": {
          "b": [
            "Mark dynamic objects with this group when adding them to the broadphase.",
            "Each dynamic object must have an ID, and overlaps between dynamic objects that have",
            "the same ID will not be detected. This is useful to dismiss overlaps between shapes",
            "of the same (compound) actor directly within the broadphase.",
            "",
            "Filter group for the object."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetBroadPhaseDynamicFilterGroup",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "id",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxGetBroadPhaseKinematicFilterGroup",
      "comment": {
        "summary": {
          "b": [
            "Retrieves a filter group for kinematic objects."
          ]
        },
        "additional": {
          "b": [
            "Mark kinematic objects with this group when adding them to the broadphase.",
            "Each kinematic object must have an ID, and overlaps between kinematic objects that have",
            "the same ID will not be detected.",
            "",
            "Filter group for the object."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetBroadPhaseKinematicFilterGroup",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "id",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBroadPhaseUpdateData_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBroadPhaseUpdateData"
        }
      },
      "params": [
        {
          "name": "created",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "nbCreated",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "updated",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "nbUpdated",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "removed",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "nbRemoved",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "groups",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "distances",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "capacity",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBroadPhaseUpdateData"
        }
      }
    },
    {
      "name": "PxBroadPhaseResults_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBroadPhaseResults"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBroadPhaseResults"
        }
      }
    },
    {
      "name": "PxBroadPhaseRegions_getNbRegions",
      "comment": {
        "summary": {
          "b": [
            "Returns number of regions currently registered in the broad-phase."
          ]
        },
        "additional": {
          "b": [
            "Number of regions"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbRegions",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBroadPhaseRegions_getRegions",
      "comment": {
        "summary": {
          "b": [
            "Gets broad-phase regions."
          ]
        },
        "additional": {
          "b": [
            "Number of written out regions."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRegions",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegionInfo"
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBroadPhaseRegions_addRegion_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a new broad-phase region."
          ]
        },
        "additional": {
          "b": [
            "The total number of regions is limited to PxBroadPhaseCaps::mMaxNbRegions. If that number is exceeded, the call is ignored.",
            "",
            "The newly added region will be automatically populated with already existing objects that touch it, if the",
            "'populateRegion' parameter is set to true. Otherwise the newly added region will be empty, and it will only be",
            "populated with objects when those objects are added to the simulation, or updated if they already exist.",
            "",
            "Using 'populateRegion=true' has a cost, so it is best to avoid it if possible. In particular it is more efficient",
            "to create the empty regions first (with populateRegion=false) and then add the objects afterwards (rather than",
            "the opposite).",
            "",
            "Objects automatically move from one region to another during their lifetime. The system keeps tracks of what",
            "regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an",
            "object leaves all regions, or is created outside of all regions, several things happen:",
            "- collisions get disabled for this object",
            "- the object appears in the getOutOfBoundsObjects() array",
            "",
            "If an out-of-bounds object, whose collisions are disabled, re-enters a valid broadphase region, then collisions",
            "are re-enabled for that object.",
            "",
            "Handle for newly created region, or 0xffffffff in case of failure."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addRegion",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        },
        {
          "name": "region",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegion"
                }
              }
            }
          }
        },
        {
          "name": "populateRegion",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "distances",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBroadPhaseRegions_removeRegion_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a broad-phase region."
          ]
        },
        "additional": {
          "b": [
            "If the region still contains objects, and if those objects do not overlap any region any more, they are not",
            "automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification",
            "is used for each object. Users are responsible for removing the objects from the simulation if this is the",
            "desired behavior.",
            "",
            "If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeRegion",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBroadPhaseRegions_getNbOutOfBoundsObjects",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbOutOfBoundsObjects",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxBroadPhaseRegions_getOutOfBoundsObjects",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getOutOfBoundsObjects",
            "class_name": "PxBroadPhaseRegions",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegions"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxBroadPhase_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhase_getType",
      "comment": {
        "summary": {
          "b": [
            "Gets the broadphase type."
          ]
        },
        "additional": {
          "b": [
            "Broadphase type."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxBroadPhaseType",
          "cxx_qt": "PxBroadPhaseType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxBroadPhase_getCaps",
      "comment": {
        "summary": {
          "b": [
            "Gets broad-phase caps."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCaps",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        },
        {
          "name": "caps",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCaps"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhase_getRegions_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the regions API if applicable."
          ]
        },
        "additional": {
          "b": [
            "For broadphases that do not use explicit user-defined regions, this call returns NULL.",
            "",
            "Region API, or NULL."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRegions",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBroadPhaseRegions"
            }
          }
        }
      }
    },
    {
      "name": "PxBroadPhase_getAllocator_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the broadphase allocator."
          ]
        },
        "additional": {
          "b": [
            "User-provided buffers should ideally be allocated with this allocator, for best performance.",
            "This is especially true for the GPU broadphases, whose buffers need to be allocated in CUDA",
            "host memory.",
            "",
            "The broadphase allocator."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAllocator",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAllocatorCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxBroadPhase_getContextID",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the profiler's context ID."
          ]
        },
        "additional": {
          "b": [
            "The context ID."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContextID",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxBroadPhase_setScratchBlock_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a scratch buffer"
          ]
        },
        "additional": {
          "b": [
            "Some broadphases might take advantage of a scratch buffer to limit runtime allocations.",
            "",
            "All broadphases still work without providing a scratch buffer, this is an optional function",
            "that can potentially reduce runtime allocations."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setScratchBlock",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        },
        {
          "name": "scratchBlock",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhase_update_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates the broadphase and computes the lists of created/deleted pairs."
          ]
        },
        "additional": {
          "b": [
            "The provided update data describes changes to objects since the last broadphase update.",
            "",
            "To benefit from potentially multithreaded implementations, it is necessary to provide a continuation",
            "task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will",
            "then run single-threaded."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "update",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        },
        {
          "name": "updateData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseUpdateData"
                }
              }
            }
          }
        },
        {
          "name": "continuation",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhase_fetchResults_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the broadphase results after an update."
          ]
        },
        "additional": {
          "b": [
            "This should be called once after each update call to retrieve the results of the broadphase. The",
            "results are incremental, i.e. the system only returns new and lost pairs, not all current pairs."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResults",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseResults"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhase_update_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Helper for single-threaded updates."
          ]
        },
        "additional": {
          "b": [
            "This short helper function performs a single-theaded update and reports the results in a single call."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "update",
            "class_name": "PxBroadPhase",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseResults"
                }
              }
            }
          }
        },
        {
          "name": "updateData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseUpdateData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateBroadPhase",
      "comment": {
        "summary": {
          "b": [
            "Broadphase factory function."
          ]
        },
        "additional": {
          "b": [
            "Use this function to create a new standalone broadphase.",
            "",
            "Newly created broadphase, or NULL"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateBroadPhase",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBroadPhase"
            }
          }
        }
      }
    },
    {
      "name": "PxAABBManager_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_getBroadPhase_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the underlying broadphase."
          ]
        },
        "additional": {
          "b": [
            "The managed broadphase."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBroadPhase",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxBroadPhase"
            }
          }
        }
      }
    },
    {
      "name": "PxAABBManager_getBounds",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the managed bounds."
          ]
        },
        "additional": {
          "b": [
            "This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.",
            "",
            "The managed object bounds."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBounds",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBounds3"
            }
          }
        }
      }
    },
    {
      "name": "PxAABBManager_getDistances",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the managed distances."
          ]
        },
        "additional": {
          "b": [
            "This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.",
            "",
            "The managed object distances."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDistances",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Float"
          }
        }
      }
    },
    {
      "name": "PxAABBManager_getGroups",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the managed filter groups."
          ]
        },
        "additional": {
          "b": [
            "The managed object groups."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGroups",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxAABBManager_getCapacity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the managed buffers' capacity."
          ]
        },
        "additional": {
          "b": [
            "Bounds, distances and groups buffers have the same capacity.",
            "",
            "The managed buffers' capacity."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCapacity",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxAABBManager_addObject_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an object to the manager."
          ]
        },
        "additional": {
          "b": [
            "Objects' indices are externally managed, i.e. they must be provided by users (as opposed to handles",
            "that could be returned by this manager). The design allows users to identify an object by a single ID,",
            "and use the same ID in multiple sub-systems."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addObject",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "group",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_removeObject_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an object from the manager."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeObject",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_updateObject_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates an object in the manager."
          ]
        },
        "additional": {
          "b": [
            "This call can update an object's bounds, distance, or both.",
            "It is not possible to update an object's filter group."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateObject",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "bounds",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_update_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates the broadphase and computes the lists of created/deleted pairs."
          ]
        },
        "additional": {
          "b": [
            "The data necessary for updating the broadphase is internally computed by the AABB manager.",
            "",
            "To benefit from potentially multithreaded implementations, it is necessary to provide a continuation",
            "task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will",
            "then run single-threaded."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "update",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "continuation",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_fetchResults_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the broadphase results after an update."
          ]
        },
        "additional": {
          "b": [
            "This should be called once after each update call to retrieve the results of the broadphase. The",
            "results are incremental, i.e. the system only returns new and lost pairs, not all current pairs."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResults",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseResults"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxAABBManager_update_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Helper for single-threaded updates."
          ]
        },
        "additional": {
          "b": [
            "This short helper function performs a single-theaded update and reports the results in a single call."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "update",
            "class_name": "PxAABBManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxAABBManager"
                }
              }
            }
          }
        },
        {
          "name": "results",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseResults"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateAABBManager",
      "comment": {
        "summary": {
          "b": [
            "AABB manager factory function."
          ]
        },
        "additional": {
          "b": [
            "Use this function to create a new standalone high-level broadphase.",
            "",
            "Newly created AABB manager, or NULL"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateAABBManager",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "broadphase",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxAABBManager"
            }
          }
        }
      }
    },
    {
      "name": "PxSceneLimits_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSceneLimits"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSceneLimits"
        }
      }
    },
    {
      "name": "PxSceneLimits_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxSceneLimits",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneLimits"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneLimits_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSceneLimits",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneLimits"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxgDynamicsMemoryConfig_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxgDynamicsMemoryConfig"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxgDynamicsMemoryConfig"
        }
      }
    },
    {
      "name": "PxgDynamicsMemoryConfig_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxgDynamicsMemoryConfig",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxgDynamicsMemoryConfig"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneDesc_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSceneDesc"
        }
      },
      "params": [
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSceneDesc"
        }
      }
    },
    {
      "name": "PxSceneDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxSceneDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneDesc"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSceneDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneDesc_getTolerancesScale",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTolerancesScale",
            "class_name": "PxSceneDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxTolerancesScale"
            }
          }
        }
      }
    },
    {
      "name": "PxSimulationStatistics_getNbBroadPhaseAdds",
      "comment": {
        "summary": {
          "b": [
            "Get number of broadphase volumes added for the current simulation step."
          ]
        },
        "additional": {
          "b": [
            "Number of broadphase volumes added."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbBroadPhaseAdds",
            "class_name": "PxSimulationStatistics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationStatistics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSimulationStatistics_getNbBroadPhaseRemoves",
      "comment": {
        "summary": {
          "b": [
            "Get number of broadphase volumes removed for the current simulation step."
          ]
        },
        "additional": {
          "b": [
            "Number of broadphase volumes removed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbBroadPhaseRemoves",
            "class_name": "PxSimulationStatistics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationStatistics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSimulationStatistics_getRbPairStats",
      "comment": {
        "summary": {
          "b": [
            "Get number of shape collision pairs of a certain type processed for the current simulation step."
          ]
        },
        "additional": {
          "b": [
            "There is an entry for each geometry pair type.",
            "",
            "entry[i][j] = entry[j][i], hence, if you want the sum of all pair",
            "types, you need to discard the symmetric entries",
            "",
            "Number of processed pairs of the specified geometry types."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRbPairStats",
            "class_name": "PxSimulationStatistics",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationStatistics"
                }
              }
            }
          }
        },
        {
          "name": "pairType",
          "kind": {
            "Enum": {
              "name": "RbPairStatsType",
              "cxx_qt": "PxSimulationStatistics::RbPairStatsType",
              "repr": "Int"
            }
          }
        },
        {
          "name": "g0",
          "kind": {
            "Enum": {
              "name": "PxGeometryType",
              "cxx_qt": "PxGeometryType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "g1",
          "kind": {
            "Enum": {
              "name": "PxGeometryType",
              "cxx_qt": "PxGeometryType::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSimulationStatistics_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxSimulationStatistics"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSimulationStatistics"
        }
      }
    },
    {
      "name": "PxPvdSceneClient_setScenePvdFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the PVD flag. See PxPvdSceneFlag."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setScenePvdFlag",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxPvdSceneFlag",
              "cxx_qt": "PxPvdSceneFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_setScenePvdFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the PVD flags. See PxPvdSceneFlags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setScenePvdFlags",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxPvdSceneFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_getScenePvdFlags",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PVD flags. See PxPvdSceneFlags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScenePvdFlags",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxPvdSceneFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxPvdSceneClient_updateCamera_mut",
      "comment": {
        "summary": {
          "b": [
            "update camera on PVD application's render window"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateCamera",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "up",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "target",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_drawPoints_mut",
      "comment": {
        "summary": {
          "b": [
            "draw points on PVD application's render window"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "drawPoints",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "points",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDebugPoint"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_drawLines_mut",
      "comment": {
        "summary": {
          "b": [
            "draw lines on PVD application's render window"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "drawLines",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "lines",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDebugLine"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_drawTriangles_mut",
      "comment": {
        "summary": {
          "b": [
            "draw triangles on PVD application's render window"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "drawTriangles",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "triangles",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDebugTriangle"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdSceneClient_drawText_mut",
      "comment": {
        "summary": {
          "b": [
            "draw text on PVD application's render window"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "drawText",
            "class_name": "PxPvdSceneClient",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdSceneClient"
                }
              }
            }
          }
        },
        {
          "name": "text",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxDebugText"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDominanceGroupPair_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDominanceGroupPair"
        }
      },
      "params": [
        {
          "name": "a",
          "kind": {
            "Builtin": "UChar"
          }
        },
        {
          "name": "b",
          "kind": {
            "Builtin": "UChar"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDominanceGroupPair"
        }
      }
    },
    {
      "name": "PxBroadPhaseCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxBroadPhaseCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhaseCallback_onObjectOutOfBounds_mut",
      "comment": {
        "summary": {
          "b": [
            "Out-of-bounds notification."
          ]
        },
        "additional": {
          "b": [
            "This function is called when an object leaves the broad-phase."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onObjectOutOfBounds",
            "class_name": "PxBroadPhaseCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCallback"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBroadPhaseCallback_onObjectOutOfBounds_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Out-of-bounds notification."
          ]
        },
        "additional": {
          "b": [
            "This function is called when an aggregate leaves the broad-phase."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onObjectOutOfBounds",
            "class_name": "PxBroadPhaseCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCallback"
                }
              }
            }
          }
        },
        {
          "name": "aggregate",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the scene."
          ]
        },
        "additional": {
          "b": [
            "Removes any actors and constraint shaders from this scene",
            "(if the user hasn't already done so).",
            "",
            "Be sure to not keep a reference to this object after calling release.",
            "Avoid release calls while the scene is simulating (in between simulate() and fetchResults() calls)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_setFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a scene flag. You can only set one flag at a time."
          ]
        },
        "additional": {
          "b": [
            "Not all flags are mutable and changing some will result in an error. Please check #PxSceneFlag to see which flags can be changed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFlag",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxSceneFlag",
              "cxx_qt": "PxSceneFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getFlags",
      "comment": {
        "summary": {
          "b": [
            "Get the scene flags."
          ]
        },
        "additional": {
          "b": [
            "The scene flags. See #PxSceneFlag"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFlags",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxSceneFlags",
          "repr": "UInt"
        }
      }
    },
    {
      "name": "PxScene_setLimits_mut",
      "comment": {
        "summary": {
          "b": [
            "Set new scene limits."
          ]
        },
        "additional": {
          "b": [
            "Increase the maximum capacity of various data structures in the scene. The new capacities will be",
            "at least as large as required to deal with the objects currently in the scene. Further, these values",
            "are for preallocation and do not represent hard limits."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimits",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "limits",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSceneLimits"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getLimits",
      "comment": {
        "summary": {
          "b": [
            "Get current scene limits."
          ]
        },
        "additional": {
          "b": [
            "Current scene limits."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimits",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSceneLimits"
        }
      }
    },
    {
      "name": "PxScene_getPhysics_mut",
      "comment": {
        "summary": {
          "b": [
            "Call this method to retrieve the Physics SDK."
          ]
        },
        "additional": {
          "b": [
            "The physics SDK this scene is associated with."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPhysics",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxPhysics"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_getTimestamp",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene's internal timestamp, increased each time a simulation step is completed."
          ]
        },
        "additional": {
          "b": [
            "scene timestamp"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTimestamp",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_addArticulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an articulation to this scene."
          ]
        },
        "additional": {
          "b": [
            "If the articulation is already assigned to a scene (see #PxArticulationReducedCoordinate::getScene), the call is ignored and an error is issued.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addArticulation",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "articulation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_removeArticulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an articulation from this scene."
          ]
        },
        "additional": {
          "b": [
            "If the articulation is not part of this scene (see #PxArticulationReducedCoordinate::getScene), the call is ignored and an error is issued.",
            "",
            "If the articulation is in an aggregate it will be removed from the aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeArticulation",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "articulation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxArticulationReducedCoordinate"
                }
              }
            }
          }
        },
        {
          "name": "wakeOnLostTouch",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_addActor_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an actor to this scene."
          ]
        },
        "additional": {
          "b": [
            "If the actor is already assigned to a scene (see #PxActor::getScene), the call is ignored and an error is issued.",
            "",
            "If the actor has an invalid constraint, in checked builds the call is ignored and an error is issued.",
            "",
            "You can not add individual articulation links (see #PxArticulationLink) to the scene. Use #addArticulation() instead.",
            "",
            "If the actor is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if",
            "it connects to another actor that is part of the scene already.",
            "",
            "When a BVH is provided the actor shapes are grouped together.",
            "The scene query pruning structure inside PhysX SDK will store/update one",
            "bound per actor. The scene queries against such an actor will query actor",
            "bounds and then make a local space query against the provided BVH, which is in actor's local space.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addActor",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "bvh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_addActors_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic."
          ]
        },
        "additional": {
          "b": [
            "This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead.",
            "For articulation links, use addArticulation().",
            "",
            "If one of the actors is already assigned to a scene (see #PxActor::getScene), the call is ignored and an error is issued.",
            "",
            "If an actor in the array contains an invalid constraint, in checked builds the call is ignored and an error is issued.",
            "",
            "If an actor in the array is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if",
            "it connects to another actor that is part of the scene already.",
            "",
            "this method is optimized for high performance.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actors",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbActors",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_addActors_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Adds a pruning structure together with its actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic."
          ]
        },
        "additional": {
          "b": [
            "This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead.",
            "For articulation links, use addArticulation().",
            "",
            "If an actor in the pruning structure contains an invalid constraint, in checked builds the call is ignored and an error is issued.",
            "",
            "For all actors in the pruning structure each assigned PxConstraint object will get added to the scene automatically if",
            "it connects to another actor that is part of the scene already.",
            "",
            "This method is optimized for high performance.",
            "",
            "Merging a PxPruningStructure into an active scene query optimization AABB tree might unbalance the tree. A typical use case for",
            "PxPruningStructure is a large world scenario where blocks of closely positioned actors get streamed in. The merge process finds the",
            "best node in the active scene query optimization AABB tree and inserts the PxPruningStructure. Therefore using PxPruningStructure",
            "for actors scattered throughout the world will result in an unbalanced tree.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "pruningStructure",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_removeActor_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an actor from this scene."
          ]
        },
        "additional": {
          "b": [
            "If the actor is not part of this scene (see #PxActor::getScene), the call is ignored and an error is issued.",
            "",
            "You can not remove individual articulation links (see #PxArticulationLink) from the scene. Use #removeArticulation() instead.",
            "",
            "If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.",
            "",
            "If the actor is in an aggregate it will be removed from the aggregate."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeActor",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "wakeOnLostTouch",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_removeActors_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes actors from this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic."
          ]
        },
        "additional": {
          "b": [
            "This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use removeActor() instead.",
            "For articulation links, use removeArticulation().",
            "",
            "If some actor is not part of this scene (see #PxActor::getScene), the actor remove is ignored and an error is issued.",
            "",
            "You can not remove individual articulation links (see #PxArticulationLink) from the scene. Use #removeArticulation() instead.",
            "",
            "If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actors",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbActors",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "wakeOnLostTouch",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_addAggregate_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an aggregate to this scene."
          ]
        },
        "additional": {
          "b": [
            "If the aggregate is already assigned to a scene (see #PxAggregate::getScene), the call is ignored and an error is issued.",
            "",
            "If the aggregate contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.",
            "",
            "If the aggregate already contains actors, those actors are added to the scene as well.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addAggregate",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "aggregate",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_removeAggregate_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an aggregate from this scene."
          ]
        },
        "additional": {
          "b": [
            "If the aggregate is not part of this scene (see #PxAggregate::getScene), the call is ignored and an error is issued.",
            "",
            "If the aggregate contains actors, those actors are removed from the scene as well."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeAggregate",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "aggregate",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAggregate"
                }
              }
            }
          }
        },
        {
          "name": "wakeOnLostTouch",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_addCollection_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds objects in the collection to this scene."
          ]
        },
        "additional": {
          "b": [
            "This function adds the following types of objects to this scene: PxRigidActor (except PxArticulationLink), PxAggregate, PxArticulationReducedCoordinate.",
            "This method is typically used after deserializing the collection in order to populate the scene with deserialized objects.",
            "",
            "If the collection contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addCollection",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_getNbActors",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the number of actors of certain types in the scene. For supported types, see PxActorTypeFlags."
          ]
        },
        "additional": {
          "b": [
            "the number of actors."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "types",
          "kind": {
            "Flags": {
              "name": "PxActorTypeFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getActors",
      "comment": {
        "summary": {
          "b": [
            "Retrieve an array of all the actors of certain types in the scene. For supported types, see PxActorTypeFlags."
          ]
        },
        "additional": {
          "b": [
            "Number of actors written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "types",
          "kind": {
            "Flags": {
              "name": "PxActorTypeFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getActiveActors_mut",
      "comment": {
        "summary": {
          "b": [
            "Queries the PxScene for a list of the PxActors whose transforms have been",
            "updated during the previous simulation step. Only includes actors of type PxRigidDynamic and PxArticulationLink."
          ]
        },
        "additional": {
          "b": [
            "PxSceneFlag::eENABLE_ACTIVE_ACTORS must be set.",
            "",
            "Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored and NULL will be returned.",
            "",
            "A pointer to the list of active PxActors generated during the last call to fetchResults()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActiveActors",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "nbActorsOut",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "PxScene_getNbArticulations",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of articulations in the scene."
          ]
        },
        "additional": {
          "b": [
            "the number of articulations in this scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbArticulations",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getArticulations",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the articulations in the scene."
          ]
        },
        "additional": {
          "b": [
            "Number of articulations written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getArticulations",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxArticulationReducedCoordinate"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getNbConstraints",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of constraint shaders in the scene."
          ]
        },
        "additional": {
          "b": [
            "the number of constraint shaders in this scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbConstraints",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getConstraints",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the constraint shaders in the scene."
          ]
        },
        "additional": {
          "b": [
            "Number of constraint shaders written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConstraints",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxConstraint"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getNbAggregates",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of aggregates in the scene."
          ]
        },
        "additional": {
          "b": [
            "the number of aggregates in this scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbAggregates",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getAggregates",
      "comment": {
        "summary": {
          "b": [
            "Retrieve all the aggregates in the scene."
          ]
        },
        "additional": {
          "b": [
            "Number of aggregates written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAggregates",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxAggregate"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_setDominanceGroupPair_mut",
      "comment": {
        "summary": {
          "b": [
            "Specifies the dominance behavior of contacts between two actors with two certain dominance groups."
          ]
        },
        "additional": {
          "b": [
            "It is possible to assign each actor to a dominance groups using #PxActor::setDominanceGroup().",
            "",
            "With dominance groups one can have all contacts created between actors act in one direction only. This is useful, for example, if you",
            "want an object to push debris out of its way and be unaffected,while still responding physically to forces and collisions",
            "with non-debris objects.",
            "",
            "Whenever a contact between two actors (a0, a1) needs to be solved, the groups (g0, g1) of both",
            "actors are retrieved. Then the PxDominanceGroupPair setting for this group pair is retrieved with getDominanceGroupPair(g0, g1).",
            "",
            "In the contact, PxDominanceGroupPair::dominance0 becomes the dominance setting for a0, and",
            "PxDominanceGroupPair::dominance1 becomes the dominance setting for a1. A dominanceN setting of 1.0f, the default,",
            "will permit aN to be pushed or pulled by a(1-N) through the contact. A dominanceN setting of 0.0f, will however",
            "prevent aN to be pushed by a(1-N) via the contact. Thus, a PxDominanceGroupPair of (1.0f, 0.0f) makes",
            "the interaction one-way.",
            "",
            "The matrix sampled by getDominanceGroupPair(g1, g2) is initialised by default such that:",
            "",
            "if g1 == g2, then (1.0f, 1.0f) is returned",
            "if g1",
            "<",
            "g2, then (0.0f, 1.0f) is returned",
            "if g1 >  g2, then (1.0f, 0.0f) is returned",
            "",
            "In other words, we permit actors in higher groups to be pushed around by actors in lower groups by default.",
            "",
            "These settings should cover most applications, and in fact not overriding these settings may likely result in higher performance.",
            "",
            "It is not possible to make the matrix asymetric, or to change the diagonal. In other words:",
            "",
            "it is not possible to change (g1, g2) if (g1==g2)",
            "if you set",
            "",
            "(g1, g2) to X, then (g2, g1) will implicitly and automatically be set to ~X, where:",
            "",
            "~(1.0f, 1.0f) is (1.0f, 1.0f)",
            "~(0.0f, 1.0f) is (1.0f, 0.0f)",
            "~(1.0f, 0.0f) is (0.0f, 1.0f)",
            "",
            "These two restrictions are to make sure that contacts between two actors will always evaluate to the same dominance",
            "setting, regardless of the order of the actors.",
            "",
            "Dominance settings are currently specified as floats 0.0f or 1.0f because in the future we may permit arbitrary",
            "fractional settings to express 'partly-one-way' interactions.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake actors up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDominanceGroupPair",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "group1",
          "kind": {
            "Builtin": "UChar"
          }
        },
        {
          "name": "group2",
          "kind": {
            "Builtin": "UChar"
          }
        },
        {
          "name": "dominance",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxDominanceGroupPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getDominanceGroupPair",
      "comment": {
        "summary": {
          "b": [
            "Samples the dominance matrix."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDominanceGroupPair",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "group1",
          "kind": {
            "Builtin": "UChar"
          }
        },
        {
          "name": "group2",
          "kind": {
            "Builtin": "UChar"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxDominanceGroupPair"
        }
      }
    },
    {
      "name": "PxScene_getCpuDispatcher",
      "comment": {
        "summary": {
          "b": [
            "Return the cpu dispatcher that was set in PxSceneDesc::cpuDispatcher when creating the scene with PxPhysics::createScene"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCpuDispatcher",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCpuDispatcher"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_createClient_mut",
      "comment": {
        "summary": {
          "b": [
            "Reserves a new client ID."
          ]
        },
        "additional": {
          "b": [
            "PX_DEFAULT_CLIENT is always available as the default clientID.",
            "Additional clients are returned by this function. Clients cannot be released once created.",
            "An error is reported when more than a supported number of clients (currently 128) are created."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createClient",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UChar"
      }
    },
    {
      "name": "PxScene_setSimulationEventCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a user notify object which receives special simulation events when they occur."
          ]
        },
        "additional": {
          "b": [
            "Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSimulationEventCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getSimulationEventCallback",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the simulationEventCallback pointer set with setSimulationEventCallback()."
          ]
        },
        "additional": {
          "b": [
            "The current user notify pointer. See #PxSimulationEventCallback."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSimulationEventCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSimulationEventCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_setContactModifyCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a user callback object, which receives callbacks on all contacts generated for specified actors."
          ]
        },
        "additional": {
          "b": [
            "Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactModifyCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactModifyCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_setCCDContactModifyCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a user callback object, which receives callbacks on all CCD contacts generated for specified actors."
          ]
        },
        "additional": {
          "b": [
            "Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCCDContactModifyCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCCDContactModifyCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getContactModifyCallback",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PxContactModifyCallback pointer set with setContactModifyCallback()."
          ]
        },
        "additional": {
          "b": [
            "The current user contact modify callback pointer. See #PxContactModifyCallback."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactModifyCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxContactModifyCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_getCCDContactModifyCallback",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PxCCDContactModifyCallback pointer set with setContactModifyCallback()."
          ]
        },
        "additional": {
          "b": [
            "The current user contact modify callback pointer. See #PxContactModifyCallback."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCCDContactModifyCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCCDContactModifyCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_setBroadPhaseCallback_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a broad-phase user callback object."
          ]
        },
        "additional": {
          "b": [
            "Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBroadPhaseCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "callback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getBroadPhaseCallback",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PxBroadPhaseCallback pointer set with setBroadPhaseCallback()."
          ]
        },
        "additional": {
          "b": [
            "The current broad-phase callback pointer. See #PxBroadPhaseCallback."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBroadPhaseCallback",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBroadPhaseCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_setFilterShaderData_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the shared global filter data which will get passed into the filter shader."
          ]
        },
        "additional": {
          "b": [
            "It is the user's responsibility to ensure that changing the shared global filter data does not change the filter output value for existing pairs.",
            "If the filter output for existing pairs does change nonetheless then such a change will not take effect until the pair gets refiltered.",
            "resetFiltering() can be used to explicitly refilter the pairs of specific objects.",
            "",
            "The provided data will get copied to internal buffers and this copy will be used for filtering calls.",
            "",
            "Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFilterShaderData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "dataSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getFilterShaderData",
      "comment": {
        "summary": {
          "b": [
            "Gets the shared global filter data in use for this scene."
          ]
        },
        "additional": {
          "b": [
            "The reference points to a copy of the original filter data specified in #PxSceneDesc.filterShaderData or provided by #setFilterShaderData().",
            "",
            "Shared filter data for filter shader."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFilterShaderData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxScene_getFilterShaderDataSize",
      "comment": {
        "summary": {
          "b": [
            "Gets the size of the shared global filter data (#PxSceneDesc.filterShaderData)"
          ]
        },
        "additional": {
          "b": [
            "Size of shared filter data [bytes]."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFilterShaderDataSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_resetFiltering_mut",
      "comment": {
        "summary": {
          "b": [
            "Marks the object to reset interactions and re-run collision filters in the next simulation step."
          ]
        },
        "additional": {
          "b": [
            "This call forces the object to remove all existing collision interactions, to search anew for existing contact",
            "pairs and to run the collision filters again for found collision pairs.",
            "",
            "The operation is supported for PxRigidActor objects only.",
            "",
            "All persistent state of existing interactions will be lost and can not be retrieved even if the same collison pair",
            "is found again in the next step. This will mean, for example, that you will not get notified about persistent contact",
            "for such an interaction (see #PxPairFlag::eNOTIFY_TOUCH_PERSISTS), the contact pair will be interpreted as newly found instead.",
            "",
            "Lost touch contact reports will be sent for every collision pair which includes this shape, if they have",
            "been requested through #PxPairFlag::eNOTIFY_TOUCH_LOST or #PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST.",
            "",
            "This is an expensive operation, don't use it if you don't have to.",
            "",
            "Can be used to retrieve collision pairs that were killed by the collision filters (see #PxFilterFlag::eKILL)",
            "",
            "It is invalid to use this method if the actor has not been added to a scene already.",
            "",
            "It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.",
            "",
            "Do not use this method while the simulation is running.",
            "",
            "Sleeping:",
            "Does wake up the actor.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "resetFiltering",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_resetFiltering_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Marks the object to reset interactions and re-run collision filters for specified shapes in the next simulation step."
          ]
        },
        "additional": {
          "b": [
            "This is a specialization of the resetFiltering(PxActor",
            "&",
            "actor) method and allows to reset interactions for specific shapes of",
            "a PxRigidActor.",
            "",
            "Do not use this method while the simulation is running.",
            "",
            "Sleeping:",
            "Does wake up the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "resetFiltering",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shapes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxShape"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "shapeCount",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_getKinematicKinematicFilteringMode",
      "comment": {
        "summary": {
          "b": [
            "Gets the pair filtering mode for kinematic-kinematic pairs."
          ]
        },
        "additional": {
          "b": [
            "Filtering mode for kinematic-kinematic pairs."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getKinematicKinematicFilteringMode",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxPairFilteringMode",
          "cxx_qt": "PxPairFilteringMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxScene_getStaticKinematicFilteringMode",
      "comment": {
        "summary": {
          "b": [
            "Gets the pair filtering mode for static-kinematic pairs."
          ]
        },
        "additional": {
          "b": [
            "Filtering mode for static-kinematic pairs."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticKinematicFilteringMode",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxPairFilteringMode",
          "cxx_qt": "PxPairFilteringMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxScene_simulate_mut",
      "comment": {
        "summary": {
          "b": [
            "Advances the simulation by an elapsedTime time."
          ]
        },
        "additional": {
          "b": [
            "Large elapsedTime values can lead to instabilities. In such cases elapsedTime",
            "should be subdivided into smaller time intervals and simulate() should be called",
            "multiple times for each interval.",
            "",
            "Calls to simulate() should pair with calls to fetchResults():",
            "Each fetchResults() invocation corresponds to exactly one simulate()",
            "invocation; calling simulate() twice without an intervening fetchResults()",
            "or fetchResults() twice without an intervening simulate() causes an error",
            "condition.",
            "",
            "scene->simulate();",
            "...do some processing until physics is computed...",
            "scene->fetchResults();",
            "...now results of run may be retrieved.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "simulate",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "elapsedTime",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "completionTask",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        },
        {
          "name": "scratchMemBlock",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "scratchMemBlockSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "controlSimulation",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_advance_mut",
      "comment": {
        "summary": {
          "b": [
            "Performs dynamics phase of the simulation pipeline."
          ]
        },
        "additional": {
          "b": [
            "Calls to advance() should follow calls to fetchCollision(). An error message will be issued if this sequence is not followed.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "advance",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "completionTask",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_collide_mut",
      "comment": {
        "summary": {
          "b": [
            "Performs collision detection for the scene over elapsedTime"
          ]
        },
        "additional": {
          "b": [
            "Calls to collide() should be the first method called to simulate a frame.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "collide",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "elapsedTime",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "completionTask",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        },
        {
          "name": "scratchMemBlock",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "scratchMemBlockSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "controlSimulation",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_checkResults_mut",
      "comment": {
        "summary": {
          "b": [
            "This checks to see if the simulation run has completed."
          ]
        },
        "additional": {
          "b": [
            "This does not cause the data available for reading to be updated with the results of the simulation, it is simply a status check.",
            "The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true",
            "",
            "True if the results are available."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "checkResults",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_fetchCollision_mut",
      "comment": {
        "summary": {
          "b": [
            "This method must be called after collide() and before advance(). It will wait for the collision phase to finish. If the user makes an illegal simulation call, the SDK will issue an error",
            "message."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchCollision",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_fetchResults_mut",
      "comment": {
        "summary": {
          "b": [
            "This is the big brother to checkResults() it basically does the following:"
          ]
        },
        "additional": {
          "b": [
            "True if the results have been fetched."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResults",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "errorState",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_fetchResultsStart_mut",
      "comment": {
        "summary": {
          "b": [
            "This call performs the first section of fetchResults, and returns a pointer to the contact streams output by the simulation. It can be used to process contact pairs in parallel, which is often a limiting factor",
            "for fetchResults() performance."
          ]
        },
        "additional": {
          "b": [
            "After calling this function and processing the contact streams, call fetchResultsFinish(). Note that writes to the simulation are not",
            "permitted between the start of fetchResultsStart() and the end of fetchResultsFinish().",
            "",
            "True if the results have been fetched."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResultsStart",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "contactPairs",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxContactPairHeader"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbContactPairs",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "block",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_processCallbacks_mut",
      "comment": {
        "summary": {
          "b": [
            "This call processes all event callbacks in parallel. It takes a continuation task, which will be executed once all callbacks have been processed."
          ]
        },
        "additional": {
          "b": [
            "This is a utility function to make it easier to process callbacks in parallel using the PhysX task system. It can only be used in conjunction with",
            "fetchResultsStart(...) and fetchResultsFinish(...)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "processCallbacks",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "continuation",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBaseTask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_fetchResultsFinish_mut",
      "comment": {
        "summary": {
          "b": [
            "This call performs the second section of fetchResults."
          ]
        },
        "additional": {
          "b": [
            "It must be called after fetchResultsStart() returns and contact reports have been processed.",
            "",
            "Note that once fetchResultsFinish() has been called, the contact streams returned in fetchResultsStart() will be invalid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResultsFinish",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "errorState",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_fetchResultsParticleSystem_mut",
      "comment": {
        "summary": {
          "b": [
            "This call performs the synchronization of particle system data copies."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fetchResultsParticleSystem",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_flushSimulation_mut",
      "comment": {
        "summary": {
          "b": [
            "Clear internal buffers and free memory."
          ]
        },
        "additional": {
          "b": [
            "This method can be used to clear buffers and free internal memory without having to destroy the scene. Can be useful if",
            "the physics data gets streamed in and a checkpoint with a clean state should be created.",
            "",
            "It is not allowed to call this method while the simulation is running. The call will fail."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flushSimulation",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "sendPendingReports",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_setGravity_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a constant gravity for the entire scene."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setGravity",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "vec",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getGravity",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the current gravity setting."
          ]
        },
        "additional": {
          "b": [
            "The current gravity for the scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGravity",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxScene_setBounceThresholdVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the bounce threshold velocity.  Collision speeds below this threshold will not cause a bounce."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBounceThresholdVelocity",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getBounceThresholdVelocity",
      "comment": {
        "summary": {
          "b": [
            "Return the bounce threshold velocity."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBounceThresholdVelocity",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setCCDMaxPasses_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the maximum number of CCD passes"
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCCDMaxPasses",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "ccdMaxPasses",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getCCDMaxPasses",
      "comment": {
        "summary": {
          "b": [
            "Gets the maximum number of CCD passes."
          ]
        },
        "additional": {
          "b": [
            "The maximum number of CCD passes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCCDMaxPasses",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_setCCDMaxSeparation_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the maximum CCD separation."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCCDMaxSeparation",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getCCDMaxSeparation",
      "comment": {
        "summary": {
          "b": [
            "Gets the maximum CCD separation."
          ]
        },
        "additional": {
          "b": [
            "The maximum CCD separation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCCDMaxSeparation",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setCCDThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the CCD threshold."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setCCDThreshold",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getCCDThreshold",
      "comment": {
        "summary": {
          "b": [
            "Gets the CCD threshold."
          ]
        },
        "additional": {
          "b": [
            "The CCD threshold."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getCCDThreshold",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setMaxBiasCoefficient_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the max bias coefficient."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxBiasCoefficient",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getMaxBiasCoefficient",
      "comment": {
        "summary": {
          "b": [
            "Gets the max bias coefficient."
          ]
        },
        "additional": {
          "b": [
            "The max bias coefficient."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxBiasCoefficient",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setFrictionOffsetThreshold_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the friction offset threshold."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFrictionOffsetThreshold",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getFrictionOffsetThreshold",
      "comment": {
        "summary": {
          "b": [
            "Gets the friction offset threshold."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFrictionOffsetThreshold",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setFrictionCorrelationDistance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the friction correlation distance."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFrictionCorrelationDistance",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getFrictionCorrelationDistance",
      "comment": {
        "summary": {
          "b": [
            "Gets the friction correlation distance."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFrictionCorrelationDistance",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_getFrictionType",
      "comment": {
        "summary": {
          "b": [
            "Return the friction model."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFrictionType",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxFrictionType",
          "cxx_qt": "PxFrictionType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxScene_getSolverType",
      "comment": {
        "summary": {
          "b": [
            "Return the solver model."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSolverType",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxSolverType",
          "cxx_qt": "PxSolverType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxScene_setVisualizationParameter_mut",
      "comment": {
        "summary": {
          "b": [
            "Function that lets you set debug visualization parameters."
          ]
        },
        "additional": {
          "b": [
            "Returns false if the value passed is out of range for usage specified by the enum.",
            "",
            "Do not use this method while the simulation is running.",
            "",
            "False if the parameter is out of range."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setVisualizationParameter",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "param",
          "kind": {
            "Enum": {
              "name": "PxVisualizationParameter",
              "cxx_qt": "PxVisualizationParameter::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_getVisualizationParameter",
      "comment": {
        "summary": {
          "b": [
            "Function that lets you query debug visualization parameters."
          ]
        },
        "additional": {
          "b": [
            "The value of the parameter."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVisualizationParameter",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "paramEnum",
          "kind": {
            "Enum": {
              "name": "PxVisualizationParameter",
              "cxx_qt": "PxVisualizationParameter::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_setVisualizationCullingBox_mut",
      "comment": {
        "summary": {
          "b": [
            "Defines a box in world space to which visualization geometry will be (conservatively) culled. Use a non-empty culling box to enable the feature, and an empty culling box to disable it."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setVisualizationCullingBox",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "box",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getVisualizationCullingBox",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the visualization culling box."
          ]
        },
        "additional": {
          "b": [
            "the box to which the geometry will be culled."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVisualizationCullingBox",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxScene_getRenderBuffer_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the render buffer."
          ]
        },
        "additional": {
          "b": [
            "This will contain the results of any active visualization for this scene.",
            "",
            "Do not use this method while the simulation is running. Calls to this method while the simulation is running will result in undefined behaviour.",
            "",
            "The render buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRenderBuffer",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxRenderBuffer"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_getSimulationStatistics",
      "comment": {
        "summary": {
          "b": [
            "Call this method to retrieve statistics for the current simulation step."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSimulationStatistics",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "stats",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationStatistics"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getBroadPhaseType",
      "comment": {
        "summary": {
          "b": [
            "Returns broad-phase type."
          ]
        },
        "additional": {
          "b": [
            "Broad-phase type"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBroadPhaseType",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxBroadPhaseType",
          "cxx_qt": "PxBroadPhaseType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxScene_getBroadPhaseCaps",
      "comment": {
        "summary": {
          "b": [
            "Gets broad-phase caps."
          ]
        },
        "additional": {
          "b": [
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBroadPhaseCaps",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "caps",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseCaps"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_getNbBroadPhaseRegions",
      "comment": {
        "summary": {
          "b": [
            "Returns number of regions currently registered in the broad-phase."
          ]
        },
        "additional": {
          "b": [
            "Number of regions"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbBroadPhaseRegions",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getBroadPhaseRegions",
      "comment": {
        "summary": {
          "b": [
            "Gets broad-phase regions."
          ]
        },
        "additional": {
          "b": [
            "Number of written out regions"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBroadPhaseRegions",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegionInfo"
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_addBroadPhaseRegion_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a new broad-phase region."
          ]
        },
        "additional": {
          "b": [
            "The bounds for the new region must be non-empty, otherwise an error occurs and the call is ignored.",
            "",
            "Note that by default, objects already existing in the SDK that might touch this region will not be automatically",
            "added to the region. In other words the newly created region will be empty, and will only be populated with new",
            "objects when they are added to the simulation, or with already existing objects when they are updated.",
            "",
            "It is nonetheless possible to override this default behavior and let the SDK populate the new region automatically",
            "with already existing objects overlapping the incoming region. This has a cost though, and it should only be used",
            "when the game can not guarantee that all objects within the new region will be added to the simulation after the",
            "region itself.",
            "",
            "Objects automatically move from one region to another during their lifetime. The system keeps tracks of what",
            "regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an",
            "object leaves all regions, or is created outside of all regions, several things happen:",
            "- collisions get disabled for this object",
            "- if a PxBroadPhaseCallback object is provided, an \"out-of-bounds\" event is generated via that callback",
            "- if a PxBroadPhaseCallback object is not provided, a warning/error message is sent to the error stream",
            "",
            "If an object goes out-of-bounds and user deletes it during the same frame, neither the out-of-bounds event nor the",
            "error message is generated.",
            "",
            "Handle for newly created region, or 0xffffffff in case of failure."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addBroadPhaseRegion",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "region",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBroadPhaseRegion"
                }
              }
            }
          }
        },
        {
          "name": "populateRegion",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_removeBroadPhaseRegion_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes a new broad-phase region."
          ]
        },
        "additional": {
          "b": [
            "If the region still contains objects, and if those objects do not overlap any region any more, they are not",
            "automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification",
            "is used for each object. Users are responsible for removing the objects from the simulation if this is the",
            "desired behavior.",
            "",
            "If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.",
            "",
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeBroadPhaseRegion",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxScene_getTaskManager",
      "comment": {
        "summary": {
          "b": [
            "Get the task manager associated with this scene"
          ]
        },
        "additional": {
          "b": [
            "the task manager associated with the scene"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTaskManager",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTaskManager"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_lockRead_mut",
      "comment": {
        "summary": {
          "b": [
            "Lock the scene for reading from the calling thread."
          ]
        },
        "additional": {
          "b": [
            "When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockRead() must be",
            "called before any read calls are made on the scene.",
            "",
            "Multiple threads may read at the same time, no threads may read while a thread is writing.",
            "If a call to lockRead() is made while another thread is holding a write lock",
            "then the calling thread will be blocked until the writing thread calls unlockWrite().",
            "",
            "Lock upgrading is *not* supported, that means it is an error to",
            "call lockRead() followed by lockWrite().",
            "",
            "Recursive locking is supported but each lockRead() call must be paired with an unlockRead()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lockRead",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_unlockRead_mut",
      "comment": {
        "summary": {
          "b": [
            "Unlock the scene from reading."
          ]
        },
        "additional": {
          "b": [
            "Each unlockRead() must be paired with a lockRead() from the same thread."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlockRead",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_lockWrite_mut",
      "comment": {
        "summary": {
          "b": [
            "Lock the scene for writing from this thread."
          ]
        },
        "additional": {
          "b": [
            "When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockWrite() must be",
            "called before any write calls are made on the scene.",
            "",
            "Only one thread may write at a time and no threads may read while a thread is writing.",
            "If a call to lockWrite() is made and there are other threads reading then the",
            "calling thread will be blocked until the readers complete.",
            "",
            "Writers have priority. If a thread is blocked waiting to write then subsequent calls to",
            "lockRead() from other threads will be blocked until the writer completes.",
            "",
            "If multiple threads are waiting to write then the thread that is first",
            "granted access depends on OS scheduling.",
            "",
            "Recursive locking is supported but each lockWrite() call must be paired",
            "with an unlockWrite().",
            "",
            "If a thread has already locked the scene for writing then it may call",
            "lockRead()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lockWrite",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_unlockWrite_mut",
      "comment": {
        "summary": {
          "b": [
            "Unlock the scene from writing."
          ]
        },
        "additional": {
          "b": [
            "Each unlockWrite() must be paired with a lockWrite() from the same thread."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlockWrite",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_setNbContactDataBlocks_mut",
      "comment": {
        "summary": {
          "b": [
            "set the cache blocks that can be used during simulate()."
          ]
        },
        "additional": {
          "b": [
            "Each frame the simulation requires memory to store contact, friction, and contact cache data. This memory is used in blocks of 16K.",
            "Each frame the blocks used by the previous frame are freed, and may be retrieved by the application using PxScene::flushSimulation()",
            "",
            "This call will force allocation of cache blocks if the numBlocks parameter is greater than the currently allocated number",
            "of blocks, and less than the max16KContactDataBlocks parameter specified at scene creation time.",
            "",
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setNbContactDataBlocks",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "numBlocks",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getNbContactDataBlocksUsed",
      "comment": {
        "summary": {
          "b": [
            "get the number of cache blocks currently used by the scene"
          ]
        },
        "additional": {
          "b": [
            "This function may not be called while the scene is simulating",
            "",
            "the number of cache blocks currently used by the scene"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbContactDataBlocksUsed",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getMaxNbContactDataBlocksUsed",
      "comment": {
        "summary": {
          "b": [
            "get the maximum number of cache blocks used by the scene"
          ]
        },
        "additional": {
          "b": [
            "This function may not be called while the scene is simulating",
            "",
            "the maximum number of cache blocks everused by the scene"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxNbContactDataBlocksUsed",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getContactReportStreamBufferSize",
      "comment": {
        "summary": {
          "b": [
            "Return the value of PxSceneDesc::contactReportStreamBufferSize that was set when creating the scene with PxPhysics::createScene"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactReportStreamBufferSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_setSolverBatchSize_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the number of actors required to spawn a separate rigid body solver thread."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSolverBatchSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "solverBatchSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getSolverBatchSize",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the number of actors required to spawn a separate rigid body solver thread."
          ]
        },
        "additional": {
          "b": [
            "Current number of actors required to spawn a separate rigid body solver thread."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSolverBatchSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_setSolverArticulationBatchSize_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the number of articulations required to spawn a separate rigid body solver thread."
          ]
        },
        "additional": {
          "b": [
            "Do not use this method while the simulation is running."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSolverArticulationBatchSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "solverBatchSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getSolverArticulationBatchSize",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the number of articulations required to spawn a separate rigid body solver thread."
          ]
        },
        "additional": {
          "b": [
            "Current number of articulations required to spawn a separate rigid body solver thread."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSolverArticulationBatchSize",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxScene_getWakeCounterResetValue",
      "comment": {
        "summary": {
          "b": [
            "Returns the wake counter reset value."
          ]
        },
        "additional": {
          "b": [
            "Wake counter reset value"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWakeCounterResetValue",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxScene_shiftOrigin_mut",
      "comment": {
        "summary": {
          "b": [
            "Shift the scene origin by the specified vector."
          ]
        },
        "additional": {
          "b": [
            "The poses of all objects in the scene and the corresponding data structures will get adjusted to reflect the new origin location",
            "(the shift vector will get subtracted from all object positions).",
            "",
            "It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysX accordingly.",
            "",
            "Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.",
            "",
            "Make sure to propagate the origin shift to other dependent modules (for example, the character controller module etc.).",
            "",
            "This is an expensive operation and we recommend to use it only in the case where distance related precision issues may arise in areas far from the origin."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "shiftOrigin",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "shift",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getScenePvdClient_mut",
      "comment": {
        "summary": {
          "b": [
            "Returns the Pvd client associated with the scene."
          ]
        },
        "additional": {
          "b": [
            "the client, NULL if no PVD supported."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScenePvdClient",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPvdSceneClient"
            }
          }
        }
      }
    },
    {
      "name": "PxScene_copyArticulationData_mut",
      "comment": {
        "summary": {
          "b": [
            "Copy GPU articulation data from the internal GPU buffer to a user-provided device buffer."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "copyArticulationData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "dataType",
          "kind": {
            "Enum": {
              "name": "PxArticulationGpuDataType",
              "cxx_qt": "PxArticulationGpuDataType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "nbCopyArticulations",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "copyEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_applyArticulationData_mut",
      "comment": {
        "summary": {
          "b": [
            "Apply GPU articulation data from a user-provided device buffer to the internal GPU buffer."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "applyArticulationData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "dataType",
          "kind": {
            "Enum": {
              "name": "PxArticulationGpuDataType",
              "cxx_qt": "PxArticulationGpuDataType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "nbUpdatedArticulations",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "waitEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "signalEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_copySoftBodyData_mut",
      "comment": {
        "summary": {
          "b": [
            "Copy GPU softbody data from the internal GPU buffer to a user-provided device buffer."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "copySoftBodyData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "Void"
                  }
                }
              }
            }
          }
        },
        {
          "name": "dataSizes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "softBodyIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxSoftBodyDataFlag",
              "cxx_qt": "PxSoftBodyDataFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "nbCopySoftBodies",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "copyEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_applySoftBodyData_mut",
      "comment": {
        "summary": {
          "b": [
            "Apply user-provided data to the internal softbody system."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "applySoftBodyData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "Void"
                  }
                }
              }
            }
          }
        },
        {
          "name": "dataSizes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "softBodyIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxSoftBodyDataFlag",
              "cxx_qt": "PxSoftBodyDataFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "nbUpdatedSoftBodies",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "applyEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_copyContactData_mut",
      "comment": {
        "summary": {
          "b": [
            "Copy contact data from the internal GPU buffer to a user-provided device buffer."
          ]
        },
        "additional": {
          "b": [
            "The contact data contains pointers to internal state and is only valid until the next call to simulate()."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "copyContactData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "maxContactPairs",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "numContactPairs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "copyEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_copyBodyData_mut",
      "comment": {
        "summary": {
          "b": [
            "Copy GPU rigid body data from the internal GPU buffer to a user-provided device buffer."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "copyBodyData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGpuBodyData"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGpuActorPair"
                }
              }
            }
          }
        },
        {
          "name": "nbCopyActors",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "copyEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_applyActorData_mut",
      "comment": {
        "summary": {
          "b": [
            "Apply user-provided data to rigid body."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "applyActorData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGpuActorPair"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxActorCacheFlag",
              "cxx_qt": "PxActorCacheFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "nbUpdatedActors",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "waitEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "signalEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_computeDenseJacobians_mut",
      "comment": {
        "summary": {
          "b": [
            "Compute dense Jacobian matrices for specified articulations on the GPU."
          ]
        },
        "additional": {
          "b": [
            "The size of Jacobians can vary by articulation, since it depends on the number of links, degrees-of-freedom, and whether the base is fixed.",
            "",
            "The size is determined using these formulas:",
            "nCols = (fixedBase ? 0 : 6) + dofCount",
            "nRows = (fixedBase ? 0 : 6) + (linkCount - 1) * 6;",
            "",
            "The user must ensure that adequate space is provided for each Jacobian matrix."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeDenseJacobians",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxIndexDataPair"
                }
              }
            }
          }
        },
        {
          "name": "nbIndices",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "computeEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_computeGeneralizedMassMatrices_mut",
      "comment": {
        "summary": {
          "b": [
            "Compute the joint-space inertia matrices that maps joint accelerations to joint forces: forces = M * accelerations on the GPU."
          ]
        },
        "additional": {
          "b": [
            "The size of matrices can vary by articulation, since it depends on the number of links and degrees-of-freedom.",
            "",
            "The size is determined using this formula:",
            "sizeof(float) * dofCount * dofCount",
            "",
            "The user must ensure that adequate space is provided for each mass matrix."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeGeneralizedMassMatrices",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxIndexDataPair"
                }
              }
            }
          }
        },
        {
          "name": "nbIndices",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "computeEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_computeGeneralizedGravityForces_mut",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose."
          ]
        },
        "additional": {
          "b": [
            "The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.",
            "",
            "The size is determined using this formula:",
            "sizeof(float) * dofCount",
            "",
            "The user must ensure that adequate space is provided for each articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeGeneralizedGravityForces",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxIndexDataPair"
                }
              }
            }
          }
        },
        {
          "name": "nbIndices",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "computeEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_computeCoriolisAndCentrifugalForces_mut",
      "comment": {
        "summary": {
          "b": [
            "Computes the joint DOF forces required to counteract coriolis and centrifugal forces for the given articulation pose."
          ]
        },
        "additional": {
          "b": [
            "The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.",
            "",
            "The size is determined using this formula:",
            "sizeof(float) * dofCount",
            "",
            "The user must ensure that adequate space is provided for each articulation."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeCoriolisAndCentrifugalForces",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxIndexDataPair"
                }
              }
            }
          }
        },
        {
          "name": "nbIndices",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "computeEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxScene_getGpuDynamicsConfig",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGpuDynamicsConfig",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxgDynamicsMemoryConfig"
        }
      }
    },
    {
      "name": "PxScene_applyParticleBufferData_mut",
      "comment": {
        "summary": {
          "b": [
            "Apply user-provided data to particle buffers."
          ]
        },
        "additional": {
          "b": [
            "This function should be used if the particle buffer flags are already on the device. Otherwise, use PxParticleBuffer::raiseFlags()",
            "from the CPU.",
            "",
            "This assumes the data has been changed directly in the PxParticleBuffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "applyParticleBufferData",
            "class_name": "PxScene",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "bufferIndexPair",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGpuParticleBufferIndexPair"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Flags": {
                  "name": "PxParticleBufferFlags",
                  "repr": "UInt"
                }
              }
            }
          }
        },
        {
          "name": "nbUpdatedBuffers",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "waitEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "signalEvent",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneReadLock_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxSceneReadLock"
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSceneReadLock"
            }
          }
        }
      }
    },
    {
      "name": "PxSceneReadLock_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSceneReadLock"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneReadLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSceneWriteLock_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxSceneWriteLock"
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSceneWriteLock"
            }
          }
        }
      }
    },
    {
      "name": "PxSceneWriteLock_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSceneWriteLock"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSceneWriteLock"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactPairExtraDataItem_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPairExtraDataItem"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPairExtraDataItem"
        }
      }
    },
    {
      "name": "PxContactPairVelocity_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPairVelocity"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPairVelocity"
        }
      }
    },
    {
      "name": "PxContactPairPose_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPairPose"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPairPose"
        }
      }
    },
    {
      "name": "PxContactPairIndex_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPairIndex"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPairIndex"
        }
      }
    },
    {
      "name": "PxContactPairExtraDataIterator_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxContactPairExtraDataIterator"
        }
      },
      "params": [
        {
          "name": "stream",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxContactPairExtraDataIterator"
        }
      }
    },
    {
      "name": "PxContactPairExtraDataIterator_nextItemSet_mut",
      "comment": {
        "summary": {
          "b": [
            "Advances the iterator to next set of extra data items."
          ]
        },
        "additional": {
          "b": [
            "The contact pair extra data stream contains sets of items as requested by the corresponding #PxPairFlag flags",
            "#PxPairFlag::ePRE_SOLVER_VELOCITY, #PxPairFlag::ePOST_SOLVER_VELOCITY, #PxPairFlag::eCONTACT_EVENT_POSE. A set can contain one",
            "item of each plus the PxContactPairIndex item. This method parses the stream and points the iterator",
            "member variables to the corresponding items of the current set, if they are available. If CCD is not enabled,",
            "you should only get one set of items. If CCD with multiple passes is enabled, you might get more than one item",
            "set.",
            "",
            "Even though contact pair extra data is requested per shape pair, you will not get an item set per shape pair",
            "but one per actor pair. If, for example, an actor has two shapes and both collide with another actor, then",
            "there will only be one item set (since it applies to both shape pairs).",
            "",
            "True if there was another set of extra data items in the stream, else false."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "nextItemSet",
            "class_name": "PxContactPairExtraDataIterator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPairExtraDataIterator"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxContactPairHeader_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPairHeader"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPairHeader"
        }
      }
    },
    {
      "name": "PxContactPair_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxContactPair"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxContactPair"
        }
      }
    },
    {
      "name": "PxContactPair_extractContacts",
      "comment": {
        "summary": {
          "b": [
            "Extracts the contact points from the stream and stores them in a convenient format."
          ]
        },
        "additional": {
          "b": [
            "Number of contact points written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "extractContacts",
            "class_name": "PxContactPair",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPair"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Record": {
                  "name": "PxContactPairPoint"
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxContactPair_bufferContacts",
      "comment": {
        "summary": {
          "b": [
            "Helper method to clone the contact pair and copy the contact data stream into a user buffer."
          ]
        },
        "additional": {
          "b": [
            "The contact data stream is only accessible during the contact report callback. This helper function provides copy functionality",
            "to buffer the contact stream information such that it can get accessed at a later stage."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "bufferContacts",
            "class_name": "PxContactPair",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPair"
                }
              }
            }
          }
        },
        {
          "name": "newPair",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPair"
                }
              }
            }
          }
        },
        {
          "name": "bufferMemory",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactPair_getInternalFaceIndices",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInternalFaceIndices",
            "class_name": "PxContactPair",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPair"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxTriggerPair_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxTriggerPair"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTriggerPair"
        }
      }
    },
    {
      "name": "PxConstraintInfo_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxConstraintInfo"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxConstraintInfo"
        }
      }
    },
    {
      "name": "PxConstraintInfo_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxConstraintInfo"
        }
      },
      "params": [
        {
          "name": "c",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraint"
                }
              }
            }
          }
        },
        {
          "name": "extRef",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxConstraintInfo"
        }
      }
    },
    {
      "name": "PxSimulationEventCallback_onConstraintBreak_mut",
      "comment": {
        "summary": {
          "b": [
            "This is called when a breakable constraint breaks."
          ]
        },
        "additional": {
          "b": [
            "The user should not release the constraint shader inside this call!",
            "",
            "No event will get reported if the constraint breaks but gets deleted while the time step is still being simulated."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onConstraintBreak",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "constraints",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConstraintInfo"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_onWake_mut",
      "comment": {
        "summary": {
          "b": [
            "This is called with the actors which have just been woken up."
          ]
        },
        "additional": {
          "b": [
            "Only supported by rigid bodies yet.",
            "",
            "Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.",
            "",
            "Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame",
            "will get reported. For example, let us assume actor A is awake, then A->putToSleep() gets called, then later A->wakeUp() gets called.",
            "At the next simulate/fetchResults() step only an onWake() event will get triggered because that was the last transition.",
            "",
            "If an actor gets newly added to a scene with properties such that it is awake and the sleep state does not get changed by",
            "the user or simulation, then an onWake() event will get sent at the next simulate/fetchResults() step."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onWake",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "actors",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_onSleep_mut",
      "comment": {
        "summary": {
          "b": [
            "This is called with the actors which have just been put to sleep."
          ]
        },
        "additional": {
          "b": [
            "Only supported by rigid bodies yet.",
            "",
            "Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.",
            "",
            "Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame",
            "will get reported. For example, let us assume actor A is asleep, then A->wakeUp() gets called, then later A->putToSleep() gets called.",
            "At the next simulate/fetchResults() step only an onSleep() event will get triggered because that was the last transition (assuming the simulation",
            "does not wake the actor up).",
            "",
            "If an actor gets newly added to a scene with properties such that it is asleep and the sleep state does not get changed by",
            "the user or simulation, then an onSleep() event will get sent at the next simulate/fetchResults() step."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onSleep",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "actors",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_onContact_mut",
      "comment": {
        "summary": {
          "b": [
            "This is called when certain contact events occur."
          ]
        },
        "additional": {
          "b": [
            "The method will be called for a pair of actors if one of the colliding shape pairs requested contact notification.",
            "You request which events are reported using the filter shader/callback mechanism (see #PxSimulationFilterShader,",
            "#PxSimulationFilterCallback, #PxPairFlag).",
            "",
            "Do not keep references to the passed objects, as they will be",
            "invalid after this function returns."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onContact",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairHeader",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxContactPairHeader"
                }
              }
            }
          }
        },
        {
          "name": "pairs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactPair"
                }
              }
            }
          }
        },
        {
          "name": "nbPairs",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_onTrigger_mut",
      "comment": {
        "summary": {
          "b": [
            "This is called with the current trigger pair events."
          ]
        },
        "additional": {
          "b": [
            "Shapes which have been marked as triggers using PxShapeFlag::eTRIGGER_SHAPE will send events",
            "according to the pair flag specification in the filter shader (see #PxPairFlag, #PxSimulationFilterShader).",
            "",
            "Trigger shapes will no longer send notification events for interactions with other trigger shapes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onTrigger",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "pairs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriggerPair"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_onAdvance_mut",
      "comment": {
        "summary": {
          "b": [
            "Provides early access to the new pose of moving rigid bodies."
          ]
        },
        "additional": {
          "b": [
            "When this call occurs, rigid bodies having the #PxRigidBodyFlag::eENABLE_POSE_INTEGRATION_PREVIEW",
            "flag set, were moved by the simulation and their new poses can be accessed through the provided buffers.",
            "",
            "The provided buffers are valid and can be read until the next call to #PxScene::simulate() or #PxScene::collide().",
            "",
            "This callback gets triggered while the simulation is running. If the provided rigid body references are used to",
            "read properties of the object, then the callback has to guarantee no other thread is writing to the same body at the same",
            "time.",
            "",
            "The code in this callback should be lightweight as it can block the simulation, that is, the",
            "#PxScene::fetchResults() call."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onAdvance",
            "class_name": "PxSimulationEventCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        },
        {
          "name": "bodyBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidBody"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "poseBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSimulationEventCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxSimulationEventCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSimulationEventCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxFEMParameters_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxFEMParameters"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxFEMParameters"
        }
      }
    },
    {
      "name": "PxPruningStructure_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Release this object."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPruningStructure_getRigidActors",
      "comment": {
        "summary": {
          "b": [
            "Retrieve rigid actors in the pruning structure."
          ]
        },
        "additional": {
          "b": [
            "You can retrieve the number of rigid actor pointers by calling #getNbRigidActors()",
            "",
            "Number of rigid actor pointers written to the buffer."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRigidActors",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        },
        {
          "name": "userBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": true,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "bufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "startIndex",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPruningStructure_getNbRigidActors",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of rigid actors in the pruning structure."
          ]
        },
        "additional": {
          "b": [
            "You can use #getRigidActors() to retrieve the rigid actor pointers.",
            "",
            "Number of rigid actors in the pruning structure."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbRigidActors",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPruningStructure_getStaticMergeData",
      "comment": {
        "summary": {
          "b": [
            "Gets the merge data for static actors"
          ]
        },
        "additional": {
          "b": [
            "This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure",
            "with the internal data-structures of the scene-query system.",
            "",
            "Implementation-dependent merge data for static actors."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStaticMergeData",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxPruningStructure_getDynamicMergeData",
      "comment": {
        "summary": {
          "b": [
            "Gets the merge data for dynamic actors"
          ]
        },
        "additional": {
          "b": [
            "This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure",
            "with the internal data-structures of the scene-query system.",
            "",
            "Implementation-dependent merge data for dynamic actors."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDynamicMergeData",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxPruningStructure_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxPruningStructure",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPruningStructure"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxExtendedVec3_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxExtendedVec3"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxExtendedVec3"
        }
      }
    },
    {
      "name": "PxExtendedVec3_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxExtendedVec3"
        }
      },
      "params": [
        {
          "name": "_x",
          "kind": {
            "Builtin": "Double"
          }
        },
        {
          "name": "_y",
          "kind": {
            "Builtin": "Double"
          }
        },
        {
          "name": "_z",
          "kind": {
            "Builtin": "Double"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxExtendedVec3"
        }
      }
    },
    {
      "name": "PxExtendedVec3_isZero",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isZero",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxExtendedVec3_dot",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "dot",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxExtendedVec3_distanceSquared",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "distanceSquared",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxExtendedVec3_magnitudeSquared",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitudeSquared",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxExtendedVec3_magnitude",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "magnitude",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxExtendedVec3_normalize_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "normalize",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Double"
      }
    },
    {
      "name": "PxExtendedVec3_isFinite",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isFinite",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxExtendedVec3_maximum_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "maximum",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_minimum_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "minimum",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_set_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "set",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "x_",
          "kind": {
            "Builtin": "Double"
          }
        },
        {
          "name": "y_",
          "kind": {
            "Builtin": "Double"
          }
        },
        {
          "name": "z_",
          "kind": {
            "Builtin": "Double"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_setPlusInfinity_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPlusInfinity",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_setMinusInfinity_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMinusInfinity",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_cross_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cross",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "left",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_cross_mut_1",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cross",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "left",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxExtendedVec3_cross",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cross",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxExtendedVec3"
        }
      }
    },
    {
      "name": "PxExtendedVec3_cross_mut_2",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "cross",
            "class_name": "PxExtendedVec3",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        },
        {
          "name": "left",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "right",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_toVec3",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "toVec3",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "v",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxObstacle_getType",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxObstacle",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacle"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxGeometryType",
          "cxx_qt": "PxGeometryType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxBoxObstacle_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBoxObstacle"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBoxObstacle"
        }
      }
    },
    {
      "name": "PxCapsuleObstacle_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxCapsuleObstacle"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxCapsuleObstacle"
        }
      }
    },
    {
      "name": "PxObstacleContext_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the context."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxObstacleContext_getControllerManager",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the controller manager associated with this context."
          ]
        },
        "additional": {
          "b": [
            "The associated controller manager"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getControllerManager",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxControllerManager"
            }
          }
        }
      }
    },
    {
      "name": "PxObstacleContext_addObstacle_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds an obstacle to the context."
          ]
        },
        "additional": {
          "b": [
            "Handle for newly-added obstacle"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addObstacle",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        },
        {
          "name": "obstacle",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxObstacle"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxObstacleContext_removeObstacle_mut",
      "comment": {
        "summary": {
          "b": [
            "Removes an obstacle from the context."
          ]
        },
        "additional": {
          "b": [
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "removeObstacle",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxObstacleContext_updateObstacle_mut",
      "comment": {
        "summary": {
          "b": [
            "Updates data for an existing obstacle."
          ]
        },
        "additional": {
          "b": [
            "True if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "updateObstacle",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "obstacle",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxObstacle"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxObstacleContext_getNbObstacles",
      "comment": {
        "summary": {
          "b": [
            "Retrieves number of obstacles in the context."
          ]
        },
        "additional": {
          "b": [
            "Number of obstacles in the context"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbObstacles",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxObstacleContext_getObstacle",
      "comment": {
        "summary": {
          "b": [
            "Retrieves desired obstacle."
          ]
        },
        "additional": {
          "b": [
            "Desired obstacle"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getObstacle",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        },
        {
          "name": "i",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxObstacle"
            }
          }
        }
      }
    },
    {
      "name": "PxObstacleContext_getObstacleByHandle",
      "comment": {
        "summary": {
          "b": [
            "Retrieves desired obstacle by given handle."
          ]
        },
        "additional": {
          "b": [
            "Desired obstacle"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getObstacleByHandle",
            "class_name": "PxObstacleContext",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        },
        {
          "name": "handle",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxObstacle"
            }
          }
        }
      }
    },
    {
      "name": "PxUserControllerHitReport_onShapeHit_mut",
      "comment": {
        "summary": {
          "b": [
            "Called when current controller hits a shape."
          ]
        },
        "additional": {
          "b": [
            "This is called when the CCT moves and hits a shape. This will not be called when a moving shape hits a non-moving CCT."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onShapeHit",
            "class_name": "PxUserControllerHitReport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxUserControllerHitReport"
                }
              }
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxControllerShapeHit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxUserControllerHitReport_onControllerHit_mut",
      "comment": {
        "summary": {
          "b": [
            "Called when current controller hits another controller."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onControllerHit",
            "class_name": "PxUserControllerHitReport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxUserControllerHitReport"
                }
              }
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxControllersHit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxUserControllerHitReport_onObstacleHit_mut",
      "comment": {
        "summary": {
          "b": [
            "Called when current controller hits a user-defined obstacle."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "onObstacleHit",
            "class_name": "PxUserControllerHitReport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxUserControllerHitReport"
                }
              }
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxControllerObstacleHit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerFilterCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxControllerFilterCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerFilterCallback_filter_mut",
      "comment": {
        "summary": {
          "b": [
            "Filtering method for CCT-vs-CCT."
          ]
        },
        "additional": {
          "b": [
            "true to keep the pair, false to filter it out"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "filter",
            "class_name": "PxControllerFilterCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "a",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "b",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxControllerFilters_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxControllerFilters"
        }
      },
      "params": [
        {
          "name": "filterData",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFilterData"
                }
              }
            }
          }
        },
        {
          "name": "cb",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cctFilterCb",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxControllerFilters"
        }
      }
    },
    {
      "name": "PxControllerDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if the current settings are valid"
          ]
        },
        "additional": {
          "b": [
            "True if the descriptor is valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxControllerDesc_getType",
      "comment": {
        "summary": {
          "b": [
            "Returns the character controller type"
          ]
        },
        "additional": {
          "b": [
            "The controllers type."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxControllerShapeType",
          "cxx_qt": "PxControllerShapeType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxController_getType",
      "comment": {
        "summary": {
          "b": [
            "Return the type of controller"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxControllerShapeType",
          "cxx_qt": "PxControllerShapeType::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxController_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the controller."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_move_mut",
      "comment": {
        "summary": {
          "b": [
            "Moves the character using a \"collide-and-slide\" algorithm."
          ]
        },
        "additional": {
          "b": [
            "Collision flags, collection of ::PxControllerCollisionFlags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "move",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "disp",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "minDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "elapsedTime",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "filters",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxControllerFilters"
                }
              }
            }
          }
        },
        {
          "name": "obstacles",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxObstacleContext"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxControllerCollisionFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxController_setPosition_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's position."
          ]
        },
        "additional": {
          "b": [
            "The position controlled by this function is the center of the collision shape.",
            "",
            "This is a 'teleport' function, it doesn't check for collisions.",
            "",
            "The character's position must be such that it does not overlap the static geometry.",
            "",
            "To move the character under normal conditions use the #move() function.",
            "",
            "Currently always returns true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPosition",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "position",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxController_getPosition",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the raw position of the controller."
          ]
        },
        "additional": {
          "b": [
            "The position retrieved by this function is the center of the collision shape. To retrieve the bottom position of the shape,",
            "a.k.a. the foot position, use the getFootPosition() function.",
            "",
            "The position is updated by calls to move(). Calling this method without calling",
            "move() will return the last position or the initial position of the controller.",
            "",
            "The controller's center position"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPosition",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": true,
          "pointee": {
            "Record": {
              "name": "PxExtendedVec3"
            }
          }
        }
      }
    },
    {
      "name": "PxController_setFootPosition_mut",
      "comment": {
        "summary": {
          "b": [
            "Set controller's foot position."
          ]
        },
        "additional": {
          "b": [
            "The position controlled by this function is the bottom of the collision shape, a.k.a. the foot position.",
            "",
            "The foot position takes the contact offset into account",
            "",
            "This is a 'teleport' function, it doesn't check for collisions.",
            "",
            "To move the character under normal conditions use the #move() function.",
            "",
            "Currently always returns true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setFootPosition",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "position",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxExtendedVec3"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxController_getFootPosition",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the \"foot\" position of the controller, i.e. the position of the bottom of the CCT's shape."
          ]
        },
        "additional": {
          "b": [
            "The foot position takes the contact offset into account",
            "",
            "The controller's foot position"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getFootPosition",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxExtendedVec3"
        }
      }
    },
    {
      "name": "PxController_getActor",
      "comment": {
        "summary": {
          "b": [
            "Get the rigid body actor associated with this controller (see PhysX documentation).",
            "The behavior upon manually altering this actor is undefined, you should primarily",
            "use it for reading const properties."
          ]
        },
        "additional": {
          "b": [
            "the actor associated with the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActor",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "PxController_setStepOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "The step height."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStepOffset",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getStepOffset",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the step height."
          ]
        },
        "additional": {
          "b": [
            "The step offset for the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStepOffset",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxController_setNonWalkableMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the non-walkable mode for the CCT."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setNonWalkableMode",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxControllerNonWalkableMode",
              "cxx_qt": "PxControllerNonWalkableMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getNonWalkableMode",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the non-walkable mode for the CCT."
          ]
        },
        "additional": {
          "b": [
            "The current non-walkable mode."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNonWalkableMode",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxControllerNonWalkableMode",
          "cxx_qt": "PxControllerNonWalkableMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxController_getContactOffset",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the contact offset."
          ]
        },
        "additional": {
          "b": [
            "The contact offset for the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactOffset",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxController_setContactOffset_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the contact offset."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactOffset",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "offset",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getUpDirection",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the 'up' direction."
          ]
        },
        "additional": {
          "b": [
            "The up direction for the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getUpDirection",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxController_setUpDirection_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the 'up' direction."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setUpDirection",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "up",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getSlopeLimit",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the slope limit."
          ]
        },
        "additional": {
          "b": [
            "The slope limit for the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSlopeLimit",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxController_setSlopeLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the slope limit."
          ]
        },
        "additional": {
          "b": [
            "This feature can not be enabled at runtime, i.e. if the slope limit is zero when creating the CCT",
            "(which disables the feature) then changing the slope limit at runtime will not have any effect, and the call",
            "will be ignored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSlopeLimit",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "slopeLimit",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_invalidateCache_mut",
      "comment": {
        "summary": {
          "b": [
            "Flushes internal geometry cache."
          ]
        },
        "additional": {
          "b": [
            "The character controller uses caching in order to speed up collision testing. The cache is",
            "automatically flushed when a change to static objects is detected in the scene. For example when a",
            "static shape is added, updated, or removed from the scene, the cache is automatically invalidated.",
            "",
            "However there may be situations that cannot be automatically detected, and those require manual",
            "invalidation of the cache. Currently the user must call this when the filtering behavior changes (the",
            "PxControllerFilters parameter of the PxController::move call).  While the controller in principle",
            "could detect a change in these parameters, it cannot detect a change in the behavior of the filtering",
            "function."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "invalidateCache",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getScene_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve the scene associated with the controller."
          ]
        },
        "additional": {
          "b": [
            "The physics scene"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxController_getUserData",
      "comment": {
        "summary": {
          "b": [
            "Returns the user data associated with this controller."
          ]
        },
        "additional": {
          "b": [
            "The user pointer associated with the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getUserData",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxController_setUserData_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the user data associated with this controller."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setUserData",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "userData",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getState",
      "comment": {
        "summary": {
          "b": [
            "Returns information about the controller's internal state."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getState",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "state",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerState"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_getStats",
      "comment": {
        "summary": {
          "b": [
            "Returns the controller's internal statistics."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStats",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "stats",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerStats"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxController_resize_mut",
      "comment": {
        "summary": {
          "b": [
            "Resizes the controller."
          ]
        },
        "additional": {
          "b": [
            "This function attempts to resize the controller to a given size, while making sure the bottom",
            "position of the controller remains constant. In other words the function modifies both the",
            "height and the (center) position of the controller. This is a helper function that can be used",
            "to implement a 'crouch' functionality for example."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "resize",
            "class_name": "PxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        },
        {
          "name": "height",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBoxControllerDesc_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxBoxControllerDesc"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBoxControllerDesc"
            }
          }
        }
      }
    },
    {
      "name": "PxBoxControllerDesc_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxBoxControllerDesc"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBoxControllerDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxBoxControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBoxControllerDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if the current settings are valid"
          ]
        },
        "additional": {
          "b": [
            "True if the descriptor is valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBoxControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBoxController_getHalfHeight",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's half height."
          ]
        },
        "additional": {
          "b": [
            "The half height of the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHalfHeight",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxBoxController_getHalfSideExtent",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's half side extent."
          ]
        },
        "additional": {
          "b": [
            "The half side extent of the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHalfSideExtent",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxBoxController_getHalfForwardExtent",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's half forward extent."
          ]
        },
        "additional": {
          "b": [
            "The half forward extent of the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHalfForwardExtent",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxBoxController_setHalfHeight_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's half height."
          ]
        },
        "additional": {
          "b": [
            "this doesn't check for collisions.",
            "",
            "Currently always true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setHalfHeight",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        },
        {
          "name": "halfHeight",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBoxController_setHalfSideExtent_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's half side extent."
          ]
        },
        "additional": {
          "b": [
            "this doesn't check for collisions.",
            "",
            "Currently always true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setHalfSideExtent",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        },
        {
          "name": "halfSideExtent",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBoxController_setHalfForwardExtent_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's half forward extent."
          ]
        },
        "additional": {
          "b": [
            "this doesn't check for collisions.",
            "",
            "Currently always true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setHalfForwardExtent",
            "class_name": "PxBoxController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBoxController"
                }
              }
            }
          }
        },
        {
          "name": "halfForwardExtent",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCapsuleControllerDesc_new_alloc",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "New": "PxCapsuleControllerDesc"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCapsuleControllerDesc"
            }
          }
        }
      }
    },
    {
      "name": "PxCapsuleControllerDesc_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxCapsuleControllerDesc"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCapsuleControllerDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxCapsuleControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCapsuleControllerDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if the current settings are valid"
          ]
        },
        "additional": {
          "b": [
            "True if the descriptor is valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxCapsuleControllerDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCapsuleController_getRadius",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's radius."
          ]
        },
        "additional": {
          "b": [
            "The radius of the controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRadius",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxCapsuleController_setRadius_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's radius."
          ]
        },
        "additional": {
          "b": [
            "this doesn't check for collisions.",
            "",
            "Currently always true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRadius",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        },
        {
          "name": "radius",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCapsuleController_getHeight",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's height."
          ]
        },
        "additional": {
          "b": [
            "The height of the capsule controller."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getHeight",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxCapsuleController_setHeight_mut",
      "comment": {
        "summary": {
          "b": [
            "Resets controller's height."
          ]
        },
        "additional": {
          "b": [
            "this doesn't check for collisions.",
            "",
            "Currently always true."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setHeight",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        },
        {
          "name": "height",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCapsuleController_getClimbingMode",
      "comment": {
        "summary": {
          "b": [
            "Gets controller's climbing mode."
          ]
        },
        "additional": {
          "b": [
            "The capsule controller's climbing mode."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getClimbingMode",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxCapsuleClimbingMode",
          "cxx_qt": "PxCapsuleClimbingMode::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxCapsuleController_setClimbingMode_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets controller's climbing mode."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setClimbingMode",
            "class_name": "PxCapsuleController",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCapsuleController"
                }
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxCapsuleClimbingMode",
              "cxx_qt": "PxCapsuleClimbingMode::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxControllerBehaviorCallback_getBehaviorFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve behavior flags for a shape."
          ]
        },
        "additional": {
          "b": [
            "When the CCT touches a shape, the CCT's behavior w.r.t. this shape can be customized by users.",
            "This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.",
            "",
            "See comments about deprecated functions at the start of this class",
            "",
            "Desired behavior flags for the given shape"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBehaviorFlags",
            "class_name": "PxControllerBehaviorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerBehaviorCallback"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxControllerBehaviorFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxControllerBehaviorCallback_getBehaviorFlags_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Retrieve behavior flags for a controller."
          ]
        },
        "additional": {
          "b": [
            "When the CCT touches a controller, the CCT's behavior w.r.t. this controller can be customized by users.",
            "This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.",
            "",
            "The flag PxControllerBehaviorFlag::eCCT_CAN_RIDE_ON_OBJECT is not supported.",
            "",
            "See comments about deprecated functions at the start of this class",
            "",
            "Desired behavior flags for the given controller"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBehaviorFlags",
            "class_name": "PxControllerBehaviorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerBehaviorCallback"
                }
              }
            }
          }
        },
        {
          "name": "controller",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxController"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxControllerBehaviorFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxControllerBehaviorCallback_getBehaviorFlags_mut_2",
      "comment": {
        "summary": {
          "b": [
            "Retrieve behavior flags for an obstacle."
          ]
        },
        "additional": {
          "b": [
            "When the CCT touches an obstacle, the CCT's behavior w.r.t. this obstacle can be customized by users.",
            "This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.",
            "",
            "See comments about deprecated functions at the start of this class",
            "",
            "Desired behavior flags for the given obstacle"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBehaviorFlags",
            "class_name": "PxControllerBehaviorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerBehaviorCallback"
                }
              }
            }
          }
        },
        {
          "name": "obstacle",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxObstacle"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxControllerBehaviorFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxControllerManager_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the controller manager."
          ]
        },
        "additional": {
          "b": [
            "This will release all associated controllers and obstacle contexts.",
            "",
            "This function is required to be called to release foundation usage."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_getScene",
      "comment": {
        "summary": {
          "b": [
            "Returns the scene the manager is adding the controllers to."
          ]
        },
        "additional": {
          "b": [
            "The associated physics scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_getNbControllers",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of controllers that are being managed."
          ]
        },
        "additional": {
          "b": [
            "The number of controllers."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbControllers",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxControllerManager_getController_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve one of the controllers in the manager."
          ]
        },
        "additional": {
          "b": [
            "The controller with the specified index."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getController",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxController"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_createController_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates a new character controller."
          ]
        },
        "additional": {
          "b": [
            "The new controller"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createController",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxControllerDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxController"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_purgeControllers_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases all the controllers that are being managed."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "purgeControllers",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_getRenderBuffer_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves debug data."
          ]
        },
        "additional": {
          "b": [
            "The render buffer filled with debug-render data"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRenderBuffer",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxRenderBuffer"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_setDebugRenderingFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets debug rendering flags"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDebugRenderingFlags",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxControllerDebugRenderFlags",
              "repr": "UInt"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_getNbObstacleContexts",
      "comment": {
        "summary": {
          "b": [
            "Returns the number of obstacle contexts that are being managed."
          ]
        },
        "additional": {
          "b": [
            "The number of obstacle contexts."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbObstacleContexts",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxControllerManager_getObstacleContext_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieve one of the obstacle contexts in the manager."
          ]
        },
        "additional": {
          "b": [
            "The obstacle context with the specified index."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getObstacleContext",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxObstacleContext"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_createObstacleContext_mut",
      "comment": {
        "summary": {
          "b": [
            "Creates an obstacle context."
          ]
        },
        "additional": {
          "b": [
            "New obstacle context"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "createObstacleContext",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxObstacleContext"
            }
          }
        }
      }
    },
    {
      "name": "PxControllerManager_computeInteractions_mut",
      "comment": {
        "summary": {
          "b": [
            "Computes character-character interactions."
          ]
        },
        "additional": {
          "b": [
            "This function is an optional helper to properly resolve interactions between characters, in case they overlap (which can happen for gameplay reasons, etc).",
            "",
            "You should call this once per frame, before your PxController::move() calls. The function will not move the characters directly, but it will",
            "compute overlap information for each character that will be used in the next move() call.",
            "",
            "You need to provide a proper time value here so that interactions are resolved in a way that do not depend on the framerate.",
            "",
            "If you only have one character in the scene, or if you can guarantee your characters will never overlap, then you do not need to call this function.",
            "",
            "Releasing the manager will automatically release all the associated obstacle contexts."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeInteractions",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "elapsedTime",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "cctFilterCb",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_setTessellation_mut",
      "comment": {
        "summary": {
          "b": [
            "Enables or disables runtime tessellation."
          ]
        },
        "additional": {
          "b": [
            "Large triangles can create accuracy issues in the sweep code, which in turn can lead to characters not sliding smoothly",
            "against geometries, or even penetrating them. This feature allows one to reduce those issues by tessellating large",
            "triangles at runtime, before performing sweeps against them. The amount of tessellation is controlled by the 'maxEdgeLength' parameter.",
            "Any triangle with at least one edge length greater than the maxEdgeLength will get recursively tessellated, until resulting triangles are small enough.",
            "",
            "This features only applies to triangle meshes, convex meshes, heightfields and boxes."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTessellation",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Builtin": "Bool"
          }
        },
        {
          "name": "maxEdgeLength",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_setOverlapRecoveryModule_mut",
      "comment": {
        "summary": {
          "b": [
            "Enables or disables the overlap recovery module."
          ]
        },
        "additional": {
          "b": [
            "The overlap recovery module can be used to depenetrate CCTs from static objects when an overlap is detected. This can happen",
            "in three main cases:",
            "- when the CCT is directly spawned or teleported in another object",
            "- when the CCT algorithm fails due to limited FPU accuracy",
            "- when the \"up vector\" is modified, making the rotated CCT shape overlap surrounding objects",
            "",
            "When activated, the CCT module will automatically try to resolve the penetration, and move the CCT to a safe place where it does",
            "not overlap other objects anymore. This only concerns static objects, dynamic objects are ignored by the recovery module.",
            "",
            "When the recovery module is not activated, it is possible for the CCTs to go through static objects. By default, the recovery",
            "module is enabled.",
            "",
            "The recovery module currently works with all geometries except heightfields."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setOverlapRecoveryModule",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_setPreciseSweeps_mut",
      "comment": {
        "summary": {
          "b": [
            "Enables or disables the precise sweeps."
          ]
        },
        "additional": {
          "b": [
            "Precise sweeps are more accurate, but also potentially slower than regular sweeps.",
            "",
            "By default, precise sweeps are enabled."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPreciseSweeps",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_setPreventVerticalSlidingAgainstCeiling_mut",
      "comment": {
        "summary": {
          "b": [
            "Enables or disables vertical sliding against ceilings."
          ]
        },
        "additional": {
          "b": [
            "Geometry is seen as \"ceilings\" when the following condition is met:",
            "",
            "dot product(contact normal, up direction)",
            "<",
            "0.0f",
            "",
            "This flag controls whether characters should slide vertically along the geometry in that case.",
            "",
            "By default, sliding is allowed."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPreventVerticalSlidingAgainstCeiling",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxControllerManager_shiftOrigin_mut",
      "comment": {
        "summary": {
          "b": [
            "Shift the origin of the character controllers and obstacle objects by the specified vector."
          ]
        },
        "additional": {
          "b": [
            "The positions of all character controllers, obstacle objects and the corresponding data structures will get adjusted to reflect the shifted origin location",
            "(the shift vector will get subtracted from all character controller and obstacle object positions).",
            "",
            "It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysXCharacterKinematic accordingly.",
            "",
            "This call will not automatically shift the PhysX scene and its objects. You need to call PxScene::shiftOrigin() seperately to keep the systems in sync."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "shiftOrigin",
            "class_name": "PxControllerManager",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxControllerManager"
                }
              }
            }
          }
        },
        {
          "name": "shift",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateControllerManager",
      "comment": {
        "summary": {
          "b": [
            "Creates the controller manager."
          ]
        },
        "additional": {
          "b": [
            "The character controller is informed by #PxDeletionListener::onRelease() when actors or shapes are released, and updates its internal",
            "caches accordingly. If character controller movement or a call to #PxControllerManager::shiftOrigin() may overlap with actor/shape releases,",
            "internal data structures must be guarded against concurrent access.",
            "",
            "Locking guarantees thread safety in such scenarios.",
            "",
            "locking may result in significant slowdown for release of actors or shapes.",
            "",
            "By default, locking is disabled."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateControllerManager",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "lockingEnabled",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxControllerManager"
            }
          }
        }
      }
    },
    {
      "name": "PxDim3_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxDim3"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxDim3"
        }
      }
    },
    {
      "name": "PxSDFDesc_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSDFDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSDFDesc"
        }
      }
    },
    {
      "name": "PxSDFDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSDFDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSDFDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxConvexMeshDesc_new",
      "comment": {
        "summary": {
          "b": [
            "constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxConvexMeshDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxConvexMeshDesc"
        }
      }
    },
    {
      "name": "PxConvexMeshDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxConvexMeshDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxConvexMeshDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "True if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxConvexMeshDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTriangleMeshDesc_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor sets to default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxTriangleMeshDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTriangleMeshDesc"
        }
      }
    },
    {
      "name": "PxTriangleMeshDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "(re)sets the structure to the default."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxTriangleMeshDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxTriangleMeshDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTriangleMeshDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTetrahedronMeshDesc_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor to build an empty tetmesh description"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxTetrahedronMeshDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxTetrahedronMeshDesc"
        }
      }
    },
    {
      "name": "PxTetrahedronMeshDesc_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxTetrahedronMeshDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSoftBodySimulationDataDesc_new",
      "comment": {
        "summary": {
          "b": [
            "Constructor to build an empty simulation description"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxSoftBodySimulationDataDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxSoftBodySimulationDataDesc"
        }
      }
    },
    {
      "name": "PxSoftBodySimulationDataDesc_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxSoftBodySimulationDataDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSoftBodySimulationDataDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVH34MidphaseDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "Desc initialization to default value."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxBVH34MidphaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH34MidphaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVH34MidphaseDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBVH34MidphaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVH34MidphaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxMidphaseDesc_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxMidphaseDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxMidphaseDesc"
        }
      }
    },
    {
      "name": "PxMidphaseDesc_getType",
      "comment": {
        "summary": {
          "b": [
            "Returns type of midphase mesh structure."
          ]
        },
        "additional": {
          "b": [
            "PxMeshMidPhase::Enum"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getType",
            "class_name": "PxMidphaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMidphaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxMeshMidPhase",
          "cxx_qt": "PxMeshMidPhase::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxMidphaseDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "Initialize the midphase mesh structure descriptor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxMidphaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMidphaseDesc"
                }
              }
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxMeshMidPhase",
              "cxx_qt": "PxMeshMidPhase::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMidphaseDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxMidphaseDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMidphaseDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBVHDesc_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxBVHDesc"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxBVHDesc"
        }
      }
    },
    {
      "name": "PxBVHDesc_setToDefault_mut",
      "comment": {
        "summary": {
          "b": [
            "Initialize the BVH descriptor"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setToDefault",
            "class_name": "PxBVHDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHDesc"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBVHDesc_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the descriptor is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxBVHDesc",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBVHDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxCookingParams_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxCookingParams"
        }
      },
      "params": [
        {
          "name": "sc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxCookingParams"
        }
      }
    },
    {
      "name": "phys_PxGetStandaloneInsertionCallback",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetStandaloneInsertionCallback",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxInsertionCallback"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCookBVH",
      "comment": {
        "summary": {
          "b": [
            "Cooks a bounding volume hierarchy. The results are written to the stream."
          ]
        },
        "additional": {
          "b": [
            "PxCookBVH() allows a BVH description to be cooked into a binary stream",
            "suitable for loading and performing BVH detection at runtime.",
            "",
            "true on success."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCookBVH",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBVHDesc"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateBVH",
      "comment": {
        "summary": {
          "b": [
            "Cooks and creates a bounding volume hierarchy without going through a stream."
          ]
        },
        "additional": {
          "b": [
            "This method does the same as cookBVH, but the produced BVH is not stored",
            "into a stream but is either directly inserted in PxPhysics, or created as a standalone",
            "object. Use this method if you are unable to cook offline.",
            "",
            "PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()",
            "or PxCooking::getStandaloneInsertionCallback().",
            "",
            "PxBVH pointer on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateBVH",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBVHDesc"
                }
              }
            }
          }
        },
        {
          "name": "insertionCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInsertionCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBVH"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCookHeightField",
      "comment": {
        "summary": {
          "b": [
            "Cooks a heightfield. The results are written to the stream."
          ]
        },
        "additional": {
          "b": [
            "To create a heightfield object there is an option to precompute some of calculations done while loading the heightfield data.",
            "",
            "cookHeightField() allows a heightfield description to be cooked into a binary stream",
            "suitable for loading and performing collision detection at runtime.",
            "",
            "true on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCookHeightField",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldDesc"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateHeightField",
      "comment": {
        "summary": {
          "b": [
            "Cooks and creates a heightfield mesh and inserts it into PxPhysics."
          ]
        },
        "additional": {
          "b": [
            "PxHeightField pointer on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateHeightField",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldDesc"
                }
              }
            }
          }
        },
        {
          "name": "insertionCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInsertionCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxHeightField"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCookConvexMesh",
      "comment": {
        "summary": {
          "b": [
            "Cooks a convex mesh. The results are written to the stream."
          ]
        },
        "additional": {
          "b": [
            "To create a triangle mesh object it is necessary to first 'cook' the mesh data into",
            "a form which allows the SDK to perform efficient collision detection.",
            "",
            "cookConvexMesh() allows a mesh description to be cooked into a binary stream",
            "suitable for loading and performing collision detection at runtime.",
            "",
            "The number of vertices and the number of convex polygons in a cooked convex mesh is limited to 255.",
            "",
            "If those limits are exceeded in either the user-provided data or the final cooked mesh, an error is reported.",
            "",
            "true on success."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCookConvexMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshDesc"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "condition",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Enum": {
                  "name": "PxConvexMeshCookingResult",
                  "cxx_qt": "PxConvexMeshCookingResult::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateConvexMesh",
      "comment": {
        "summary": {
          "b": [
            "Cooks and creates a convex mesh without going through a stream."
          ]
        },
        "additional": {
          "b": [
            "This method does the same as cookConvexMesh, but the produced mesh is not stored",
            "into a stream but is either directly inserted in PxPhysics, or created as a standalone",
            "object. Use this method if you are unable to cook offline.",
            "",
            "PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()",
            "or PxCooking::getStandaloneInsertionCallback().",
            "",
            "PxConvexMesh pointer on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateConvexMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshDesc"
                }
              }
            }
          }
        },
        {
          "name": "insertionCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInsertionCallback"
                }
              }
            }
          }
        },
        {
          "name": "condition",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Enum": {
                  "name": "PxConvexMeshCookingResult",
                  "cxx_qt": "PxConvexMeshCookingResult::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxConvexMesh"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxValidateConvexMesh",
      "comment": {
        "summary": {
          "b": [
            "Verifies if the convex mesh is valid. Prints an error message for each inconsistency found."
          ]
        },
        "additional": {
          "b": [
            "The convex mesh descriptor must contain an already created convex mesh - the vertices, indices and polygons must be provided.",
            "",
            "This function should be used if PxConvexFlag::eDISABLE_MESH_VALIDATION is planned to be used in release builds.",
            "",
            "true if all the validity conditions hold, false otherwise."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxValidateConvexMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxComputeHullPolygons",
      "comment": {
        "summary": {
          "b": [
            "Computed hull polygons from given vertices and triangles. Polygons are needed for PxConvexMeshDesc rather than triangles."
          ]
        },
        "additional": {
          "b": [
            "Please note that the resulting polygons may have different number of vertices. Some vertices may be removed.",
            "The output vertices, indices and polygons must be used to construct a hull.",
            "",
            "The provided PxAllocatorCallback does allocate the out array's. It is the user responsibility to deallocated those",
            "array's.",
            "",
            "true on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeHullPolygons",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "mesh",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSimpleTriangleMesh"
                }
              }
            }
          }
        },
        {
          "name": "inCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        },
        {
          "name": "nbVerts",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "vertices",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "Vec3"
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbIndices",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "indices",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Builtin": "UInt"
                  }
                }
              }
            }
          }
        },
        {
          "name": "nbPolygons",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "hullPolygons",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxHullPolygon"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxValidateTriangleMesh",
      "comment": {
        "summary": {
          "b": [
            "Verifies if the triangle mesh is valid. Prints an error message for each inconsistency found."
          ]
        },
        "additional": {
          "b": [
            "The following conditions are true for a valid triangle mesh:",
            "1. There are no duplicate vertices (within specified vertexWeldTolerance. See PxCookingParams::meshWeldTolerance)",
            "2. There are no large triangles (within specified PxTolerancesScale.)",
            "",
            "true if all the validity conditions hold, false otherwise."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxValidateTriangleMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshDesc"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateTriangleMesh",
      "comment": {
        "summary": {
          "b": [
            "Cooks and creates a triangle mesh without going through a stream."
          ]
        },
        "additional": {
          "b": [
            "This method does the same as cookTriangleMesh, but the produced mesh is not stored",
            "into a stream but is either directly inserted in PxPhysics, or created as a standalone",
            "object. Use this method if you are unable to cook offline.",
            "",
            "PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()",
            "or PxCooking::getStandaloneInsertionCallback().",
            "",
            "PxTriangleMesh pointer on success."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateTriangleMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshDesc"
                }
              }
            }
          }
        },
        {
          "name": "insertionCallback",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInsertionCallback"
                }
              }
            }
          }
        },
        {
          "name": "condition",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Enum": {
                  "name": "PxTriangleMeshCookingResult",
                  "cxx_qt": "PxTriangleMeshCookingResult::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTriangleMesh"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCookTriangleMesh",
      "comment": {
        "summary": {
          "b": [
            "Cooks a triangle mesh. The results are written to the stream."
          ]
        },
        "additional": {
          "b": [
            "To create a triangle mesh object it is necessary to first 'cook' the mesh data into",
            "a form which allows the SDK to perform efficient collision detection.",
            "",
            "PxCookTriangleMesh() allows a mesh description to be cooked into a binary stream",
            "suitable for loading and performing collision detection at runtime.",
            "",
            "true on success"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCookTriangleMesh",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "params",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCookingParams"
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshDesc"
                }
              }
            }
          }
        },
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "condition",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Enum": {
                  "name": "PxTriangleMeshCookingResult",
                  "cxx_qt": "PxTriangleMeshCookingResult::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxDefaultMemoryOutputStream_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxDefaultMemoryOutputStream"
        }
      },
      "params": [
        {
          "name": "allocator",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultMemoryOutputStream"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultMemoryOutputStream_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxDefaultMemoryOutputStream"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultMemoryOutputStream_write_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "write",
            "class_name": "PxDefaultMemoryOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultMemoryOutputStream_getSize",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSize",
            "class_name": "PxDefaultMemoryOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultMemoryOutputStream_getData",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getData",
            "class_name": "PxDefaultMemoryOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UChar"
          }
        }
      }
    },
    {
      "name": "PxDefaultMemoryInputData_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxDefaultMemoryInputData"
        }
      },
      "params": [
        {
          "name": "data",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        },
        {
          "name": "length",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultMemoryInputData"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultMemoryInputData_read_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "read",
            "class_name": "PxDefaultMemoryInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryInputData"
                }
              }
            }
          }
        },
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultMemoryInputData_getLength",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLength",
            "class_name": "PxDefaultMemoryInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultMemoryInputData_seek_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "seek",
            "class_name": "PxDefaultMemoryInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryInputData"
                }
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultMemoryInputData_tell",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tell",
            "class_name": "PxDefaultMemoryInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultMemoryInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultFileOutputStream_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxDefaultFileOutputStream"
        }
      },
      "params": [
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultFileOutputStream"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultFileOutputStream_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxDefaultFileOutputStream"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultFileOutputStream_write_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "write",
            "class_name": "PxDefaultFileOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "src",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultFileOutputStream_isValid_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxDefaultFileOutputStream",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxDefaultFileInputData_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxDefaultFileInputData"
        }
      },
      "params": [
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultFileInputData"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultFileInputData_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxDefaultFileInputData"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultFileInputData_read_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "read",
            "class_name": "PxDefaultFileInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        },
        {
          "name": "dest",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultFileInputData_seek_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "seek",
            "class_name": "PxDefaultFileInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultFileInputData_tell",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "tell",
            "class_name": "PxDefaultFileInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultFileInputData_getLength",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLength",
            "class_name": "PxDefaultFileInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxDefaultFileInputData_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxDefaultFileInputData",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultFileInputData"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_platformAlignedAlloc",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "platformAlignedAlloc",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "phys_platformAlignedFree",
      "comment": null,
      "ext": {
        "None": {
          "Func": {
            "func_name": "platformAlignedFree",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultAllocator_allocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "allocate",
            "class_name": "PxDefaultAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultAllocator"
                }
              }
            }
          }
        },
        {
          "name": "size",
          "kind": {
            "Builtin": "USize"
          }
        },
        {
          "name": "anon_param1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "anon_param2",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "anon_param3",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Void"
          }
        }
      }
    },
    {
      "name": "PxDefaultAllocator_deallocate_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "deallocate",
            "class_name": "PxDefaultAllocator",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultAllocator"
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultAllocator_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxDefaultAllocator"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultAllocator"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_setActors_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the actors for this joint."
          ]
        },
        "additional": {
          "b": [
            "An actor may be NULL to indicate the world frame. At most one of the actors may be NULL."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setActors",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getActors",
      "comment": {
        "summary": {
          "b": [
            "Get the actors for this joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getActors",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxRigidActor"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_setLocalPose_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the joint local pose for an actor."
          ]
        },
        "additional": {
          "b": [
            "This is the relative pose which locates the joint frame relative to the actor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLocalPose",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Enum": {
              "name": "PxJointActorIndex",
              "cxx_qt": "PxJointActorIndex::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "localPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getLocalPose",
      "comment": {
        "summary": {
          "b": [
            "get the joint local pose for an actor."
          ]
        },
        "additional": {
          "b": [
            "return the local pose for this joint"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLocalPose",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Enum": {
              "name": "PxJointActorIndex",
              "cxx_qt": "PxJointActorIndex::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxJoint_getRelativeTransform",
      "comment": {
        "summary": {
          "b": [
            "get the relative pose for this joint"
          ]
        },
        "additional": {
          "b": [
            "This function returns the pose of the joint frame of actor1 relative to actor0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRelativeTransform",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxJoint_getRelativeLinearVelocity",
      "comment": {
        "summary": {
          "b": [
            "get the relative linear velocity of the joint"
          ]
        },
        "additional": {
          "b": [
            "This function returns the linear velocity of the origin of the constraint frame of actor1, relative to the origin of the constraint",
            "frame of actor0. The value is returned in the constraint frame of actor0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRelativeLinearVelocity",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxJoint_getRelativeAngularVelocity",
      "comment": {
        "summary": {
          "b": [
            "get the relative angular velocity of the joint"
          ]
        },
        "additional": {
          "b": [
            "This function returns the angular velocity of  actor1 relative to actor0. The value is returned in the constraint frame of actor0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRelativeAngularVelocity",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxJoint_setBreakForce_mut",
      "comment": {
        "summary": {
          "b": [
            "set the break force for this joint."
          ]
        },
        "additional": {
          "b": [
            "if the constraint force or torque on the joint exceeds the specified values, the joint will break,",
            "at which point it will not constrain the two actors and the flag PxConstraintFlag::eBROKEN will be set. The",
            "force and torque are measured in the joint frame of the first actor"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBreakForce",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "torque",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getBreakForce",
      "comment": {
        "summary": {
          "b": [
            "get the break force for this joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBreakForce",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "torque",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_setConstraintFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "set the constraint flags for this joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setConstraintFlags",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxConstraintFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_setConstraintFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "set a constraint flags for this joint to a specified value."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setConstraintFlag",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxConstraintFlag",
              "cxx_qt": "PxConstraintFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getConstraintFlags",
      "comment": {
        "summary": {
          "b": [
            "get the constraint flags for this joint."
          ]
        },
        "additional": {
          "b": [
            "the constraint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConstraintFlags",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxConstraintFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxJoint_setInvMassScale0_mut",
      "comment": {
        "summary": {
          "b": [
            "set the inverse mass scale for actor0."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvMassScale0",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "invMassScale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getInvMassScale0",
      "comment": {
        "summary": {
          "b": [
            "get the inverse mass scale for actor0."
          ]
        },
        "additional": {
          "b": [
            "inverse mass scale for actor0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale0",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxJoint_setInvInertiaScale0_mut",
      "comment": {
        "summary": {
          "b": [
            "set the inverse inertia scale for actor0."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvInertiaScale0",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "invInertiaScale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getInvInertiaScale0",
      "comment": {
        "summary": {
          "b": [
            "get the inverse inertia scale for actor0."
          ]
        },
        "additional": {
          "b": [
            "inverse inertia scale for actor0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale0",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxJoint_setInvMassScale1_mut",
      "comment": {
        "summary": {
          "b": [
            "set the inverse mass scale for actor1."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvMassScale1",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "invMassScale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getInvMassScale1",
      "comment": {
        "summary": {
          "b": [
            "get the inverse mass scale for actor1."
          ]
        },
        "additional": {
          "b": [
            "inverse mass scale for actor1"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvMassScale1",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxJoint_setInvInertiaScale1_mut",
      "comment": {
        "summary": {
          "b": [
            "set the inverse inertia scale for actor1."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setInvInertiaScale1",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "invInertiaScale",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getInvInertiaScale1",
      "comment": {
        "summary": {
          "b": [
            "get the inverse inertia scale for actor1."
          ]
        },
        "additional": {
          "b": [
            "inverse inertia scale for actor1"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInvInertiaScale1",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxJoint_getConstraint",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PxConstraint corresponding to this joint."
          ]
        },
        "additional": {
          "b": [
            "This can be used to determine, among other things, the force applied at the joint.",
            "",
            "the constraint"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConstraint",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxConstraint"
            }
          }
        }
      }
    },
    {
      "name": "PxJoint_setName_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets a name string for the object that can be retrieved with getName()."
          ]
        },
        "additional": {
          "b": [
            "This is for debugging and is not used by the SDK. The string is not copied by the SDK,",
            "only the pointer is stored."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setName",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getName",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the name string set with setName()."
          ]
        },
        "additional": {
          "b": [
            "Name string associated with object."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getName",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxJoint_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the joint."
          ]
        },
        "additional": {
          "b": [
            "This call does not wake up the connected rigid bodies."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJoint_getScene",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the scene which this joint belongs to."
          ]
        },
        "additional": {
          "b": [
            "Owner Scene. NULL if not part of a scene."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getScene",
            "class_name": "PxJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxScene"
            }
          }
        }
      }
    },
    {
      "name": "PxJoint_getBinaryMetaData",
      "comment": {
        "summary": {
          "b": [
            "Put class meta data in stream, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getBinaryMetaData",
            "class_name": "PxJoint",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "stream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSpring_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxSpring"
        }
      },
      "params": [
        {
          "name": "stiffness_",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "damping_",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxSpring"
        }
      }
    },
    {
      "name": "phys_PxSetJointGlobalFrame",
      "comment": {
        "summary": {
          "b": [
            "Helper function to setup a joint's global frame"
          ]
        },
        "additional": {
          "b": [
            "This replaces the following functions from previous SDK versions:",
            "",
            "void NxJointDesc::setGlobalAnchor(const NxVec3",
            "&",
            "wsAnchor);",
            "void NxJointDesc::setGlobalAxis(const NxVec3",
            "&",
            "wsAxis);",
            "",
            "The function sets the joint's localPose using world-space input parameters."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetJointGlobalFrame",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "joint",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxJoint"
                }
              }
            }
          }
        },
        {
          "name": "wsAnchor",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "wsAxis",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxDistanceJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a distance Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDistanceJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDistanceJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxDistanceJoint_getDistance",
      "comment": {
        "summary": {
          "b": [
            "Return the current distance of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setMinDistance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the allowed minimum distance for the joint."
          ]
        },
        "additional": {
          "b": [
            "The minimum distance must be no more than the maximum distance",
            "",
            "Default",
            "0.0f",
            "Range",
            "[0, PX_MAX_F32)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMinDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getMinDistance",
      "comment": {
        "summary": {
          "b": [
            "Get the allowed minimum distance for the joint."
          ]
        },
        "additional": {
          "b": [
            "the allowed minimum distance"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMinDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setMaxDistance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the allowed maximum distance for the joint."
          ]
        },
        "additional": {
          "b": [
            "The maximum distance must be no less than the minimum distance.",
            "",
            "Default",
            "0.0f",
            "Range",
            "[0, PX_MAX_F32)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMaxDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getMaxDistance",
      "comment": {
        "summary": {
          "b": [
            "Get the allowed maximum distance for the joint."
          ]
        },
        "additional": {
          "b": [
            "the allowed maximum distance"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMaxDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setTolerance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the error tolerance of the joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTolerance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getTolerance",
      "comment": {
        "summary": {
          "b": [
            "Get the error tolerance of the joint."
          ]
        },
        "additional": {
          "b": [
            "the distance beyond the joint's [min, max] range before the joint becomes active.",
            "",
            "Default",
            "0.25f * PxTolerancesScale::length",
            "Range",
            "(0, PX_MAX_F32)",
            "",
            "This value should be used to ensure that if the minimum distance is zero and the",
            "spring function is in use, the rest length of the spring is non-zero."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTolerance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setStiffness_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the strength of the joint spring."
          ]
        },
        "additional": {
          "b": [
            "The spring is used if enabled, and the distance exceeds the range [min-error, max+error].",
            "",
            "Default",
            "0.0f",
            "Range",
            "[0, PX_MAX_F32)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setStiffness",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "stiffness",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getStiffness",
      "comment": {
        "summary": {
          "b": [
            "Get the strength of the joint spring."
          ]
        },
        "additional": {
          "b": [
            "stiffness the spring strength of the joint"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getStiffness",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setDamping_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the damping of the joint spring."
          ]
        },
        "additional": {
          "b": [
            "The spring is used if enabled, and the distance exceeds the range [min-error, max+error].",
            "",
            "Default",
            "0.0f",
            "Range",
            "[0, PX_MAX_F32)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDamping",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "damping",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getDamping",
      "comment": {
        "summary": {
          "b": [
            "Get the damping of the joint spring."
          ]
        },
        "additional": {
          "b": [
            "the degree of damping of the joint spring of the joint"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDamping",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setContactDistance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the contact distance for the min",
            "&",
            "max distance limits."
          ]
        },
        "additional": {
          "b": [
            "This is similar to the PxJointLimitParameters::contactDistance parameter for regular limits.",
            "",
            "The two most common values are 0 and infinite. Infinite means the internal constraints are",
            "always created, resulting in the best simulation quality but slower performance. Zero means",
            "the internal constraints are only created when the limits are violated, resulting in best",
            "performance but worse simulation quality.",
            "",
            "Default",
            "0.0f",
            "Range",
            "[0, PX_MAX_F32)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "contactDistance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getContactDistance",
      "comment": {
        "summary": {
          "b": [
            "Get the contact distance."
          ]
        },
        "additional": {
          "b": [
            "the contact distance"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactDistance",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxDistanceJoint_setDistanceJointFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the flags specific to the Distance Joint."
          ]
        },
        "additional": {
          "b": [
            "Default",
            "PxDistanceJointFlag::eMAX_DISTANCE_ENABLED"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDistanceJointFlags",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxDistanceJointFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_setDistanceJointFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Set a single flag specific to a Distance Joint to true or false."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDistanceJointFlag",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxDistanceJointFlag",
              "cxx_qt": "PxDistanceJointFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDistanceJoint_getDistanceJointFlags",
      "comment": {
        "summary": {
          "b": [
            "Get the flags specific to the Distance Joint."
          ]
        },
        "additional": {
          "b": [
            "the joint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDistanceJointFlags",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxDistanceJointFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxDistanceJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxDistanceJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxDistanceJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDistanceJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxContactJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a distance Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxContactJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxContactJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxJacobianRow_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxJacobianRow"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxJacobianRow"
        }
      }
    },
    {
      "name": "PxJacobianRow_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxJacobianRow"
        }
      },
      "params": [
        {
          "name": "lin0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "lin1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "ang0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "ang1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJacobianRow"
        }
      }
    },
    {
      "name": "PxContactJoint_setContact_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the current contact of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContact",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "contact",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_setContactNormal_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the current contact normal of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setContactNormal",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "contactNormal",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_setPenetration_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the current penetration of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPenetration",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "penetration",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_getContact",
      "comment": {
        "summary": {
          "b": [
            "Return the current contact of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContact",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxContactJoint_getContactNormal",
      "comment": {
        "summary": {
          "b": [
            "Return the current contact normal of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getContactNormal",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxContactJoint_getPenetration",
      "comment": {
        "summary": {
          "b": [
            "Return the current penetration value of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPenetration",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactJoint_getRestitution",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRestitution",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactJoint_setRestitution_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRestitution",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "restitution",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_getBounceThreshold",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getBounceThreshold",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxContactJoint_setBounceThreshold_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setBounceThreshold",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "bounceThreshold",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxContactJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxContactJoint_computeJacobians",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "computeJacobians",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        },
        {
          "name": "jacobian",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJacobianRow"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxContactJoint_getNbJacobianRows",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbJacobianRows",
            "class_name": "PxContactJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxContactJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxFixedJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a fixed joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxFixedJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxFixedJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxFixedJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxFixedJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxFixedJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxFixedJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxJointLimitParameters_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxJointLimitParameters"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxJointLimitParameters"
            }
          }
        }
      }
    },
    {
      "name": "PxJointLimitParameters_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the current settings are valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointLimitParameters",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitParameters"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLimitParameters_isSoft",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isSoft",
            "class_name": "PxJointLimitParameters",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitParameters"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLinearLimit_new",
      "comment": {
        "summary": {
          "b": [
            "construct a linear hard limit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLinearLimit"
        }
      },
      "params": [
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        },
        {
          "name": "extent",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "contactDist_deprecated",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimit"
        }
      }
    },
    {
      "name": "PxJointLinearLimit_new_1",
      "comment": {
        "summary": {
          "b": [
            "construct a linear soft limit"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLinearLimit"
        }
      },
      "params": [
        {
          "name": "extent",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "spring",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSpring"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimit"
        }
      }
    },
    {
      "name": "PxJointLinearLimit_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the limit is valid"
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointLinearLimit",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimit"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLinearLimit_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxJointLinearLimit"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJointLinearLimitPair_new",
      "comment": {
        "summary": {
          "b": [
            "Construct a linear hard limit pair. The lower distance value must be less than the upper distance value."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLinearLimitPair"
        }
      },
      "params": [
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTolerancesScale"
                }
              }
            }
          }
        },
        {
          "name": "lowerLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "upperLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "contactDist_deprecated",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimitPair"
        }
      }
    },
    {
      "name": "PxJointLinearLimitPair_new_1",
      "comment": {
        "summary": {
          "b": [
            "construct a linear soft limit pair"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLinearLimitPair"
        }
      },
      "params": [
        {
          "name": "lowerLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "upperLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "spring",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSpring"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimitPair"
        }
      }
    },
    {
      "name": "PxJointLinearLimitPair_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the limit is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointLinearLimitPair",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLinearLimitPair_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxJointLinearLimitPair"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJointAngularLimitPair_new",
      "comment": {
        "summary": {
          "b": [
            "construct an angular hard limit pair."
          ]
        },
        "additional": {
          "b": [
            "The lower value must be less than the upper value."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointAngularLimitPair"
        }
      },
      "params": [
        {
          "name": "lowerLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "upperLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "contactDist_deprecated",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointAngularLimitPair"
        }
      }
    },
    {
      "name": "PxJointAngularLimitPair_new_1",
      "comment": {
        "summary": {
          "b": [
            "construct an angular soft limit pair."
          ]
        },
        "additional": {
          "b": [
            "The lower value must be less than the upper value."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointAngularLimitPair"
        }
      },
      "params": [
        {
          "name": "lowerLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "upperLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "spring",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSpring"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointAngularLimitPair"
        }
      }
    },
    {
      "name": "PxJointAngularLimitPair_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the limit is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointAngularLimitPair",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointAngularLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointAngularLimitPair_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxJointAngularLimitPair"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointAngularLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJointLimitCone_new",
      "comment": {
        "summary": {
          "b": [
            "Construct a cone hard limit."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLimitCone"
        }
      },
      "params": [
        {
          "name": "yLimitAngle",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngle",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "contactDist_deprecated",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitCone"
        }
      }
    },
    {
      "name": "PxJointLimitCone_new_1",
      "comment": {
        "summary": {
          "b": [
            "Construct a cone soft limit."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLimitCone"
        }
      },
      "params": [
        {
          "name": "yLimitAngle",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngle",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "spring",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSpring"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitCone"
        }
      }
    },
    {
      "name": "PxJointLimitCone_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the limit is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointLimitCone",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitCone"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLimitCone_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxJointLimitCone"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitCone"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxJointLimitPyramid_new",
      "comment": {
        "summary": {
          "b": [
            "Construct a pyramid hard limit."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLimitPyramid"
        }
      },
      "params": [
        {
          "name": "yLimitAngleMin",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "yLimitAngleMax",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngleMin",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngleMax",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "contactDist_deprecated",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitPyramid"
        }
      }
    },
    {
      "name": "PxJointLimitPyramid_new_1",
      "comment": {
        "summary": {
          "b": [
            "Construct a pyramid soft limit."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxJointLimitPyramid"
        }
      },
      "params": [
        {
          "name": "yLimitAngleMin",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "yLimitAngleMax",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngleMin",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "zLimitAngleMax",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "spring",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSpring"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitPyramid"
        }
      }
    },
    {
      "name": "PxJointLimitPyramid_isValid",
      "comment": {
        "summary": {
          "b": [
            "Returns true if the limit is valid."
          ]
        },
        "additional": {
          "b": [
            "true if the current settings are valid"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxJointLimitPyramid",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitPyramid"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxJointLimitPyramid_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxJointLimitPyramid"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitPyramid"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxPrismaticJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a prismatic joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxPrismaticJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPrismaticJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxPrismaticJoint_getPosition",
      "comment": {
        "summary": {
          "b": [
            "returns the displacement of the joint along its axis."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPosition",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxPrismaticJoint_getVelocity",
      "comment": {
        "summary": {
          "b": [
            "returns the velocity of the joint along its axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVelocity",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxPrismaticJoint_setLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "sets the joint limit  parameters."
          ]
        },
        "additional": {
          "b": [
            "The limit range is [-PX_MAX_F32, PX_MAX_F32], but note that the width of the limit (upper-lower) must also be",
            "a valid float."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimit",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        },
        {
          "name": "anon_param0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPrismaticJoint_getLimit",
      "comment": {
        "summary": {
          "b": [
            "gets the joint limit  parameters."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimit",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimitPair"
        }
      }
    },
    {
      "name": "PxPrismaticJoint_setPrismaticJointFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the flags specific to the Prismatic Joint."
          ]
        },
        "additional": {
          "b": [
            "Default",
            "PxPrismaticJointFlags(0)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPrismaticJointFlags",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxPrismaticJointFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPrismaticJoint_setPrismaticJointFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Set a single flag specific to a Prismatic Joint to true or false."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPrismaticJointFlag",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxPrismaticJointFlag",
              "cxx_qt": "PxPrismaticJointFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPrismaticJoint_getPrismaticJointFlags",
      "comment": {
        "summary": {
          "b": [
            "Get the flags specific to the Prismatic Joint."
          ]
        },
        "additional": {
          "b": [
            "the joint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPrismaticJointFlags",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxPrismaticJointFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxPrismaticJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxPrismaticJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxPrismaticJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPrismaticJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxRevoluteJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a revolute joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxRevoluteJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRevoluteJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxRevoluteJoint_getAngle",
      "comment": {
        "summary": {
          "b": [
            "return the angle of the joint, in the range (-2*Pi, 2*Pi]"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getAngle",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRevoluteJoint_getVelocity",
      "comment": {
        "summary": {
          "b": [
            "return the velocity of the joint"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getVelocity",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRevoluteJoint_setLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "set the joint limit parameters."
          ]
        },
        "additional": {
          "b": [
            "The limit is activated using the flag PxRevoluteJointFlag::eLIMIT_ENABLED",
            "",
            "The limit angle range is (-2*Pi, 2*Pi)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimit",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "limits",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointAngularLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_getLimit",
      "comment": {
        "summary": {
          "b": [
            "get the joint limit parameters."
          ]
        },
        "additional": {
          "b": [
            "the joint limit parameters"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimit",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointAngularLimitPair"
        }
      }
    },
    {
      "name": "PxRevoluteJoint_setDriveVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "set the target velocity for the drive model."
          ]
        },
        "additional": {
          "b": [
            "The motor will only be able to reach this velocity if the maxForce is sufficiently large.",
            "If the joint is spinning faster than this velocity, the motor will actually try to brake",
            "(see PxRevoluteJointFlag::eDRIVE_FREESPIN.)",
            "",
            "The sign of this variable determines the rotation direction, with positive values going",
            "the same way as positive joint angles. Setting a very large target velocity may cause",
            "undesirable results.",
            "",
            "Range:",
            "(-PX_MAX_F32, PX_MAX_F32)",
            "Default:",
            "0.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveVelocity",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "velocity",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_getDriveVelocity",
      "comment": {
        "summary": {
          "b": [
            "gets the target velocity for the drive model."
          ]
        },
        "additional": {
          "b": [
            "the drive target velocity"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveVelocity",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRevoluteJoint_setDriveForceLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "sets the maximum torque the drive can exert."
          ]
        },
        "additional": {
          "b": [
            "The value set here may be used either as an impulse limit or a force limit, depending on the flag PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES",
            "",
            "Range:",
            "[0, PX_MAX_F32)",
            "Default:",
            "PX_MAX_F32"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveForceLimit",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_getDriveForceLimit",
      "comment": {
        "summary": {
          "b": [
            "gets the maximum torque the drive can exert."
          ]
        },
        "additional": {
          "b": [
            "the torque limit"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveForceLimit",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRevoluteJoint_setDriveGearRatio_mut",
      "comment": {
        "summary": {
          "b": [
            "sets the gear ratio for the drive."
          ]
        },
        "additional": {
          "b": [
            "When setting up the drive constraint, the velocity of the first actor is scaled by this value, and its response to drive torque is scaled down.",
            "So if the drive target velocity is zero, the second actor will be driven to the velocity of the first scaled by the gear ratio",
            "",
            "Range:",
            "[0, PX_MAX_F32)",
            "Default:",
            "1.0"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveGearRatio",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "ratio",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_getDriveGearRatio",
      "comment": {
        "summary": {
          "b": [
            "gets the gear ratio."
          ]
        },
        "additional": {
          "b": [
            "the drive gear ratio"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveGearRatio",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRevoluteJoint_setRevoluteJointFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "sets the flags specific to the Revolute Joint."
          ]
        },
        "additional": {
          "b": [
            "Default",
            "PxRevoluteJointFlags(0)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRevoluteJointFlags",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxRevoluteJointFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_setRevoluteJointFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "sets a single flag specific to a Revolute Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRevoluteJointFlag",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxRevoluteJointFlag",
              "cxx_qt": "PxRevoluteJointFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRevoluteJoint_getRevoluteJointFlags",
      "comment": {
        "summary": {
          "b": [
            "gets the flags specific to the Revolute Joint."
          ]
        },
        "additional": {
          "b": [
            "the joint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRevoluteJointFlags",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxRevoluteJointFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxRevoluteJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxRevoluteJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxRevoluteJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRevoluteJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxSphericalJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a spherical joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSphericalJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSphericalJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxSphericalJoint_getLimitCone",
      "comment": {
        "summary": {
          "b": [
            "Set the limit cone."
          ]
        },
        "additional": {
          "b": [
            "If enabled, the limit cone will constrain the angular movement of the joint to lie",
            "within an elliptical cone.",
            "",
            "the limit cone"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLimitCone",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitCone"
        }
      }
    },
    {
      "name": "PxSphericalJoint_setLimitCone_mut",
      "comment": {
        "summary": {
          "b": [
            "Get the limit cone."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLimitCone",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitCone"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSphericalJoint_getSwingYAngle",
      "comment": {
        "summary": {
          "b": [
            "get the swing angle of the joint from the Y axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSwingYAngle",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxSphericalJoint_getSwingZAngle",
      "comment": {
        "summary": {
          "b": [
            "get the swing angle of the joint from the Z axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSwingZAngle",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxSphericalJoint_setSphericalJointFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the flags specific to the Spherical Joint."
          ]
        },
        "additional": {
          "b": [
            "Default",
            "PxSphericalJointFlags(0)"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSphericalJointFlags",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxSphericalJointFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSphericalJoint_setSphericalJointFlag_mut",
      "comment": {
        "summary": {
          "b": [
            "Set a single flag specific to a Spherical Joint to true or false."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSphericalJointFlag",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        },
        {
          "name": "flag",
          "kind": {
            "Enum": {
              "name": "PxSphericalJointFlag",
              "cxx_qt": "PxSphericalJointFlag::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "value",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSphericalJoint_getSphericalJointFlags",
      "comment": {
        "summary": {
          "b": [
            "Get the flags specific to the Spherical Joint."
          ]
        },
        "additional": {
          "b": [
            "the joint flags"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSphericalJointFlags",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxSphericalJointFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "PxSphericalJoint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxSphericalJoint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxSphericalJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSphericalJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxD6JointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a D6 joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxD6JointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxD6Joint"
            }
          }
        }
      }
    },
    {
      "name": "PxD6JointDrive_new",
      "comment": {
        "summary": {
          "b": [
            "default constructor for PxD6JointDrive."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxD6JointDrive"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxD6JointDrive"
        }
      }
    },
    {
      "name": "PxD6JointDrive_new_1",
      "comment": {
        "summary": {
          "b": [
            "constructor a PxD6JointDrive."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxD6JointDrive"
        }
      },
      "params": [
        {
          "name": "driveStiffness",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "driveDamping",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "driveForceLimit",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "isAcceleration",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxD6JointDrive"
        }
      }
    },
    {
      "name": "PxD6JointDrive_isValid",
      "comment": {
        "summary": {
          "b": [
            "returns true if the drive is valid"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxD6JointDrive",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6JointDrive"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxD6Joint_setMotion_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the motion type around the specified axis."
          ]
        },
        "additional": {
          "b": [
            "Each axis may independently specify that the degree of freedom is locked (blocking relative movement",
            "along or around this axis), limited by the corresponding limit, or free.",
            "",
            "Default:",
            "all degrees of freedom are locked"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setMotion",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxD6Axis",
              "cxx_qt": "PxD6Axis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "type",
          "kind": {
            "Enum": {
              "name": "PxD6Motion",
              "cxx_qt": "PxD6Motion::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getMotion",
      "comment": {
        "summary": {
          "b": [
            "Get the motion type around the specified axis."
          ]
        },
        "additional": {
          "b": [
            "the motion type around the specified axis"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getMotion",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxD6Axis",
              "cxx_qt": "PxD6Axis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Enum": {
          "name": "PxD6Motion",
          "cxx_qt": "PxD6Motion::Enum",
          "repr": "Int"
        }
      }
    },
    {
      "name": "PxD6Joint_getTwistAngle",
      "comment": {
        "summary": {
          "b": [
            "get the twist angle of the joint, in the range (-2*Pi, 2*Pi]"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTwistAngle",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxD6Joint_getSwingYAngle",
      "comment": {
        "summary": {
          "b": [
            "get the swing angle of the joint from the Y axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSwingYAngle",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxD6Joint_getSwingZAngle",
      "comment": {
        "summary": {
          "b": [
            "get the swing angle of the joint from the Z axis"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSwingZAngle",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxD6Joint_setDistanceLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the distance limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "A single limit constraints all linear limited degrees of freedom, forming a linear, circular",
            "or spherical constraint on motion depending on the number of limited degrees. This is similar",
            "to a distance limit."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDistanceLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimit"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getDistanceLimit",
      "comment": {
        "summary": {
          "b": [
            "Get the distance limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "the distance limit structure"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDistanceLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimit"
        }
      }
    },
    {
      "name": "PxD6Joint_setLinearLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the linear limit for a given linear axis."
          ]
        },
        "additional": {
          "b": [
            "This function extends the previous setDistanceLimit call with the following features:",
            "- there can be a different limit for each linear axis",
            "- each limit is defined by two values, i.e. it can now be asymmetric",
            "",
            "This can be used to create prismatic joints similar to PxPrismaticJoint, or point-in-quad joints,",
            "or point-in-box joints."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setLinearLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxD6Axis",
              "cxx_qt": "PxD6Axis::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLinearLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getLinearLimit",
      "comment": {
        "summary": {
          "b": [
            "Get the linear limit for a given linear axis."
          ]
        },
        "additional": {
          "b": [
            "the linear limit pair structure from desired axis"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getLinearLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "axis",
          "kind": {
            "Enum": {
              "name": "PxD6Axis",
              "cxx_qt": "PxD6Axis::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLinearLimitPair"
        }
      }
    },
    {
      "name": "PxD6Joint_setTwistLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the twist limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "The twist limit controls the range of motion around the twist axis.",
            "",
            "The limit angle range is (-2*Pi, 2*Pi)."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setTwistLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointAngularLimitPair"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getTwistLimit",
      "comment": {
        "summary": {
          "b": [
            "Get the twist limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "the twist limit structure"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTwistLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointAngularLimitPair"
        }
      }
    },
    {
      "name": "PxD6Joint_setSwingLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the swing cone limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "The cone limit is used if either or both swing axes are limited. The extents are",
            "symmetrical and measured in the frame of the parent. If only one swing degree of freedom",
            "is limited, the corresponding value from the cone limit defines the limit range."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSwingLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitCone"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getSwingLimit",
      "comment": {
        "summary": {
          "b": [
            "Get the cone limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "the swing limit structure"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getSwingLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitCone"
        }
      }
    },
    {
      "name": "PxD6Joint_setPyramidSwingLimit_mut",
      "comment": {
        "summary": {
          "b": [
            "Set a pyramidal swing limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "The pyramid limits will only be used in the following cases:",
            "- both swing Y and Z are limited. The limit shape is then a pyramid.",
            "- Y is limited and Z is locked, or vice versa. The limit shape is an asymmetric angular section, similar to",
            "what is supported for the twist axis.",
            "The remaining cases (Y limited and Z is free, or vice versa) are not supported."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setPyramidSwingLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "limit",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxJointLimitPyramid"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getPyramidSwingLimit",
      "comment": {
        "summary": {
          "b": [
            "Get the pyramidal swing limit for the joint."
          ]
        },
        "additional": {
          "b": [
            "the swing limit structure"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPyramidSwingLimit",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxJointLimitPyramid"
        }
      }
    },
    {
      "name": "PxD6Joint_setDrive_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the drive parameters for the specified drive type."
          ]
        },
        "additional": {
          "b": [
            "Default",
            "The default drive spring and damping values are zero, the force limit is zero, and no flags are set."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDrive",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Enum": {
              "name": "PxD6Drive",
              "cxx_qt": "PxD6Drive::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "drive",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxD6JointDrive"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getDrive",
      "comment": {
        "summary": {
          "b": [
            "Get the drive parameters for the specified drive type."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDrive",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Enum": {
              "name": "PxD6Drive",
              "cxx_qt": "PxD6Drive::Enum",
              "repr": "Int"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxD6JointDrive"
        }
      }
    },
    {
      "name": "PxD6Joint_setDrivePosition_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the drive goal pose"
          ]
        },
        "additional": {
          "b": [
            "The goal is relative to the constraint frame of actor[0]",
            "",
            "Default",
            "the identity transform"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDrivePosition",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getDrivePosition",
      "comment": {
        "summary": {
          "b": [
            "Get the drive goal pose."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDrivePosition",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxD6Joint_setDriveVelocity_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the target goal velocity for drive."
          ]
        },
        "additional": {
          "b": [
            "The velocity is measured in the constraint frame of actor[0]"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setDriveVelocity",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angular",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "autowake",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getDriveVelocity",
      "comment": {
        "summary": {
          "b": [
            "Get the target goal velocity for joint drive."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getDriveVelocity",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "linear",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angular",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_setProjectionLinearTolerance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the linear tolerance threshold for projection. Projection is enabled if PxConstraintFlag::ePROJECTION",
            "is set for the joint."
          ]
        },
        "additional": {
          "b": [
            "If the joint separates by more than this distance along its locked degrees of freedom, the solver",
            "will move the bodies to close the distance.",
            "",
            "Setting a very small tolerance may result in simulation jitter or other artifacts.",
            "",
            "Sometimes it is not possible to project (for example when the joints form a cycle).",
            "",
            "Range:",
            "[0, PX_MAX_F32)",
            "Default:",
            "1e10f"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setProjectionLinearTolerance",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getProjectionLinearTolerance",
      "comment": {
        "summary": {
          "b": [
            "Get the linear tolerance threshold for projection."
          ]
        },
        "additional": {
          "b": [
            "the linear tolerance threshold"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getProjectionLinearTolerance",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxD6Joint_setProjectionAngularTolerance_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the angular tolerance threshold for projection. Projection is enabled if",
            "PxConstraintFlag::ePROJECTION is set for the joint."
          ]
        },
        "additional": {
          "b": [
            "If the joint deviates by more than this angle around its locked angular degrees of freedom,",
            "the solver will move the bodies to close the angle.",
            "",
            "Setting a very small tolerance may result in simulation jitter or other artifacts.",
            "",
            "Sometimes it is not possible to project (for example when the joints form a cycle).",
            "",
            "Range:",
            "[0,Pi]",
            "Default:",
            "Pi",
            "",
            "Angular projection is implemented only for the case of two or three locked angular degrees of freedom."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setProjectionAngularTolerance",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxD6Joint_getProjectionAngularTolerance",
      "comment": {
        "summary": {
          "b": [
            "Get the angular tolerance threshold for projection."
          ]
        },
        "additional": {
          "b": [
            "tolerance the angular tolerance threshold in radians"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getProjectionAngularTolerance",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxD6Joint_getConcreteTypeName",
      "comment": {
        "summary": {
          "b": [
            "Returns string name of PxD6Joint, used for serialization"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxD6Joint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxD6Joint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxGearJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a gear Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGearJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxGearJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxGearJoint_setHinges_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the hinge/revolute joints connected by the gear joint."
          ]
        },
        "additional": {
          "b": [
            "The passed joints can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate.",
            "The joints must define degrees of freedom around the twist axis. They cannot be null.",
            "",
            "Note that these joints are only used to compute the positional error correction term,",
            "used to adjust potential drift between jointed actors. The gear joint can run without",
            "calling this function, but in that case some visible overlap may develop over time between",
            "the teeth of the gear meshes.",
            "",
            "Calling this function resets the internal positional error correction term.",
            "",
            "true if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setHinges",
            "class_name": "PxGearJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGearJoint"
                }
              }
            }
          }
        },
        {
          "name": "hinge0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "hinge1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxGearJoint_setGearRatio_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the desired gear ratio."
          ]
        },
        "additional": {
          "b": [
            "For two gears with n0 and n1 teeth respectively, the gear ratio is n0/n1.",
            "",
            "You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.",
            "",
            "Calling this function resets the internal positional error correction term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setGearRatio",
            "class_name": "PxGearJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGearJoint"
                }
              }
            }
          }
        },
        {
          "name": "ratio",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxGearJoint_getGearRatio",
      "comment": {
        "summary": {
          "b": [
            "Get the gear ratio."
          ]
        },
        "additional": {
          "b": [
            "Current ratio"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getGearRatio",
            "class_name": "PxGearJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGearJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxGearJoint_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxGearJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGearJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "phys_PxRackAndPinionJointCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a rack",
            "&",
            "pinion Joint."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxRackAndPinionJointCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor0",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor1",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "localFrame1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRackAndPinionJoint"
            }
          }
        }
      }
    },
    {
      "name": "PxRackAndPinionJoint_setJoints_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the hinge",
            "&",
            "prismatic joints connected by the rack",
            "&",
            "pinion joint."
          ]
        },
        "additional": {
          "b": [
            "The passed hinge joint can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate. It cannot be null.",
            "The passed prismatic joint can be either PxPrismaticJoint or PxD6Joint. It cannot be null.",
            "",
            "Note that these joints are only used to compute the positional error correction term,",
            "used to adjust potential drift between jointed actors. The rack",
            "&",
            "pinion joint can run without",
            "calling this function, but in that case some visible overlap may develop over time between",
            "the teeth of the rack",
            "&",
            "pinion meshes.",
            "",
            "Calling this function resets the internal positional error correction term.",
            "",
            "true if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setJoints",
            "class_name": "PxRackAndPinionJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRackAndPinionJoint"
                }
              }
            }
          }
        },
        {
          "name": "hinge",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        },
        {
          "name": "prismatic",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBase"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRackAndPinionJoint_setRatio_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the desired ratio directly."
          ]
        },
        "additional": {
          "b": [
            "You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.",
            "",
            "Calling this function resets the internal positional error correction term."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRatio",
            "class_name": "PxRackAndPinionJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRackAndPinionJoint"
                }
              }
            }
          }
        },
        {
          "name": "ratio",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRackAndPinionJoint_getRatio",
      "comment": {
        "summary": {
          "b": [
            "Get the ratio."
          ]
        },
        "additional": {
          "b": [
            "Current ratio"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRatio",
            "class_name": "PxRackAndPinionJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRackAndPinionJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Float"
      }
    },
    {
      "name": "PxRackAndPinionJoint_setData_mut",
      "comment": {
        "summary": {
          "b": [
            "Set the desired ratio indirectly."
          ]
        },
        "additional": {
          "b": [
            "This is a simple helper function that computes the ratio from passed data:",
            "",
            "ratio = (PI*2*nbRackTeeth)/(rackLength*nbPinionTeeth)",
            "",
            "Calling this function resets the internal positional error correction term.",
            "",
            "true if success"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setData",
            "class_name": "PxRackAndPinionJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRackAndPinionJoint"
                }
              }
            }
          }
        },
        {
          "name": "nbRackTeeth",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbPinionTeeth",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "rackLength",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRackAndPinionJoint_getConcreteTypeName",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getConcreteTypeName",
            "class_name": "PxRackAndPinionJoint",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRackAndPinionJoint"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxGroupsMask_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxGroupsMask"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxGroupsMask"
            }
          }
        }
      }
    },
    {
      "name": "PxGroupsMask_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxGroupsMask"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxDefaultSimulationFilterShader",
      "comment": {
        "summary": {
          "b": [
            "Implementation of a simple filter shader that emulates PhysX 2.8.x filtering"
          ]
        },
        "additional": {
          "b": [
            "This shader provides the following logic:",
            "",
            "If one of the two filter objects is a trigger, the pair is acccepted and #PxPairFlag::eTRIGGER_DEFAULT will be used for trigger reports",
            "",
            "Else, if the filter mask logic (see further below) discards the pair it will be suppressed (#PxFilterFlag::eSUPPRESS)",
            "",
            "Else, the pair gets accepted and collision response gets enabled (#PxPairFlag::eCONTACT_DEFAULT)",
            "",
            "Filter mask logic:",
            "Given the two #PxFilterData structures fd0 and fd1 of two collision objects, the pair passes the filter if the following",
            "conditions are met:",
            "",
            "1) Collision groups of the pair are enabled",
            "2) Collision filtering equation is satisfied"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDefaultSimulationFilterShader",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "attributes0",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData0",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "attributes1",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData1",
          "kind": {
            "Record": {
              "name": "PxFilterData"
            }
          }
        },
        {
          "name": "pairFlags",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Flags": {
                  "name": "PxPairFlags",
                  "repr": "UShort"
                }
              }
            }
          }
        },
        {
          "name": "constantBlock",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "constantBlockSize",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxFilterFlags",
          "repr": "UShort"
        }
      }
    },
    {
      "name": "phys_PxGetGroupCollisionFlag",
      "comment": {
        "summary": {
          "b": [
            "Determines if collision detection is performed between a pair of groups"
          ]
        },
        "additional": {
          "b": [
            "Collision group is an integer between 0 and 31.",
            "",
            "True if the groups could collide"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetGroupCollisionFlag",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "group1",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "group2",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxSetGroupCollisionFlag",
      "comment": {
        "summary": {
          "b": [
            "Specifies if collision should be performed by a pair of groups"
          ]
        },
        "additional": {
          "b": [
            "Collision group is an integer between 0 and 31."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetGroupCollisionFlag",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "group1",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "group2",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "enable",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetGroup",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the value set with PxSetGroup()"
          ]
        },
        "additional": {
          "b": [
            "Collision group is an integer between 0 and 31.",
            "",
            "The collision group this actor belongs to"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetGroup",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UShort"
      }
    },
    {
      "name": "phys_PxSetGroup",
      "comment": {
        "summary": {
          "b": [
            "Sets which collision group this actor is part of"
          ]
        },
        "additional": {
          "b": [
            "Collision group is an integer between 0 and 31."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetGroup",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "collisionGroup",
          "kind": {
            "Builtin": "UShort"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetFilterOps",
      "comment": {
        "summary": {
          "b": [
            "Retrieves filtering operation. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetFilterOps",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "op0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        },
        {
          "name": "op1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        },
        {
          "name": "op2",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxSetFilterOps",
      "comment": {
        "summary": {
          "b": [
            "Setups filtering operations. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetFilterOps",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "op0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        },
        {
          "name": "op1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        },
        {
          "name": "op2",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Enum": {
                  "name": "PxFilterOp",
                  "cxx_qt": "PxFilterOp::Enum",
                  "repr": "Int"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetFilterBool",
      "comment": {
        "summary": {
          "b": [
            "Retrieves filtering's boolean value. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": [
            "flag Boolean value for filter."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetFilterBool",
            "is_c": false
          }
        }
      },
      "params": [],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxSetFilterBool",
      "comment": {
        "summary": {
          "b": [
            "Setups filtering's boolean value. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetFilterBool",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "enable",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetFilterConstants",
      "comment": {
        "summary": {
          "b": [
            "Gets filtering constant K0 and K1. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetFilterConstants",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "c0",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        },
        {
          "name": "c1",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxSetFilterConstants",
      "comment": {
        "summary": {
          "b": [
            "Setups filtering's K0 and K1 value. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetFilterConstants",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "c0",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        },
        {
          "name": "c1",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxGetGroupsMask",
      "comment": {
        "summary": {
          "b": [
            "Gets 64-bit mask used for collision filtering. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": [
            "The group mask for the actor."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxGetGroupsMask",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxGroupsMask"
        }
      }
    },
    {
      "name": "phys_PxSetGroupsMask",
      "comment": {
        "summary": {
          "b": [
            "Sets 64-bit mask used for collision filtering. See comments for PxGroupsMask"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxSetGroupsMask",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxActor"
                }
              }
            }
          }
        },
        {
          "name": "mask",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGroupsMask"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultErrorCallback_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxDefaultErrorCallback"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultErrorCallback"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultErrorCallback_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxDefaultErrorCallback"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultErrorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultErrorCallback_reportError_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "reportError",
            "class_name": "PxDefaultErrorCallback",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultErrorCallback"
                }
              }
            }
          }
        },
        {
          "name": "code",
          "kind": {
            "Enum": {
              "name": "PxErrorCode",
              "cxx_qt": "PxErrorCode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "message",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "file",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "line",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidActorExt_createExclusiveShape",
      "comment": {
        "summary": {
          "b": [
            "Creates a new shape with default properties and a list of materials and adds it to the list of shapes of this actor."
          ]
        },
        "additional": {
          "b": [
            "This is equivalent to the following",
            "",
            "```cpp",
            "// reference count is 1",
            "PxShape* shape(...) = PxGetPhysics().createShape(...);",
            "// increments reference count",
            "actor->attachShape(shape);",
            "// releases user reference, leaving reference count at 1",
            "shape->release();",
            "```",
            "",
            "As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.",
            "",
            "The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see #PxShapeFlag).",
            "Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for",
            "non-kinematic PxRigidDynamic instances.",
            "",
            "Creating compounds with a very large number of shapes may adversely affect performance and stability.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically.",
            "",
            "The newly created shape."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createExclusiveShape",
            "class_name": "PxRigidActorExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "materials",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": false,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxMaterial"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "materialCount",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "shapeFlags",
          "kind": {
            "Flags": {
              "name": "PxShapeFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxShape"
            }
          }
        }
      }
    },
    {
      "name": "PxRigidActorExt_createExclusiveShape_1",
      "comment": {
        "summary": {
          "b": [
            "Creates a new shape with default properties and a single material adds it to the list of shapes of this actor."
          ]
        },
        "additional": {
          "b": [
            "This is equivalent to the following",
            "",
            "```cpp",
            "// reference count is 1",
            "PxShape* shape(...) = PxGetPhysics().createShape(...);",
            "// increments reference count",
            "actor->attachShape(shape);",
            "// releases user reference, leaving reference count at 1",
            "shape->release();",
            "```",
            "",
            "As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.",
            "",
            "The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see #PxShapeFlag).",
            "Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for",
            "non-kinematic PxRigidDynamic instances.",
            "",
            "Creating compounds with a very large number of shapes may adversely affect performance and stability.",
            "",
            "Sleeping:",
            "Does",
            "NOT",
            "wake the actor up automatically.",
            "",
            "The newly created shape."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createExclusiveShape",
            "class_name": "PxRigidActorExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "shapeFlags",
          "kind": {
            "Flags": {
              "name": "PxShapeFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxShape"
            }
          }
        }
      }
    },
    {
      "name": "PxRigidActorExt_getRigidActorShapeLocalBoundsList",
      "comment": {
        "summary": {
          "b": [
            "Gets a list of bounds based on shapes in rigid actor. This list can be used to cook/create",
            "bounding volume hierarchy though PxCooking API."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getRigidActorShapeLocalBoundsList",
            "class_name": "PxRigidActorExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "numBounds",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBounds3"
            }
          }
        }
      }
    },
    {
      "name": "PxRigidActorExt_createBVHFromActor",
      "comment": {
        "summary": {
          "b": [
            "Convenience function to create a PxBVH object from a PxRigidActor."
          ]
        },
        "additional": {
          "b": [
            "The computed PxBVH can then be used in PxScene::addActor() or PxAggregate::addActor().",
            "After adding the actor",
            "&",
            "BVH to the scene/aggregate, release the PxBVH object by calling PxBVH::release().",
            "",
            "The PxBVH for this actor."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createBVHFromActor",
            "class_name": "PxRigidActorExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBVH"
            }
          }
        }
      }
    },
    {
      "name": "PxMassProperties_new",
      "comment": {
        "summary": {
          "b": [
            "Default constructor."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMassProperties"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxMassProperties"
        }
      }
    },
    {
      "name": "PxMassProperties_new_1",
      "comment": {
        "summary": {
          "b": [
            "Construct from individual elements."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMassProperties"
        }
      },
      "params": [
        {
          "name": "m",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "inertiaT",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "com",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMassProperties"
        }
      }
    },
    {
      "name": "PxMassProperties_new_2",
      "comment": {
        "summary": {
          "b": [
            "Compute mass properties based on a provided geometry structure."
          ]
        },
        "additional": {
          "b": [
            "This constructor assumes the geometry has a density of 1. Mass and inertia tensor scale linearly with density."
          ]
        }
      },
      "ext": {
        "None": {
          "Ctor": "PxMassProperties"
        }
      },
      "params": [
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMassProperties"
        }
      }
    },
    {
      "name": "PxMassProperties_translate_mut",
      "comment": {
        "summary": {
          "b": [
            "Translate the center of mass by a given vector and adjust the inertia tensor accordingly."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "translate",
            "class_name": "PxMassProperties",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMassProperties"
                }
              }
            }
          }
        },
        {
          "name": "t",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMassProperties_getMassSpaceInertia",
      "comment": {
        "summary": {
          "b": [
            "Get the entries of the diagonalized inertia tensor and the corresponding reference rotation."
          ]
        },
        "additional": {
          "b": [
            "The entries of the diagonalized inertia tensor."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getMassSpaceInertia",
            "class_name": "PxMassProperties",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inertia",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "massFrame",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxMassProperties_translateInertia",
      "comment": {
        "summary": {
          "b": [
            "Translate an inertia tensor using the parallel axis theorem"
          ]
        },
        "additional": {
          "b": [
            "The translated inertia tensor."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "translateInertia",
            "class_name": "PxMassProperties",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inertia",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "mass",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "t",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMassProperties_rotateInertia",
      "comment": {
        "summary": {
          "b": [
            "Rotate an inertia tensor around the center of mass"
          ]
        },
        "additional": {
          "b": [
            "The rotated inertia tensor."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "rotateInertia",
            "class_name": "PxMassProperties",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inertia",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "q",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMassProperties_scaleInertia",
      "comment": {
        "summary": {
          "b": [
            "Non-uniform scaling of the inertia tensor"
          ]
        },
        "additional": {
          "b": [
            "The scaled inertia tensor."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "scaleInertia",
            "class_name": "PxMassProperties",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inertia",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Mat33"
              }
            }
          }
        },
        {
          "name": "scaleRotation",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Mat33"
      }
    },
    {
      "name": "PxMassProperties_sum",
      "comment": {
        "summary": {
          "b": [
            "Sum up individual mass properties."
          ]
        },
        "additional": {
          "b": [
            "The summed up mass properties."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sum",
            "class_name": "PxMassProperties",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "props",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMassProperties"
                }
              }
            }
          }
        },
        {
          "name": "transforms",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "count",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMassProperties"
        }
      }
    },
    {
      "name": "PxRigidBodyExt_updateMassAndInertia",
      "comment": {
        "summary": {
          "b": [
            "Computation of mass properties for a rigid body actor"
          ]
        },
        "additional": {
          "b": [
            "To simulate a dynamic rigid actor, the SDK needs a mass and an inertia tensor.",
            "",
            "This method offers functionality to compute the necessary mass and inertia properties based on the shapes declared in",
            "the PxRigidBody descriptor and some additionally specified parameters. For each shape, the shape geometry,",
            "the shape positioning within the actor and the specified shape density are used to compute the body's mass and",
            "inertia properties.",
            "",
            "Shapes without PxShapeFlag::eSIMULATION_SHAPE set are ignored unless includeNonSimShapes is true.",
            "Shapes with plane, triangle mesh or heightfield geometry and PxShapeFlag::eSIMULATION_SHAPE set are not allowed for PxRigidBody collision.",
            "",
            "This method will set the mass, center of mass, and inertia tensor",
            "",
            "if no collision shapes are found, the inertia tensor is set to (1,1,1) and the mass to 1",
            "",
            "if massLocalPose is non-NULL, the rigid body's center of mass parameter  will be set",
            "to the user provided value (massLocalPose) and the inertia tensor will be resolved at that point.",
            "",
            "If all shapes of the actor have the same density then the overloaded method updateMassAndInertia() with a single density parameter can be used instead.",
            "",
            "Boolean. True on success else false."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "updateMassAndInertia",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "shapeDensities",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "shapeDensityCount",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "massLocalPose",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "includeNonSimShapes",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidBodyExt_updateMassAndInertia_1",
      "comment": {
        "summary": {
          "b": [
            "Computation of mass properties for a rigid body actor"
          ]
        },
        "additional": {
          "b": [
            "See previous method for details.",
            "",
            "Boolean. True on success else false."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "updateMassAndInertia",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "density",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "massLocalPose",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "includeNonSimShapes",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidBodyExt_setMassAndUpdateInertia",
      "comment": {
        "summary": {
          "b": [
            "Computation of mass properties for a rigid body actor"
          ]
        },
        "additional": {
          "b": [
            "This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the sum of all user-supplied",
            "shape mass values, and the inertia and center of mass are computed according to the rigid body's shapes and the per shape mass input values.",
            "",
            "If no collision shapes are found, the inertia tensor is set to (1,1,1)",
            "",
            "If a single mass value should be used for the actor as a whole then the overloaded method setMassAndUpdateInertia() with a single mass parameter can be used instead.",
            "",
            "Boolean. True on success else false."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "setMassAndUpdateInertia",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "shapeMasses",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "shapeMassCount",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "massLocalPose",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "includeNonSimShapes",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidBodyExt_setMassAndUpdateInertia_1",
      "comment": {
        "summary": {
          "b": [
            "Computation of mass properties for a rigid body actor"
          ]
        },
        "additional": {
          "b": [
            "This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the user-supplied",
            "value, and the inertia and center of mass are computed according to the rigid body's shapes and the input mass.",
            "",
            "If no collision shapes are found, the inertia tensor is set to (1,1,1)",
            "",
            "Boolean. True on success else false."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "setMassAndUpdateInertia",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "mass",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "massLocalPose",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "includeNonSimShapes",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidBodyExt_computeMassPropertiesFromShapes",
      "comment": {
        "summary": {
          "b": [
            "Compute the mass, inertia tensor and center of mass from a list of shapes."
          ]
        },
        "additional": {
          "b": [
            "The mass properties from the combined shapes."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computeMassPropertiesFromShapes",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shapes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Pointer": {
                  "is_const": false,
                  "is_pointee_const": true,
                  "is_array_like": false,
                  "pointee": {
                    "Record": {
                      "name": "PxShape"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "name": "shapeCount",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxMassProperties"
        }
      }
    },
    {
      "name": "PxRigidBodyExt_addForceAtPos",
      "comment": {
        "summary": {
          "b": [
            "Applies a force (or impulse) defined in the global coordinate frame, acting at a particular",
            "point in global coordinates, to the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if the force does not act along the center of mass of the actor, this",
            "will also add the corresponding torque. Because forces are reset at the end of every timestep,",
            "you can maintain a total external force on an object by calling this once every frame.",
            "",
            "if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire",
            "articulation",
            "",
            "::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the",
            "force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a",
            "given point.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping and the wakeup parameter is true (default)."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "addForceAtPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "wakeup",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_addForceAtLocalPos",
      "comment": {
        "summary": {
          "b": [
            "Applies a force (or impulse) defined in the global coordinate frame, acting at a particular",
            "point in local coordinates, to the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if the force does not act along the center of mass of the actor, this",
            "will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a",
            "total external force on an object by calling this once every frame.",
            "",
            "if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire",
            "articulation",
            "",
            "::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the",
            "force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a",
            "given point.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping and the wakeup parameter is true (default)."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "addForceAtLocalPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "wakeup",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_addLocalForceAtPos",
      "comment": {
        "summary": {
          "b": [
            "Applies a force (or impulse) defined in the actor local coordinate frame, acting at a",
            "particular point in global coordinates, to the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if the force does not act along the center of mass of the actor, this",
            "will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a",
            "total external force on an object by calling this once every frame.",
            "",
            "if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire",
            "articulation",
            "",
            "::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the",
            "force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a",
            "given point.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping and the wakeup parameter is true (default)."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "addLocalForceAtPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "wakeup",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_addLocalForceAtLocalPos",
      "comment": {
        "summary": {
          "b": [
            "Applies a force (or impulse) defined in the actor local coordinate frame, acting at a",
            "particular point in local coordinates, to the actor."
          ]
        },
        "additional": {
          "b": [
            "Note that if the force does not act along the center of mass of the actor, this",
            "will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a",
            "total external force on an object by calling this once every frame.",
            "",
            "if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire",
            "articulation",
            "",
            "::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the",
            "force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a",
            "given point.",
            "",
            "Sleeping:",
            "This call wakes the actor if it is sleeping and the wakeup parameter is true (default)."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "addLocalForceAtLocalPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "force",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxForceMode",
              "cxx_qt": "PxForceMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "wakeup",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_getVelocityAtPos",
      "comment": {
        "summary": {
          "b": [
            "Computes the velocity of a point given in world coordinates if it were attached to the",
            "specified body and moving with it."
          ]
        },
        "additional": {
          "b": [
            "The velocity of point in the global frame."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getVelocityAtPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBodyExt_getLocalVelocityAtLocalPos",
      "comment": {
        "summary": {
          "b": [
            "Computes the velocity of a point given in local coordinates if it were attached to the",
            "specified body and moving with it."
          ]
        },
        "additional": {
          "b": [
            "The velocity of point in the local frame."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getLocalVelocityAtLocalPos",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBodyExt_getVelocityAtOffset",
      "comment": {
        "summary": {
          "b": [
            "Computes the velocity of a point (offset from the origin of the body) given in world coordinates if it were attached to the",
            "specified body and moving with it."
          ]
        },
        "additional": {
          "b": [
            "The velocity of point (offset from the origin of the body) in the global frame."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getVelocityAtOffset",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "pos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Vec3"
      }
    },
    {
      "name": "PxRigidBodyExt_computeVelocityDeltaFromImpulse",
      "comment": {
        "summary": {
          "b": [
            "Compute the change to linear and angular velocity that would occur if an impulsive force and torque were to be applied to a specified rigid body."
          ]
        },
        "additional": {
          "b": [
            "The rigid body is left unaffected unless a subsequent independent call is executed that actually applies the computed changes to velocity and angular velocity.",
            "",
            "if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computeVelocityDeltaFromImpulse",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "impulsiveForce",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "impulsiveTorque",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "deltaLinearVelocity",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "deltaAngularVelocity",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_computeVelocityDeltaFromImpulse_1",
      "comment": {
        "summary": {
          "b": [
            "Computes the linear and angular velocity change vectors for a given impulse at a world space position taking a mass and inertia scale into account"
          ]
        },
        "additional": {
          "b": [
            "This function is useful for extracting the respective linear and angular velocity changes from a contact or joint when the mass/inertia ratios have been adjusted.",
            "",
            "if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computeVelocityDeltaFromImpulse",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "globalPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "impulse",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "invMassScale",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "invInertiaScale",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "deltaLinearVelocity",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "deltaAngularVelocity",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_computeLinearAngularImpulse",
      "comment": {
        "summary": {
          "b": [
            "Computes the linear and angular impulse vectors for a given impulse at a world space position taking a mass and inertia scale into account"
          ]
        },
        "additional": {
          "b": [
            "This function is useful for extracting the respective linear and angular impulses from a contact or joint when the mass/inertia ratios have been adjusted."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "computeLinearAngularImpulse",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "globalPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "impulse",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "invMassScale",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "invInertiaScale",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "linearImpulse",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "angularImpulse",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRigidBodyExt_linearSweepSingle",
      "comment": {
        "summary": {
          "b": [
            "Performs a linear sweep through space with the body's geometry objects."
          ]
        },
        "additional": {
          "b": [
            "Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.",
            "",
            "If eTOUCH is returned from the filter callback, it will trigger an error and the hit will be discarded.",
            "",
            "The function sweeps all shapes attached to a given rigid body through space and reports the nearest",
            "object in the scene which intersects any of of the shapes swept paths.",
            "Information about the closest intersection is written to a #PxSweepHit structure.",
            "",
            "True if a blocking hit was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "linearSweepSingle",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "closestHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "shapeIndex",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRigidBodyExt_linearSweepMultiple",
      "comment": {
        "summary": {
          "b": [
            "Performs a linear sweep through space with the body's geometry objects, returning all overlaps."
          ]
        },
        "additional": {
          "b": [
            "Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.",
            "",
            "This function sweeps all shapes attached to a given rigid body through space and reports all",
            "objects in the scene that intersect any of the shapes' swept paths until there are no more objects to report",
            "or a blocking hit is encountered.",
            "",
            "the number of touching hits. If overflow is set to true, the results are incomplete. In case of overflow there are also no guarantees that all touching hits returned are closer than the blocking hit."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "linearSweepMultiple",
            "class_name": "PxRigidBodyExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidBody"
                }
              }
            }
          }
        },
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "touchHitBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "touchHitShapeIndices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "touchHitBufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "block",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "blockingShapeIndex",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Int"
              }
            }
          }
        },
        {
          "name": "overflow",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Bool"
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxShapeExt_getGlobalPose",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the world space pose of the shape."
          ]
        },
        "additional": {
          "b": [
            "Global pose of shape."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getGlobalPose",
            "class_name": "PxShapeExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxTransform"
        }
      }
    },
    {
      "name": "PxShapeExt_raycast",
      "comment": {
        "summary": {
          "b": [
            "Raycast test against the shape."
          ]
        },
        "additional": {
          "b": [
            "Number of hits between the ray and the shape"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxShapeExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "rayOrigin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "rayDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "maxDist",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "maxHits",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "rayHits",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastHit"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxShapeExt_overlap",
      "comment": {
        "summary": {
          "b": [
            "Test overlap between the shape and a geometry object"
          ]
        },
        "additional": {
          "b": [
            "True if the shape overlaps the geometry object"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxShapeExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "otherGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "otherGeomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxShapeExt_sweep",
      "comment": {
        "summary": {
          "b": [
            "Sweep a geometry object against the shape."
          ]
        },
        "additional": {
          "b": [
            "Currently only box, sphere, capsule and convex mesh shapes are supported, i.e. the swept geometry object must be one of those types.",
            "",
            "True if the swept geometry object hits the shape"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxShapeExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "otherGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "otherGeomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "sweepHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxShapeExt_getWorldBounds",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the axis aligned bounding box enclosing the shape."
          ]
        },
        "additional": {
          "b": [
            "The shape's bounding box."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "getWorldBounds",
            "class_name": "PxShapeExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxBounds3"
        }
      }
    },
    {
      "name": "PxMeshOverlapUtil_new_alloc",
      "comment": null,
      "ext": {
        "None": {
          "New": "PxMeshOverlapUtil"
        }
      },
      "params": [],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxMeshOverlapUtil"
            }
          }
        }
      }
    },
    {
      "name": "PxMeshOverlapUtil_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxMeshOverlapUtil"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshOverlapUtil"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxMeshOverlapUtil_findOverlap_mut",
      "comment": {
        "summary": {
          "b": [
            "Find the mesh triangles which touch the specified geometry object."
          ]
        },
        "additional": {
          "b": [
            "Number of overlaps found. Triangle indices can then be accessed through the #getResults() function."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "findOverlap",
            "class_name": "PxMeshOverlapUtil",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshOverlapUtil"
                }
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "meshGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshGeometry"
                }
              }
            }
          }
        },
        {
          "name": "meshPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxMeshOverlapUtil_findOverlap_mut_1",
      "comment": {
        "summary": {
          "b": [
            "Find the height field triangles which touch the specified geometry object."
          ]
        },
        "additional": {
          "b": [
            "Number of overlaps found. Triangle indices can then be accessed through the #getResults() function."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "findOverlap",
            "class_name": "PxMeshOverlapUtil",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshOverlapUtil"
                }
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "hfGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldGeometry"
                }
              }
            }
          }
        },
        {
          "name": "hfPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxMeshOverlapUtil_getResults",
      "comment": {
        "summary": {
          "b": [
            "Retrieves array of triangle indices after a findOverlap call."
          ]
        },
        "additional": {
          "b": [
            "Indices of touched triangles"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getResults",
            "class_name": "PxMeshOverlapUtil",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshOverlapUtil"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "UInt"
          }
        }
      }
    },
    {
      "name": "PxMeshOverlapUtil_getNbResults",
      "comment": {
        "summary": {
          "b": [
            "Retrieves number of triangle indices after a findOverlap call."
          ]
        },
        "additional": {
          "b": [
            "Number of touched triangles"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getNbResults",
            "class_name": "PxMeshOverlapUtil",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxMeshOverlapUtil"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "phys_PxComputeTriangleMeshPenetration",
      "comment": {
        "summary": {
          "b": [
            "Computes an approximate minimum translational distance (MTD) between a geometry object and a mesh."
          ]
        },
        "additional": {
          "b": [
            "This iterative function computes an approximate vector that can be used to depenetrate a geom object",
            "from a triangle mesh. Returned depenetration vector should be applied to 'geom', to get out of the mesh.",
            "",
            "The function works best when the amount of overlap between the geom object and the mesh is small. If the",
            "geom object's center goes inside the mesh, backface culling usually kicks in, no overlap is detected,",
            "and the function does not compute an MTD vector.",
            "",
            "The function early exits if no overlap is detected after a depenetration attempt. This means that if",
            "maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has",
            "been successful. Usually N = 4 gives good results.",
            "",
            "True if the MTD has successfully been computed, i.e. if objects do overlap."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeTriangleMeshPenetration",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "direction",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "depth",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "meshGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshGeometry"
                }
              }
            }
          }
        },
        {
          "name": "meshPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "maxIter",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "usedIter",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxComputeHeightFieldPenetration",
      "comment": {
        "summary": {
          "b": [
            "Computes an approximate minimum translational distance (MTD) between a geometry object and a heightfield."
          ]
        },
        "additional": {
          "b": [
            "This iterative function computes an approximate vector that can be used to depenetrate a geom object",
            "from a heightfield. Returned depenetration vector should be applied to 'geom', to get out of the heightfield.",
            "",
            "The function works best when the amount of overlap between the geom object and the mesh is small. If the",
            "geom object's center goes inside the heightfield, backface culling usually kicks in, no overlap is detected,",
            "and the function does not compute an MTD vector.",
            "",
            "The function early exits if no overlap is detected after a depenetration attempt. This means that if",
            "maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has",
            "been successful. Usually N = 4 gives good results.",
            "",
            "True if the MTD has successfully been computed, i.e. if objects do overlap."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxComputeHeightFieldPenetration",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "direction",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "depth",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Float"
              }
            }
          }
        },
        {
          "name": "geom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "heightFieldGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxHeightFieldGeometry"
                }
              }
            }
          }
        },
        {
          "name": "heightFieldPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "maxIter",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "usedIter",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxXmlMiscParameter_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxXmlMiscParameter"
        }
      },
      "params": [],
      "ret": {
        "Record": {
          "name": "PxXmlMiscParameter"
        }
      }
    },
    {
      "name": "PxXmlMiscParameter_new_1",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxXmlMiscParameter"
        }
      },
      "params": [
        {
          "name": "inUpVector",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "inScale",
          "kind": {
            "Record": {
              "name": "PxTolerancesScale"
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxXmlMiscParameter"
        }
      }
    },
    {
      "name": "PxSerialization_isSerializable",
      "comment": {
        "summary": {
          "b": [
            "Returns whether the collection is serializable with the externalReferences collection."
          ]
        },
        "additional": {
          "b": [
            "Some definitions to explain whether a collection can be serialized or not:",
            "",
            "For definitions of",
            "requires",
            "and",
            "complete",
            "see #PxSerialization::complete",
            "",
            "A serializable object is",
            "subordinate",
            "if it cannot be serialized on its own",
            "The following objects are subordinate:",
            "- articulation links",
            "- articulation joints",
            "- joints",
            "",
            "A collection C can be serialized with external references collection D iff",
            "- C is complete relative to D (no dangling references)",
            "- Every object in D required by an object in C has a valid ID (no unnamed references)",
            "- Every subordinate object in C is required by another object in C (no orphans)",
            "",
            "Whether the collection is serializable"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "isSerializable",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "externalReferences",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSerialization_complete",
      "comment": {
        "summary": {
          "b": [
            "Adds to a collection all objects such that it can be successfully serialized."
          ]
        },
        "additional": {
          "b": [
            "A collection C is complete relative to an other collection D if every object required by C is either in C or D.",
            "This function adds objects to a collection, such that it becomes complete with respect to the exceptFor collection.",
            "Completeness is needed for serialization. See #PxSerialization::serializeCollectionToBinary,",
            "#PxSerialization::serializeCollectionToXml.",
            "",
            "Sdk objects require other sdk object according to the following rules:",
            "- joints require their actors and constraint",
            "- rigid actors require their shapes",
            "- shapes require their material(s) and mesh (triangle mesh, convex mesh or height field), if any",
            "- articulations require their links and joints",
            "- aggregates require their actors",
            "",
            "If followJoints is specified another rule is added:",
            "- actors require their joints",
            "",
            "Specifying followJoints will make whole jointed actor chains being added to the collection. Following chains",
            "is interrupted whenever a object in exceptFor is encountered."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "complete",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "exceptFor",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "followJoints",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerialization_createSerialObjectIds",
      "comment": {
        "summary": {
          "b": [
            "Creates PxSerialObjectId values for unnamed objects in a collection."
          ]
        },
        "additional": {
          "b": [
            "Creates PxSerialObjectId names for unnamed objects in a collection starting at a base value and incrementing,",
            "skipping values that are already assigned to objects in the collection."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createSerialObjectIds",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "base",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxSerialization_createCollectionFromXml",
      "comment": {
        "summary": {
          "b": [
            "Creates a PxCollection from XML data."
          ]
        },
        "additional": {
          "b": [
            "a pointer to a PxCollection if successful or NULL if it failed."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createCollectionFromXml",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inputData",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxInputData"
                }
              }
            }
          }
        },
        {
          "name": "cooking",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCooking"
                }
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "externalRefs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "stringTable",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxStringTable"
                }
              }
            }
          }
        },
        {
          "name": "outArgs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxXmlMiscParameter"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCollection"
            }
          }
        }
      }
    },
    {
      "name": "PxSerialization_createCollectionFromBinary",
      "comment": {
        "summary": {
          "b": [
            "Deserializes a PxCollection from memory."
          ]
        },
        "additional": {
          "b": [
            "Creates a collection from memory. If the collection has external dependencies another collection",
            "can be provided to resolve these.",
            "",
            "The memory block provided has to be 128 bytes aligned and contain a contiguous serialized collection as written",
            "by PxSerialization::serializeCollectionToBinary. The contained binary data needs to be compatible with the current binary format version",
            "which is defined by \"PX_PHYSICS_VERSION_MAJOR.PX_PHYSICS_VERSION_MINOR.PX_PHYSICS_VERSION_BUGFIX-PX_BINARY_SERIAL_VERSION\".",
            "For a list of compatible sdk releases refer to the documentation of PX_BINARY_SERIAL_VERSION."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createCollectionFromBinary",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "memBlock",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "externalRefs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCollection"
            }
          }
        }
      }
    },
    {
      "name": "PxSerialization_serializeCollectionToXml",
      "comment": {
        "summary": {
          "b": [
            "Serializes a physics collection to an XML output stream."
          ]
        },
        "additional": {
          "b": [
            "The collection to be serialized needs to be complete",
            "",
            "Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.",
            "",
            "true if the collection is successfully serialized."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "serializeCollectionToXml",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "outputStream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "cooking",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCooking"
                }
              }
            }
          }
        },
        {
          "name": "externalRefs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "inArgs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxXmlMiscParameter"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSerialization_serializeCollectionToBinary",
      "comment": {
        "summary": {
          "b": [
            "Serializes a collection to a binary stream."
          ]
        },
        "additional": {
          "b": [
            "Serializes a collection to a stream. In order to resolve external dependencies the externalReferences collection has to be provided.",
            "Optionally names of objects that where set for example with #PxActor::setName are serialized along with the objects.",
            "",
            "The collection can be successfully serialized if isSerializable(collection) returns true. See #isSerializable.",
            "",
            "The implementation of the output stream needs to fulfill the requirements on the memory block input taken by",
            "PxSerialization::createCollectionFromBinary.",
            "",
            "Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.",
            "",
            "Whether serialization was successful"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "serializeCollectionToBinary",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "outputStream",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOutputStream"
                }
              }
            }
          }
        },
        {
          "name": "collection",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "sr",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSerializationRegistry"
                }
              }
            }
          }
        },
        {
          "name": "externalRefs",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "exportNames",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSerialization_createSerializationRegistry",
      "comment": {
        "summary": {
          "b": [
            "Creates an application managed registry for serialization."
          ]
        },
        "additional": {
          "b": [
            "PxSerializationRegistry instance."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createSerializationRegistry",
            "class_name": "PxSerialization",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSerializationRegistry"
            }
          }
        }
      }
    },
    {
      "name": "PxDefaultCpuDispatcher_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Deletes the dispatcher."
          ]
        },
        "additional": {
          "b": [
            "Do not keep a reference to the deleted instance."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxDefaultCpuDispatcher",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultCpuDispatcher_setRunProfiled_mut",
      "comment": {
        "summary": {
          "b": [
            "Enables profiling at task level."
          ]
        },
        "additional": {
          "b": [
            "By default enabled only in profiling builds."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setRunProfiled",
            "class_name": "PxDefaultCpuDispatcher",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultCpuDispatcher"
                }
              }
            }
          }
        },
        {
          "name": "runProfiled",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxDefaultCpuDispatcher_getRunProfiled",
      "comment": {
        "summary": {
          "b": [
            "Checks if profiling is enabled at task level."
          ]
        },
        "additional": {
          "b": [
            "True if tasks should be profiled."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getRunProfiled",
            "class_name": "PxDefaultCpuDispatcher",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxDefaultCpuDispatcher"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxDefaultCpuDispatcherCreate",
      "comment": {
        "summary": {
          "b": [
            "Create default dispatcher, extensions SDK needs to be initialized first."
          ]
        },
        "additional": {
          "b": [
            "numThreads may be zero in which case no worker thread are initialized and",
            "simulation tasks will be executed on the thread that calls PxScene::simulate()",
            "",
            "yieldProcessorCount must be greater than zero if eYIELD_PROCESSOR is the chosen mode and equal to zero for all other modes.",
            "",
            "eYIELD_THREAD and eYIELD_PROCESSOR modes will use compute resources even if the simulation is not running.",
            "It is left to users to keep threads inactive, if so desired, when no simulation is running."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDefaultCpuDispatcherCreate",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "numThreads",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "affinityMasks",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "mode",
          "kind": {
            "Enum": {
              "name": "PxDefaultCpuDispatcherWaitForWorkMode",
              "cxx_qt": "PxDefaultCpuDispatcherWaitForWorkMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "yieldProcessorCount",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxDefaultCpuDispatcher"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxBuildSmoothNormals",
      "comment": {
        "summary": {
          "b": [
            "Builds smooth vertex normals over a mesh."
          ]
        },
        "additional": {
          "b": [
            "- \"smooth\" because smoothing groups are not supported here",
            "- takes angles into account for correct cube normals computation",
            "",
            "To use 32bit indices pass a pointer in dFaces and set wFaces to zero. Alternatively pass a pointer to",
            "wFaces and set dFaces to zero.",
            "",
            "True on success."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxBuildSmoothNormals",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "nbTris",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "nbVerts",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "verts",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "dFaces",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "wFaces",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UShort"
              }
            }
          }
        },
        {
          "name": "normals",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "flip",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateDynamic",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a PxRigidDynamic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "a new dynamic actor with the PxRigidBodyFlag, or NULL if it could",
            "not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateDynamic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "density",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "shapeOffset",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateDynamic_1",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a PxRigidDynamic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "a new dynamic actor with the PxRigidBodyFlag, or NULL if it could",
            "not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateDynamic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "density",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateKinematic",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a kinematic PxRigidDynamic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However,",
            "kinematics of other geometry types may not participate in simulation collision and may be used only for",
            "triggers or scene queries of moving objects under animation control. In this case the density parameter",
            "will be ignored and the created shape will be set up as a scene query only shape (see #PxShapeFlag::eSCENE_QUERY_SHAPE)",
            "",
            "a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could",
            "not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateKinematic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "density",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "shapeOffset",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateKinematic_1",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a kinematic PxRigidDynamic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However,",
            "kinematics of other geometry types may not participate in simulation collision and may be used only for",
            "triggers or scene queries of moving objects under animation control. In this case the density parameter",
            "will be ignored and the created shape will be set up as a scene query only shape (see #PxShapeFlag::eSCENE_QUERY_SHAPE)",
            "",
            "a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could",
            "not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateKinematic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "density",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateStatic",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a PxRigidStatic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "a new static actor, or NULL if it could not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateStatic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        },
        {
          "name": "shapeOffset",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidStatic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateStatic_1",
      "comment": {
        "summary": {
          "b": [
            "simple method to create a PxRigidStatic actor with a single PxShape."
          ]
        },
        "additional": {
          "b": [
            "a new static actor, or NULL if it could not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateStatic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidStatic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCloneShape",
      "comment": {
        "summary": {
          "b": [
            "create a shape by copying attributes from another shape"
          ]
        },
        "additional": {
          "b": [
            "The function clones a PxShape. The following properties are copied:",
            "- geometry",
            "- flags",
            "- materials",
            "- actor-local pose",
            "- contact offset",
            "- rest offset",
            "- simulation filter data",
            "- query filter data",
            "- torsional patch radius",
            "- minimum torsional patch radius",
            "",
            "The following are not copied and retain their default values:",
            "- name",
            "- user data",
            "",
            "the newly-created rigid static"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCloneShape",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physicsSDK",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        },
        {
          "name": "isExclusive",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxShape"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCloneStatic",
      "comment": {
        "summary": {
          "b": [
            "create a static body by copying attributes from another rigid actor"
          ]
        },
        "additional": {
          "b": [
            "The function clones a PxRigidDynamic or PxRigidStatic as a PxRigidStatic. A uniform scale is applied. The following properties are copied:",
            "- shapes",
            "- actor flags",
            "- owner client and client behavior bits",
            "- dominance group",
            "",
            "The following are not copied and retain their default values:",
            "- name",
            "- joints or observers",
            "- aggregate or scene membership",
            "- user data",
            "",
            "Transforms are not copied with bit-exact accuracy.",
            "",
            "the newly-created rigid static"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCloneStatic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physicsSDK",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidStatic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCloneDynamic",
      "comment": {
        "summary": {
          "b": [
            "create a dynamic body by copying attributes from an existing body"
          ]
        },
        "additional": {
          "b": [
            "The following properties are copied:",
            "- shapes",
            "- actor flags, rigidDynamic flags and rigidDynamic lock flags",
            "- mass, moment of inertia, and center of mass frame",
            "- linear and angular velocity",
            "- linear and angular damping",
            "- maximum linear velocity",
            "- maximum angular velocity",
            "- position and velocity solver iterations",
            "- maximum depenetration velocity",
            "- sleep threshold",
            "- contact report threshold",
            "- dominance group",
            "- owner client and client behavior bits",
            "- name pointer",
            "- kinematic target",
            "",
            "The following are not copied and retain their default values:",
            "- name",
            "- joints or observers",
            "- aggregate or scene membership",
            "- sleep timer",
            "- user data",
            "",
            "Transforms are not copied with bit-exact accuracy.",
            "",
            "the newly-created rigid static"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCloneDynamic",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "physicsSDK",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "body",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidDynamic"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidDynamic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreatePlane",
      "comment": {
        "summary": {
          "b": [
            "create a plane actor. The plane equation is n.x + d = 0"
          ]
        },
        "additional": {
          "b": [
            "a new static actor, or NULL if it could not be constructed"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreatePlane",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sdk",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "plane",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxPlane"
                }
              }
            }
          }
        },
        {
          "name": "material",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxMaterial"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRigidStatic"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxScaleRigidActor",
      "comment": {
        "summary": {
          "b": [
            "scale a rigid actor by a uniform scale"
          ]
        },
        "additional": {
          "b": [
            "The geometry and relative positions of the actor are multiplied by the given scale value. If the actor is a rigid body or an",
            "articulation link and the scaleMassProps value is true, the mass properties are scaled assuming the density is constant: the",
            "center of mass is linearly scaled, the mass is multiplied by the cube of the scale, and the inertia tensor by the fifth power of the scale."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxScaleRigidActor",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "scale",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "scaleMassProps",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxStringTableExt_createStringTable",
      "comment": null,
      "ext": {
        "None": {
          "Method": {
            "func_name": "createStringTable",
            "class_name": "PxStringTableExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "inAllocator",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxAllocatorCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxStringTable"
            }
          }
        }
      }
    },
    {
      "name": "PxBroadPhaseExt_createRegionsFromWorldBounds",
      "comment": {
        "summary": {
          "b": [
            "Creates regions for PxSceneDesc, from a global box."
          ]
        },
        "additional": {
          "b": [
            "This helper simply subdivides the given global box into a 2D grid of smaller boxes. Each one of those smaller boxes",
            "is a region of interest for the broadphase. There are nbSubdiv*nbSubdiv regions in the 2D grid. The function does not",
            "subdivide along the given up axis.",
            "",
            "This is the simplest setup one can use with PxBroadPhaseType::eMBP. A more sophisticated setup would try to cover",
            "the game world with a non-uniform set of regions (i.e. not just a grid).",
            "",
            "number of regions written out to the 'regions' array"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "createRegionsFromWorldBounds",
            "class_name": "PxBroadPhaseExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "regions",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "globalBounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "nbSubdiv",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "upAxis",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxSceneQueryExt_raycastAny",
      "comment": {
        "summary": {
          "b": [
            "Raycast returning any blocking hit, not necessarily the closest."
          ]
        },
        "additional": {
          "b": [
            "Returns whether any rigid actor is hit along the ray.",
            "",
            "Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.",
            "",
            "True if a blocking hit was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "raycastAny",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryHit"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQueryExt_raycastSingle",
      "comment": {
        "summary": {
          "b": [
            "Raycast returning a single result."
          ]
        },
        "additional": {
          "b": [
            "Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.",
            "",
            "Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.",
            "",
            "True if a blocking hit was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "raycastSingle",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastHit"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQueryExt_raycastMultiple",
      "comment": {
        "summary": {
          "b": [
            "Raycast returning multiple results."
          ]
        },
        "additional": {
          "b": [
            "Find all rigid actors that get hit along the ray. Each result contains data as specified by the outputFlags field.",
            "",
            "Touching hits are not ordered.",
            "",
            "Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.",
            "",
            "Number of hits in the buffer, or -1 if the buffer overflowed."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "raycastMultiple",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "hitBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastHit"
                }
              }
            }
          }
        },
        {
          "name": "hitBufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "blockingHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Bool"
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxSceneQueryExt_sweepAny",
      "comment": {
        "summary": {
          "b": [
            "Sweep returning any blocking hit, not necessarily the closest."
          ]
        },
        "additional": {
          "b": [
            "Returns whether any rigid actor is hit along the sweep path.",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.",
            "",
            "True if a blocking hit was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweepAny",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "queryFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryHit"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQueryExt_sweepSingle",
      "comment": {
        "summary": {
          "b": [
            "Sweep returning a single result."
          ]
        },
        "additional": {
          "b": [
            "Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.",
            "",
            "True if a blocking hit was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweepSingle",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxSceneQueryExt_sweepMultiple",
      "comment": {
        "summary": {
          "b": [
            "Sweep returning multiple results."
          ]
        },
        "additional": {
          "b": [
            "Find all rigid actors that get hit along the sweep. Each result contains data as specified by the outputFlags field.",
            "",
            "Touching hits are not ordered.",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.",
            "",
            "Number of hits in the buffer, or -1 if the buffer overflowed."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "sweepMultiple",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "outputFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "hitBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "hitBufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "blockingHit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Bool"
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxSceneQueryExt_overlapMultiple",
      "comment": {
        "summary": {
          "b": [
            "Test overlap between a geometry and objects in the scene."
          ]
        },
        "additional": {
          "b": [
            "Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both get written to the hit buffer.",
            "",
            "PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case",
            "",
            "Number of hits in the buffer, or -1 if the buffer overflowed."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "overlapMultiple",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "hitBuffer",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOverlapHit"
                }
              }
            }
          }
        },
        {
          "name": "hitBufferSize",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxSceneQueryExt_overlapAny",
      "comment": {
        "summary": {
          "b": [
            "Test returning, for a given geometry, any overlapping object in the scene."
          ]
        },
        "additional": {
          "b": [
            "Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both trigger a hit.",
            "",
            "PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case",
            "",
            "True if an overlap was found."
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "overlapAny",
            "class_name": "PxSceneQueryExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "hit",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxOverlapHit"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxBatchQueryExt_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxBatchQueryExt",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBatchQueryExt"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxBatchQueryExt_raycast_mut",
      "comment": {
        "summary": {
          "b": [
            "Performs a raycast against objects in the scene."
          ]
        },
        "additional": {
          "b": [
            "Touching hits are not ordered.",
            "",
            "Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.",
            "",
            "This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock",
            "and overlapping writes from different threads may result in undefined behavior).",
            "",
            "Returns a PxRaycastBuffer pointer that will store the result of the query after execute() is completed.",
            "This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "raycast",
            "class_name": "PxBatchQueryExt",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBatchQueryExt"
                }
              }
            }
          }
        },
        {
          "name": "origin",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "maxNbTouches",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxRaycastBuffer"
            }
          }
        }
      }
    },
    {
      "name": "PxBatchQueryExt_sweep_mut",
      "comment": {
        "summary": {
          "b": [
            "Performs a sweep test against objects in the scene."
          ]
        },
        "additional": {
          "b": [
            "Touching hits are not ordered.",
            "",
            "If a shape from the scene is already overlapping with the query shape in its starting position,",
            "the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.",
            "",
            "This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock",
            "and overlapping writes from different threads may result in undefined behavior).",
            "",
            "Returns a PxSweepBuffer pointer that will store the result of the query after execute() is completed.",
            "This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "sweep",
            "class_name": "PxBatchQueryExt",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBatchQueryExt"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "distance",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "maxNbTouches",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "hitFlags",
          "kind": {
            "Flags": {
              "name": "PxHitFlags",
              "repr": "UShort"
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        },
        {
          "name": "inflation",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSweepBuffer"
            }
          }
        }
      }
    },
    {
      "name": "PxBatchQueryExt_overlap_mut",
      "comment": {
        "summary": {
          "b": [
            "Performs an overlap test of a given geometry against objects in the scene."
          ]
        },
        "additional": {
          "b": [
            "Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see #PxQueryHitType).",
            "",
            "eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.",
            "",
            "If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.",
            "",
            "This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock",
            "and overlapping writes from different threads may result in undefined behavior).",
            "",
            "Returns a PxOverlapBuffer pointer that will store the result of the query after execute() is completed.",
            "This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "overlap",
            "class_name": "PxBatchQueryExt",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBatchQueryExt"
                }
              }
            }
          }
        },
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "pose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "maxNbTouches",
          "kind": {
            "Builtin": "UShort"
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "cache",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryCache"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxOverlapBuffer"
            }
          }
        }
      }
    },
    {
      "name": "PxBatchQueryExt_execute_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "execute",
            "class_name": "PxBatchQueryExt",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxBatchQueryExt"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateBatchQueryExt",
      "comment": {
        "summary": {
          "b": [
            "Create a PxBatchQueryExt without the need for pre-allocated result or touch buffers."
          ]
        },
        "additional": {
          "b": [
            "Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal.",
            "In the event that a NULL pointer is returned a corresponding error will be issued to the error stream."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateBatchQueryExt",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "queryFilterCallback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "maxNbRaycasts",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxNbRaycastTouches",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxNbSweeps",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxNbSweepTouches",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxNbOverlaps",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "maxNbOverlapTouches",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBatchQueryExt"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateBatchQueryExt_1",
      "comment": {
        "summary": {
          "b": [
            "Create a PxBatchQueryExt with user-supplied result and touch buffers."
          ]
        },
        "additional": {
          "b": [
            "Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal.",
            "In the event that a NULL pointer is returned a corresponding error will be issued to the error stream."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateBatchQueryExt",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "scene",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxScene"
                }
              }
            }
          }
        },
        {
          "name": "queryFilterCallback",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        },
        {
          "name": "raycastBuffers",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastBuffer"
                }
              }
            }
          }
        },
        {
          "name": "maxNbRaycasts",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "raycastTouches",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRaycastHit"
                }
              }
            }
          }
        },
        {
          "name": "maxNbRaycastTouches",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "sweepBuffers",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepBuffer"
                }
              }
            }
          }
        },
        {
          "name": "maxNbSweeps",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "sweepTouches",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxSweepHit"
                }
              }
            }
          }
        },
        {
          "name": "maxNbSweepTouches",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "overlapBuffers",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOverlapBuffer"
                }
              }
            }
          }
        },
        {
          "name": "maxNbOverlaps",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "overlapTouches",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxOverlapHit"
                }
              }
            }
          }
        },
        {
          "name": "maxNbOverlapTouches",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxBatchQueryExt"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxCreateExternalSceneQuerySystem",
      "comment": {
        "summary": {
          "b": [
            "Creates an external scene query system."
          ]
        },
        "additional": {
          "b": [
            "An external SQ system is the part of a PxScene that deals with scene queries (SQ). This is usually taken care of",
            "by an internal implementation inside PxScene, but it is also possible to re-route all SQ calls to an external",
            "implementation, potentially opening the door to some customizations in behavior and features for advanced users.",
            "",
            "The following external SQ system is an example of how an implementation would look like. It re-uses much of the",
            "same code as the internal version, but it could be re-implemented in a completely different way to match users'",
            "specific needs.",
            "",
            "An external SQ system instance"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateExternalSceneQuerySystem",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "desc",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxSceneQueryDesc"
                }
              }
            }
          }
        },
        {
          "name": "contextID",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxSceneQuerySystem"
            }
          }
        }
      }
    },
    {
      "name": "PxCustomSceneQuerySystem_addPruner_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds a pruner to the system."
          ]
        },
        "additional": {
          "b": [
            "The internal PhysX scene-query system uses two regular pruners (one for static shapes, one for dynamic shapes) and an optional",
            "compound pruner. Our custom scene query system supports an arbitrary number of regular pruners.",
            "",
            "This can be useful to reduce the load on each pruner, in particular during updates, when internal trees are rebuilt in the",
            "background. On the other hand this implementation simply iterates over all created pruners to perform queries, so their cost",
            "might increase if a large number of pruners is used.",
            "",
            "In any case this serves as an example of how the PxSceneQuerySystem API can be used to customize scene queries.",
            "",
            "A pruner index"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addPruner",
            "class_name": "PxCustomSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "primaryType",
          "kind": {
            "Enum": {
              "name": "PxPruningStructureType",
              "cxx_qt": "PxPruningStructureType::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "secondaryType",
          "kind": {
            "Enum": {
              "name": "PxDynamicTreeSecondaryPruner",
              "cxx_qt": "PxDynamicTreeSecondaryPruner::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "preallocated",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCustomSceneQuerySystem_startCustomBuildstep_mut",
      "comment": {
        "summary": {
          "b": [
            "Start custom build-steps for all pruners"
          ]
        },
        "additional": {
          "b": [
            "This function is used in combination with customBuildstep() and finishCustomBuildstep() to let users take control",
            "of the pruners' build-step",
            "&",
            "commit calls - basically the pruners' update functions. These functions should be used",
            "with the PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED update mode, otherwise the build-steps will happen",
            "automatically in fetchResults. For N pruners it can be more efficient to use these custom build-step functions to",
            "perform the updates in parallel:",
            "",
            "- call startCustomBuildstep() first (one synchronous call)",
            "- for each pruner, call customBuildstep() (asynchronous calls from multiple threads)",
            "- once it is done, call finishCustomBuildstep() to finish the update (synchronous call)",
            "",
            "The multi-threaded update is more efficient here than what it is in PxScene, because the \"flushShapes()\" call is",
            "also multi-threaded (while it is not in PxScene).",
            "",
            "Note that users are responsible for locks here, and these calls should not overlap with other SQ calls. In particular",
            "one should not add new objects to the SQ system or perform queries while these calls are happening.",
            "",
            "The number of pruners in the system."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "startCustomBuildstep",
            "class_name": "PxCustomSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCustomSceneQuerySystem_customBuildstep_mut",
      "comment": {
        "summary": {
          "b": [
            "Perform a custom build-step for a given pruner."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "customBuildstep",
            "class_name": "PxCustomSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystem"
                }
              }
            }
          }
        },
        {
          "name": "index",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCustomSceneQuerySystem_finishCustomBuildstep_mut",
      "comment": {
        "summary": {
          "b": [
            "Finish custom build-steps"
          ]
        },
        "additional": {
          "b": [
            "Call this function once after all the customBuildstep() calls are done."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "finishCustomBuildstep",
            "class_name": "PxCustomSceneQuerySystem",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystem"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCustomSceneQuerySystemAdapter_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxCustomSceneQuerySystemAdapter"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystemAdapter"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxCustomSceneQuerySystemAdapter_getPrunerIndex",
      "comment": {
        "summary": {
          "b": [
            "Gets a pruner index for an actor/shape."
          ]
        },
        "additional": {
          "b": [
            "This user-defined function tells the system in which pruner a given actor/shape should go.",
            "",
            "The returned index must be valid, i.e. it must have been previously returned to users by PxCustomSceneQuerySystem::addPruner.",
            "",
            "A pruner index for this actor/shape."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getPrunerIndex",
            "class_name": "PxCustomSceneQuerySystemAdapter",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystemAdapter"
                }
              }
            }
          }
        },
        {
          "name": "actor",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRigidActor"
                }
              }
            }
          }
        },
        {
          "name": "shape",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxShape"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxCustomSceneQuerySystemAdapter_processPruner",
      "comment": {
        "summary": {
          "b": [
            "Pruner filtering callback."
          ]
        },
        "additional": {
          "b": [
            "This will be called for each query to validate whether it should process a given pruner.",
            "",
            "True to process the pruner, false to skip it entirely"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "processPruner",
            "class_name": "PxCustomSceneQuerySystemAdapter",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystemAdapter"
                }
              }
            }
          }
        },
        {
          "name": "prunerIndex",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "context",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryThreadContext"
                }
              }
            }
          }
        },
        {
          "name": "filterData",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterData"
                }
              }
            }
          }
        },
        {
          "name": "filterCall",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxQueryFilterCallback"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCreateCustomSceneQuerySystem",
      "comment": {
        "summary": {
          "b": [
            "Creates a custom scene query system."
          ]
        },
        "additional": {
          "b": [
            "This is similar to PxCreateExternalSceneQuerySystem, except this function creates a PxCustomSceneQuerySystem object.",
            "It can be plugged to PxScene the same way, via PxSceneDesc::sceneQuerySystem.",
            "",
            "A custom SQ system instance"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateCustomSceneQuerySystem",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "sceneQueryUpdateMode",
          "kind": {
            "Enum": {
              "name": "PxSceneQueryUpdateMode",
              "cxx_qt": "PxSceneQueryUpdateMode::Enum",
              "repr": "Int"
            }
          }
        },
        {
          "name": "contextID",
          "kind": {
            "Builtin": "ULong"
          }
        },
        {
          "name": "adapter",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxCustomSceneQuerySystemAdapter"
                }
              }
            }
          }
        },
        {
          "name": "usesTreeOfPruners",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxCustomSceneQuerySystem"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxFindFaceIndex",
      "comment": {
        "summary": {
          "b": [
            "Computes closest polygon of the convex hull geometry for a given impact point",
            "and impact direction. When doing sweeps against a scene, one might want to delay",
            "the rather expensive computation of the hit face index for convexes until it is clear",
            "the information is really needed and then use this method to get the corresponding",
            "face index."
          ]
        },
        "additional": {
          "b": [
            "Closest face index of the convex geometry."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxFindFaceIndex",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "convexGeom",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxConvexMeshGeometry"
                }
              }
            }
          }
        },
        {
          "name": "geomPose",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "impactPos",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "unitDir",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "UInt"
      }
    },
    {
      "name": "PxPoissonSampler_setSamplingRadius_mut",
      "comment": {
        "summary": {
          "b": [
            "Sets the sampling radius"
          ]
        },
        "additional": {
          "b": [
            "Returns true if the sampling was successful and false if there was a problem. Usually an internal overflow is the problem for very big meshes or very small sampling radii."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "setSamplingRadius",
            "class_name": "PxPoissonSampler",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPoissonSampler"
                }
              }
            }
          }
        },
        {
          "name": "samplingRadius",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPoissonSampler_addSamplesInSphere_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds new Poisson Samples inside the sphere specified"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addSamplesInSphere",
            "class_name": "PxPoissonSampler",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPoissonSampler"
                }
              }
            }
          }
        },
        {
          "name": "sphereCenter",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "sphereRadius",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "createVolumeSamples",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPoissonSampler_addSamplesInBox_mut",
      "comment": {
        "summary": {
          "b": [
            "Adds new Poisson Samples inside the box specified"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "addSamplesInBox",
            "class_name": "PxPoissonSampler",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPoissonSampler"
                }
              }
            }
          }
        },
        {
          "name": "axisAlignedBox",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "boxOrientation",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxQuat"
                }
              }
            }
          }
        },
        {
          "name": "createVolumeSamples",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPoissonSampler_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxPoissonSampler"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPoissonSampler"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateShapeSampler",
      "comment": {
        "summary": {
          "b": [
            "Creates a shape sampler"
          ]
        },
        "additional": {
          "b": [
            "Returns the sampler"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateShapeSampler",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "geometry",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxGeometry"
                }
              }
            }
          }
        },
        {
          "name": "transform",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxTransform"
                }
              }
            }
          }
        },
        {
          "name": "worldBounds",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxBounds3"
                }
              }
            }
          }
        },
        {
          "name": "initialSamplingRadius",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "numSampleAttemptsAroundPoint",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPoissonSampler"
            }
          }
        }
      }
    },
    {
      "name": "PxTriangleMeshPoissonSampler_isPointInTriangleMesh_mut",
      "comment": {
        "summary": {
          "b": [
            "Checks whether a point is inside the triangle mesh"
          ]
        },
        "additional": {
          "b": [
            "Returns true if the point is inside the triangle mesh"
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isPointInTriangleMesh",
            "class_name": "PxTriangleMeshPoissonSampler",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshPoissonSampler"
                }
              }
            }
          }
        },
        {
          "name": "p",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxTriangleMeshPoissonSampler_delete",
      "comment": null,
      "ext": {
        "IsDelete": "PxTriangleMeshPoissonSampler"
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTriangleMeshPoissonSampler"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreateTriangleMeshSampler",
      "comment": {
        "summary": {
          "b": [
            "Creates a triangle mesh sampler"
          ]
        },
        "additional": {
          "b": [
            "Returns the sampler"
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreateTriangleMeshSampler",
            "is_c": false
          }
        }
      },
      "params": [
        {
          "name": "triangles",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UInt"
              }
            }
          }
        },
        {
          "name": "numTriangles",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "vertices",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "numVertices",
          "kind": {
            "Builtin": "UInt"
          }
        },
        {
          "name": "initialSamplingRadius",
          "kind": {
            "Builtin": "Float"
          }
        },
        {
          "name": "numSampleAttemptsAroundPoint",
          "kind": {
            "Builtin": "Int"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxTriangleMeshPoissonSampler"
            }
          }
        }
      }
    },
    {
      "name": "PxTetrahedronMeshExt_findTetrahedronContainingPoint",
      "comment": {
        "summary": {
          "b": [
            "Returns the index of the tetrahedron that contains a point"
          ]
        },
        "additional": {
          "b": [
            "The index of the tetrahedon containing the point, -1 if not tetrahedron contains the opoint"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "findTetrahedronContainingPoint",
            "class_name": "PxTetrahedronMeshExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "mesh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        },
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "bary",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        },
        {
          "name": "tolerance",
          "kind": {
            "Builtin": "Float"
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "PxTetrahedronMeshExt_findTetrahedronClosestToPoint",
      "comment": {
        "summary": {
          "b": [
            "Returns the index of the tetrahedron closest to a point"
          ]
        },
        "additional": {
          "b": [
            "The index of the tetrahedon closest to the point"
          ]
        }
      },
      "ext": {
        "None": {
          "Method": {
            "func_name": "findTetrahedronClosestToPoint",
            "class_name": "PxTetrahedronMeshExt",
            "is_static": true
          }
        }
      },
      "params": [
        {
          "name": "mesh",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxTetrahedronMesh"
                }
              }
            }
          }
        },
        {
          "name": "point",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Builtin": "Vec3"
              }
            }
          }
        },
        {
          "name": "bary",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Builtin": "Vec4"
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Int"
      }
    },
    {
      "name": "phys_PxInitExtensions",
      "comment": {
        "summary": {
          "b": [
            "Initialize the PhysXExtensions library."
          ]
        },
        "additional": {
          "b": [
            "This should be called before calling any functions or methods in extensions which may require allocation.",
            "",
            "This function does not need to be called before creating a PxDefaultAllocator object."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxInitExtensions",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "physics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "pvd",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "phys_PxCloseExtensions",
      "comment": {
        "summary": {
          "b": [
            "Shut down the PhysXExtensions library."
          ]
        },
        "additional": {
          "b": [
            "This function should be called to cleanly shut down the PhysXExtensions library before application exit.",
            "",
            "This function is required to be called to release foundation usage."
          ]
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCloseExtensions",
            "is_c": true
          }
        }
      },
      "params": [],
      "ret": null
    },
    {
      "name": "PxRepXObject_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxRepXObject"
        }
      },
      "params": [
        {
          "name": "inTypeName",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "inSerializable",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Void"
              }
            }
          }
        },
        {
          "name": "inId",
          "kind": {
            "Builtin": "ULong"
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxRepXObject"
        }
      }
    },
    {
      "name": "PxRepXObject_isValid",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isValid",
            "class_name": "PxRepXObject",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXObject"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxRepXInstantiationArgs_new",
      "comment": null,
      "ext": {
        "None": {
          "Ctor": "PxRepXInstantiationArgs"
        }
      },
      "params": [
        {
          "name": "inPhysics",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPhysics"
                }
              }
            }
          }
        },
        {
          "name": "inCooking",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCooking"
                }
              }
            }
          }
        },
        {
          "name": "inStringTable",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxStringTable"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxRepXInstantiationArgs"
        }
      }
    },
    {
      "name": "PxRepXSerializer_getTypeName_mut",
      "comment": {
        "summary": {
          "b": [
            "The type this Serializer is meant to operate on."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTypeName",
            "class_name": "PxRepXSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXSerializer"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": true,
          "is_array_like": false,
          "pointee": {
            "Builtin": "Char"
          }
        }
      }
    },
    {
      "name": "PxRepXSerializer_objectToFile_mut",
      "comment": {
        "summary": {
          "b": [
            "Convert from a RepX object to a key-value pair hierarchy"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "objectToFile",
            "class_name": "PxRepXSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXSerializer"
                }
              }
            }
          }
        },
        {
          "name": "inLiveObject",
          "kind": {
            "Reference": {
              "is_const": true,
              "pointee": {
                "Record": {
                  "name": "PxRepXObject"
                }
              }
            }
          }
        },
        {
          "name": "inCollection",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        },
        {
          "name": "inWriter",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "XmlWriter"
                }
              }
            }
          }
        },
        {
          "name": "inTempBuffer",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "MemoryBuffer"
                }
              }
            }
          }
        },
        {
          "name": "inArgs",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXInstantiationArgs"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxRepXSerializer_fileToObject_mut",
      "comment": {
        "summary": {
          "b": [
            "Convert from a descriptor to a live object.  Must be an object of this Serializer type."
          ]
        },
        "additional": {
          "b": [
            "The new live object.  It can be an invalid object if the instantiation cannot take place."
          ]
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "fileToObject",
            "class_name": "PxRepXSerializer",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXSerializer"
                }
              }
            }
          }
        },
        {
          "name": "inReader",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "XmlReader"
                }
              }
            }
          }
        },
        {
          "name": "inAllocator",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "XmlMemoryAllocator"
                }
              }
            }
          }
        },
        {
          "name": "inArgs",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxRepXInstantiationArgs"
                }
              }
            }
          }
        },
        {
          "name": "inCollection",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxCollection"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Record": {
          "name": "PxRepXObject"
        }
      }
    },
    {
      "name": "PxPvd_connect_mut",
      "comment": {
        "summary": {
          "b": [
            "Connects the SDK to the PhysX Visual Debugger application."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "connect",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        },
        {
          "name": "transport",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "kind": {
            "Flags": {
              "name": "PxPvdInstrumentationFlags",
              "repr": "UChar"
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPvd_disconnect_mut",
      "comment": {
        "summary": {
          "b": [
            "Disconnects the SDK from the PhysX Visual Debugger application.",
            "If we are still connected, this will kill the entire debugger connection."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "disconnect",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvd_isConnected_mut",
      "comment": {
        "summary": {
          "b": [
            "Return if connection to PVD is created."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isConnected",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        },
        {
          "name": "useCachedStatus",
          "kind": {
            "Builtin": "Bool"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPvd_getTransport_mut",
      "comment": {
        "summary": {
          "b": [
            "returns the PVD data transport",
            "returns NULL if no transport is present."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getTransport",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPvdTransport"
            }
          }
        }
      }
    },
    {
      "name": "PxPvd_getInstrumentationFlags_mut",
      "comment": {
        "summary": {
          "b": [
            "Retrieves the PVD flags. See PxPvdInstrumentationFlags."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getInstrumentationFlags",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Flags": {
          "name": "PxPvdInstrumentationFlags",
          "repr": "UChar"
        }
      }
    },
    {
      "name": "PxPvd_release_mut",
      "comment": {
        "summary": {
          "b": [
            "Releases the pvd instance."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxPvd",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvd"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxCreatePvd",
      "comment": {
        "summary": {
          "b": [
            "Create a pvd instance."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxCreatePvd",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "foundation",
          "kind": {
            "Reference": {
              "is_const": false,
              "pointee": {
                "Record": {
                  "name": "PxFoundation"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPvd"
            }
          }
        }
      }
    },
    {
      "name": "PxPvdTransport_connect_mut",
      "comment": {
        "summary": {
          "b": [
            "Connects to the Visual Debugger application.",
            "return True if success"
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "connect",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPvdTransport_disconnect_mut",
      "comment": {
        "summary": {
          "b": [
            "Disconnects from the Visual Debugger application.",
            "If we are still connected, this will kill the entire debugger connection."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "disconnect",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdTransport_isConnected_mut",
      "comment": {
        "summary": {
          "b": [
            "Return if connection to PVD is created."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "isConnected",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPvdTransport_write_mut",
      "comment": {
        "summary": {
          "b": [
            "write bytes to the other endpoint of the connection. should lock before witre. If an error occurs",
            "this connection will assume to be dead."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "write",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        },
        {
          "name": "inBytes",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "UChar"
              }
            }
          }
        },
        {
          "name": "inLength",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Builtin": "Bool"
      }
    },
    {
      "name": "PxPvdTransport_lock_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "lock",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Reference": {
          "is_const": false,
          "pointee": {
            "Record": {
              "name": "PxPvdTransport"
            }
          }
        }
      }
    },
    {
      "name": "PxPvdTransport_unlock_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "unlock",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdTransport_flush_mut",
      "comment": {
        "summary": {
          "b": [
            "send any data and block until we know it is at least on the wire."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "flush",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "PxPvdTransport_getWrittenDataSize_mut",
      "comment": {
        "summary": {
          "b": [
            "Return size of written data."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "getWrittenDataSize",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": {
        "Builtin": "ULong"
      }
    },
    {
      "name": "PxPvdTransport_release_mut",
      "comment": null,
      "ext": {
        "HasSelf": {
          "Method": {
            "func_name": "release",
            "class_name": "PxPvdTransport",
            "is_static": false
          }
        }
      },
      "params": [
        {
          "name": "self_",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": false,
              "is_array_like": false,
              "pointee": {
                "Record": {
                  "name": "PxPvdTransport"
                }
              }
            }
          }
        }
      ],
      "ret": null
    },
    {
      "name": "phys_PxDefaultPvdSocketTransportCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a default socket transport."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDefaultPvdSocketTransportCreate",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "host",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        },
        {
          "name": "port",
          "kind": {
            "Builtin": "Int"
          }
        },
        {
          "name": "timeoutInMilliseconds",
          "kind": {
            "Builtin": "UInt"
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPvdTransport"
            }
          }
        }
      }
    },
    {
      "name": "phys_PxDefaultPvdFileTransportCreate",
      "comment": {
        "summary": {
          "b": [
            "Create a default file transport."
          ]
        },
        "additional": {
          "b": []
        }
      },
      "ext": {
        "None": {
          "Func": {
            "func_name": "PxDefaultPvdFileTransportCreate",
            "is_c": true
          }
        }
      },
      "params": [
        {
          "name": "name",
          "kind": {
            "Pointer": {
              "is_const": false,
              "is_pointee_const": true,
              "is_array_like": false,
              "pointee": {
                "Builtin": "Char"
              }
            }
          }
        }
      ],
      "ret": {
        "Pointer": {
          "is_const": false,
          "is_pointee_const": false,
          "is_array_like": false,
          "pointee": {
            "Record": {
              "name": "PxPvdTransport"
            }
          }
        }
      }
    }
  ],
  "classes": {
    "PxCustomSceneQuerySystemAdapter": true,
    "PxBroadPhaseResults": true,
    "PxDebugTriangle": true,
    "PxContactStreamIterator": true,
    "PxHairSystemGeometry": true,
    "PxControllerObstacleHit": true,
    "PxSoftBodySimulationData": true,
    "PxBitAndByte": true,
    "PxMassProperties": true,
    "Px1DConstraintMods": true,
    "PxConstraintConnector": true,
    "PxProfileScoped": true,
    "PxInsertionCallback": true,
    "PxRawAllocator": true,
    "PxContactPairPoint": true,
    "PxSDFDesc": true,
    "PxTaskManager": true,
    "PxParticleSystemGeometry": true,
    "PxRigidBodyExt": true,
    "PxCpuDispatcher": true,
    "PxConstraintInvMassScale": true,
    "PxCustomGeometry": true,
    "PxContactPairExtraDataItem": true,
    "PxArticulationSpatialTendon": true,
    "PxDefaultErrorCallback": true,
    "PxRigidActor": true,
    "PxDefaultMemoryInputData": true,
    "PxParticleRigidBuffer": false,
    "PxUnConst": false,
    "PxSamplingExt": true,
    "PxLightCpuTask": true,
    "PxCudaContextManager": false,
    "PxBroadPhaseRegionInfo": true,
    "PxVehicleDrivableSurfaceToTireFrictionPairs": false,
    "PxSimulationStatistics": true,
    "PxBroadPhaseCallback": true,
    "PxArticulationCache": true,
    "PxContactModifyPair": true,
    "PxBroadPhaseRegions": true,
    "PxRigidDynamic": true,
    "PxAggregate": true,
    "PxCollection": true,
    "PxContactPairHeader": true,
    "PxSoftBodySimulationDataDesc": true,
    "PxTGSSolverBodyTxInertia": true,
    "PxSimulationFilterCallback": true,
    "PxTriangleMeshGeometry": true,
    "PxMeshOverlapUtil": true,
    "PxgDynamicsMemoryConfig": true,
    "PxBVHDesc": true,
    "PxSerializer": true,
    "PxFilterData": true,
    "PxSolverConstraintPrepDescBase": true,
    "PxTetrahedronMeshGeometry": true,
    "PxOverlapCallback": true,
    "PxTetrahedronMesh": true,
    "PxRenderOutput": false,
    "PxIndexDataPair": true,
    "PxLogTwo": false,
    "PxParticleAndDiffuseBuffer": false,
    "PxFEMSoftBodyMaterial": false,
    "PxControllerShapeHit": true,
    "PxSpringModifiers": true,
    "PxParticleRigidFilterPair": true,
    "PxArticulationDrive": true,
    "PxScene": true,
    "PxFEMMaterial": true,
    "PxSolverBodyData": true,
    "PxFEMClothMaterial": false,
    "PxTetrahedronMeshExt": true,
    "PxFEMParameters": true,
    "PxVehicleTelemetryData": false,
    "PxConstraintShaderTable": true,
    "PxSerializationRegistry": true,
    "PxDistanceJoint": true,
    "PxActorShape": true,
    "PxHullPolygon": true,
    "PxNodeIndex": true,
    "PxActor": true,
    "PxMat44": true,
    "PxUserControllerHitReport": true,
    "PxControllersHit": true,
    "PxConvexMesh": true,
    "PxBVH33TriangleMesh": false,
    "PxSweepCallback": true,
    "PxTetrahedronMeshData": true,
    "PxSolverContactDesc": true,
    "PxSimpleTriangleMesh": true,
    "PxRefCounted": true,
    "PxLockedData": true,
    "PxCounterFrequencyToTensOfNanos": true,
    "PxArticulationTendonLimit": true,
    "PxGeometryHolder": true,
    "PxDim3": true,
    "PxStridedData": true,
    "PxOverlapHit": true,
    "PxConvexMeshDesc": true,
    "PxSListEntry": true,
    "PxLocationHit": true,
    "PxBitMap": true,
    "PxSceneQueryExt": true,
    "PxArticulationTendonJoint": true,
    "PxMat34": false,
    "PxTriggerPair": true,
    "PxControllerBehaviorCallback": true,
    "PxSoftBodyAuxData": true,
    "PxSerialization": true,
    "PxSceneQuerySystem": true,
    "PxSweepBuffer": true,
    "PxSpatialForce": true,
    "PxSolverConstraintPrepDesc": true,
    "PxPhysics": true,
    "PxHeightFieldDesc": true,
    "PxBoundedData": true,
    "PxVec2": true,
    "PxGpuContactPair": true,
    "PxPvdTransport": true,
    "PxControllerState": true,
    "PxPruningStructure": true,
    "PxContact": true,
    "PxQueryFilterData": true,
    "PxJointLimitParameters": true,
    "PxCustomSceneQuerySystem": true,
    "PxContactPairExtraDataIterator": true,
    "PxContactPairPose": true,
    "PxArticulationFixedTendon": true,
    "PxPoissonSampler": true,
    "PxHash": false,
    "PxJointLinearLimit": true,
    "PxDefaultMemoryOutputStream": true,
    "PxTGSSolverBodyVel": true,
    "PxBoxControllerDesc": true,
    "PxParticleMaterial": true,
    "PxCCDContactModifyCallback": true,
    "PxContactPairVelocity": true,
    "PxParticleVolume": true,
    "PxBroadPhase": true,
    "PxAssertHandler": true,
    "PxSceneReadLock": true,
    "PxPlaneGeometry": true,
    "PxExtendedVec3": true,
    "PxBinaryConverter": false,
    "PxParticleSystem": false,
    "PxTGSSolverBodyData": true,
    "PxArticulationLimit": true,
    "PxTempAllocator": true,
    "PxBatchQueryExt": true,
    "PxInputStream": true,
    "PxTransformPadded": true,
    "PxTriangleMeshPoissonSampler": true,
    "PxFixedJoint": true,
    "PxCapsuleControllerDesc": true,
    "PxBVHRaycastCallback": true,
    "PxBroadPhaseDesc": true,
    "PxVirtualAllocatorCallback": true,
    "PxParticleClothBuffer": false,
    "PxSceneSQSystem": true,
    "PxRunnable": true,
    "PxConstraintInfo": true,
    "PxSweepHit": true,
    "PxPBDParticleSystem": false,
    "PxDebugText": true,
    "PxSoftBody": false,
    "PxContactPair": true,
    "PxTetrahedronMeshDesc": true,
    "PxDiffuseParticleParams": true,
    "PxSolverConstraintDesc": true,
    "PxVehicleWheels4DynData": false,
    "PxSerializationContext": true,
    "PxGearJoint": true,
    "PxContactBuffer": false,
    "PxPvd": true,
    "PxJointLinearLimitPair": true,
    "PxTriangleMeshDesc": true,
    "PxRigidBody": true,
    "PxSoftBodyCollisionData": true,
    "PxSpring": true,
    "PxControllerFilters": true,
    "PxSListImpl": true,
    "PxBroadPhaseUpdateData": true,
    "PxRaycastCallback": true,
    "PxBroadPhasePair": true,
    "PxBVHOverlapCallback": true,
    "PxConstraint": true,
    "PxBVH": true,
    "PxRepXInstantiationArgs": true,
    "PxConeLimitParams": true,
    "PxCapsuleGeometry": true,
    "PxContactModifyCallback": true,
    "PxFoundation": true,
    "PxRepXSerializer": true,
    "PxControllerDesc": true,
    "PxContactPoint": true,
    "PxD6Joint": true,
    "PxSimulationTetrahedronMeshData": true,
    "PxSyncImpl": true,
    "PxTolerancesScale": true,
    "PxArticulationSensor": true,
    "PxFLIPMaterial": false,
    "PxMeshScale": true,
    "PxRaycastHit": true,
    "PxPlane": true,
    "PxDefaultFileOutputStream": true,
    "PxProfilerCallback": true,
    "PxTrianglePadded": true,
    "PxDebugLine": true,
    "PxRenderBuffer": true,
    "PxParticleBuffer": false,
    "PxBroadPhaseExt": true,
    "PxBroadcastingAllocator": true,
    "XmlReader": false,
    "PxTriangleMesh": true,
    "PxConeLimitedConstraint": true,
    "PxArticulationLink": true,
    "PxBase": true,
    "PxTGSSolverConstraintPrepDesc": true,
    "PxJointLimitPyramid": true,
    "PxCookingParams": true,
    "PxMeshQuery": true,
    "PxArticulationRootLinkData": true,
    "PxControllerManager": true,
    "PxBaseTask": true,
    "PxOmniPvd": false,
    "PxDefaultCpuDispatcher": true,
    "PxTypeInfo": false,
    "PxQueryHit": true,
    "PxMassModificationProps": true,
    "PxConstraintAllocator": true,
    "PxConstraintBatchHeader": true,
    "PxRigidStatic": true,
    "PxBoxController": true,
    "PxRigidActorExt": true,
    "PxParticleSpring": true,
    "PxBoxObstacle": true,
    "PxCustomGeometryCallbacks": true,
    "PxBVH34TriangleMesh": true,
    "PxMidphaseDesc": true,
    "PxTime": true,
    "PxCustomMaterial": false,
    "PxOverlapBuffer": true,
    "PxRackAndPinionJoint": true,
    "PxTask": true,
    "PxObstacle": true,
    "PxPrismaticJoint": true,
    "PxDominanceGroupPair": true,
    "PxStringTable": true,
    "PxProcessPxBaseCallback": true,
    "PxGeomSweepHit": true,
    "PxInputData": true,
    "PxModifiableContact": true,
    "PxHeightFieldGeometry": true,
    "PxTGSSolverContactDesc": true,
    "PxObstacleContext": true,
    "PxCollisionTetrahedronMeshData": true,
    "PxTransform": true,
    "PxStringTableExt": true,
    "PxGeomOverlapHit": true,
    "PxDeletionListener": true,
    "PxXmlMiscParameter": true,
    "PxAllocatorCallback": true,
    "PxBounds3": true,
    "PxFEMCloth": false,
    "PxUserAllocated": true,
    "PxRestitutionModifiers": true,
    "PxVirtualAllocator": true,
    "PxParticleRigidAttachment": false,
    "PxMPMParticleSystem": false,
    "PxFLIPParticleSystem": false,
    "PxGroupsMask": true,
    "PxMaterial": true,
    "PxVehicleWheels4SimData": false,
    "MemoryBuffer": false,
    "PxSphericalJoint": true,
    "PxSpatialVelocity": true,
    "PxCustomParticleSystem": false,
    "PxSimulationEventCallback": true,
    "PxPBDMaterial": false,
    "Interpolation": true,
    "PxAllocationListener": true,
    "PxDebugPoint": true,
    "PxArticulationTendon": true,
    "PxControllerFilterCallback": true,
    "PxTetrahedron": true,
    "PxSoftBodyMesh": true,
    "PxConstraintVisualizer": true,
    "PxSceneLimits": true,
    "PxRevoluteJoint": true,
    "PxGeometryQuery": true,
    "PxHeightField": true,
    "PxControllerStats": true,
    "PxVec3": true,
    "PxVec3Padded": true,
    "PxTGSSolverConstraintPrepDescBase": true,
    "PxDefaultAllocator": true,
    "PxVehicleTireForceCalculator": false,
    "PxArticulationAttachment": true,
    "PxDefaultFileInputData": true,
    "PxCustomGeometryType": true,
    "PxMutexImpl": true,
    "PxAllocator": true,
    "PxBroadPhaseRegion": true,
    "PxOutputStream": true,
    "PxJointAngularLimitPair": true,
    "PxContactJoint": true,
    "PxQueryFilterCallback": true,
    "PxGeomRaycastHit": true,
    "PxPvdSceneClient": true,
    "PxBVHTraversalCallback": true,
    "PxConvexMeshGeometry": true,
    "PxHairSystem": false,
    "PxCollisionMeshMappingData": true,
    "PxControllerHit": true,
    "PxMetaDataEntry": true,
    "PxSolverBody": true,
    "PxBroadcastingErrorCallback": true,
    "PxContactSet": true,
    "PxMat33": true,
    "PxAABBManager": true,
    "PxBaseMaterial": true,
    "PxBoxGeometry": true,
    "PxGeomIndexPair": true,
    "PxSceneDesc": true,
    "PxSceneQuerySystemBase": true,
    "PxShapeExt": true,
    "PxArticulationReducedCoordinate": true,
    "PxContactPatch": true,
    "PxJoint": true,
    "PxCooking": false,
    "PxController": true,
    "XmlWriter": false,
    "PxContactPairIndex": true,
    "PxJointLimitCone": true,
    "PxShape": true,
    "PxQuat": true,
    "PxD6JointDrive": true,
    "PxSphereGeometry": true,
    "PxHeightFieldSample": true,
    "PxArticulationJointReducedCoordinate": true,
    "PxTempAllocatorChunk": true,
    "PxMPMMaterial": false,
    "PxQueryCache": true,
    "PxCapsuleObstacle": true,
    "PxCapsuleController": true,
    "PxGeometry": true,
    "PxRepXObject": true,
    "PxQueryThreadContext": true,
    "PxGpuParticleBufferIndexPair": true,
    "PxRaycastBuffer": true,
    "PxReadWriteLock": true,
    "PxSceneWriteLock": true,
    "Px1DConstraint": true,
    "PxDeserializationContext": true,
    "PxTriangle": true,
    "PxJacobianRow": true,
    "PxErrorCallback": true,
    "PxExtendedContact": true,
    "PxGpuBodyData": true,
    "XmlMemoryAllocator": false,
    "PxSceneQueryDesc": true,
    "PxBVH34MidphaseDesc": true,
    "PxVec4": true,
    "PxBroadPhaseCaps": true,
    "PxGpuActorPair": true
  },
  "derived": {
    "PxQueryHit": [
      "PxLocationHit",
      "PxGeomOverlapHit"
    ],
    "PxPoissonSampler": [
      "PxTriangleMeshPoissonSampler"
    ],
    "PxRefCounted": [
      "PxConvexMesh",
      "PxHeightField",
      "PxTriangleMesh",
      "PxSoftBodyAuxData",
      "PxTetrahedronMesh",
      "PxSoftBodyMesh",
      "PxShape",
      "PxBaseMaterial"
    ],
    "PxCpuDispatcher": [
      "PxDefaultCpuDispatcher"
    ],
    "PxBase": [
      "PxRefCounted",
      "PxBVH",
      "PxActor",
      "PxAggregate",
      "PxArticulationAttachment",
      "PxArticulationTendonJoint",
      "PxArticulationTendon",
      "PxArticulationSensor",
      "PxArticulationReducedCoordinate",
      "PxArticulationJointReducedCoordinate",
      "PxConstraint",
      "PxPruningStructure",
      "PxJoint"
    ],
    "PxSimpleTriangleMesh": [
      "PxTriangleMeshDesc"
    ],
    "PxProfilerCallback": [
      "PxPvd"
    ],
    "PxBaseTask": [
      "PxTask",
      "PxLightCpuTask"
    ],
    "PxSolverConstraintPrepDescBase": [
      "PxSolverConstraintPrepDesc"
    ],
    "PxGeomOverlapHit": [
      "PxOverlapHit"
    ],
    "PxUserAllocated": [
      "PxCollisionMeshMappingData",
      "PxSoftBodyCollisionData",
      "PxTetrahedronMeshData",
      "PxSoftBodySimulationData",
      "PxCollisionTetrahedronMeshData",
      "PxSimulationTetrahedronMeshData",
      "PxPoissonSampler"
    ],
    "PxContact": [
      "PxExtendedContact"
    ],
    "PxTriangle": [
      "PxTrianglePadded"
    ],
    "PxActor": [
      "PxRigidActor"
    ],
    "PxOutputStream": [
      "PxDefaultMemoryOutputStream",
      "PxDefaultFileOutputStream"
    ],
    "PxAllocatorCallback": [
      "PxBroadcastingAllocator",
      "PxDefaultAllocator"
    ],
    "PxBaseMaterial": [
      "PxFEMMaterial",
      "PxMaterial",
      "PxParticleMaterial"
    ],
    "PxSceneQueryDesc": [
      "PxSceneDesc"
    ],
    "PxControllerDesc": [
      "PxBoxControllerDesc",
      "PxCapsuleControllerDesc"
    ],
    "PxObstacle": [
      "PxBoxObstacle",
      "PxCapsuleObstacle"
    ],
    "PxInputStream": [
      "PxInputData"
    ],
    "PxTriangleMesh": [
      "PxBVH34TriangleMesh"
    ],
    "PxActorShape": [
      "PxRaycastHit",
      "PxOverlapHit",
      "PxSweepHit"
    ],
    "PxSceneQuerySystemBase": [
      "PxSceneSQSystem",
      "PxSceneQuerySystem"
    ],
    "PxContactPairExtraDataItem": [
      "PxContactPairVelocity",
      "PxContactPairPose",
      "PxContactPairIndex"
    ],
    "PxInputData": [
      "PxDefaultMemoryInputData",
      "PxDefaultFileInputData"
    ],
    "PxSceneQuerySystem": [
      "PxCustomSceneQuerySystem"
    ],
    "PxStridedData": [
      "PxBoundedData"
    ],
    "PxArticulationTendon": [
      "PxArticulationSpatialTendon",
      "PxArticulationFixedTendon"
    ],
    "PxGeomRaycastHit": [
      "PxRaycastHit"
    ],
    "PxRigidActor": [
      "PxRigidBody",
      "PxRigidStatic"
    ],
    "PxGeometry": [
      "PxBoxGeometry",
      "PxCapsuleGeometry",
      "PxConvexMeshGeometry",
      "PxSphereGeometry",
      "PxPlaneGeometry",
      "PxTriangleMeshGeometry",
      "PxHeightFieldGeometry",
      "PxParticleSystemGeometry",
      "PxHairSystemGeometry",
      "PxTetrahedronMeshGeometry",
      "PxCustomGeometry"
    ],
    "PxLocationHit": [
      "PxGeomRaycastHit",
      "PxGeomSweepHit"
    ],
    "PxJointLimitParameters": [
      "PxJointLinearLimit",
      "PxJointLinearLimitPair",
      "PxJointAngularLimitPair",
      "PxJointLimitCone",
      "PxJointLimitPyramid"
    ],
    "PxExtendedContact": [
      "PxModifiableContact"
    ],
    "PxSceneSQSystem": [
      "PxScene"
    ],
    "PxRigidBody": [
      "PxArticulationLink",
      "PxRigidDynamic"
    ],
    "PxControllerHit": [
      "PxControllerShapeHit",
      "PxControllersHit",
      "PxControllerObstacleHit"
    ],
    "PxSpring": [
      "PxD6JointDrive"
    ],
    "PxVec3": [
      "PxVec3Padded"
    ],
    "PxErrorCallback": [
      "PxBroadcastingErrorCallback",
      "PxDefaultErrorCallback"
    ],
    "PxJoint": [
      "PxDistanceJoint",
      "PxContactJoint",
      "PxFixedJoint",
      "PxPrismaticJoint",
      "PxRevoluteJoint",
      "PxSphericalJoint",
      "PxD6Joint",
      "PxGearJoint",
      "PxRackAndPinionJoint"
    ],
    "PxGeomSweepHit": [
      "PxSweepHit"
    ],
    "PxController": [
      "PxBoxController",
      "PxCapsuleController"
    ]
  }
}
